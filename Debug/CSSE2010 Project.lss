
CSSE2010 Project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000160  00800100  00003ca6  00003d5a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003ca6  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000001a5  00800260  00800260  00003eba  2**0
                  ALLOC
  3 .eeprom       0000004f  00810000  00810000  00003eba  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .comment      0000005c  00000000  00000000  00003f09  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00003f68  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 000005b8  00000000  00000000  00003fa8  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00005ef9  00000000  00000000  00004560  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001cfc  00000000  00000000  0000a459  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00003434  00000000  00000000  0000c155  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000dcc  00000000  00000000  0000f58c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000160f  00000000  00000000  00010358  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00002865  00000000  00000000  00011967  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000448  00000000  00000000  000141cc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 68 01 	jmp	0x2d0	; 0x2d0 <__ctors_end>
       4:	0c 94 85 01 	jmp	0x30a	; 0x30a <__bad_interrupt>
       8:	0c 94 85 01 	jmp	0x30a	; 0x30a <__bad_interrupt>
       c:	0c 94 85 01 	jmp	0x30a	; 0x30a <__bad_interrupt>
      10:	0c 94 85 01 	jmp	0x30a	; 0x30a <__bad_interrupt>
      14:	0c 94 13 04 	jmp	0x826	; 0x826 <__vector_5>
      18:	0c 94 85 01 	jmp	0x30a	; 0x30a <__bad_interrupt>
      1c:	0c 94 85 01 	jmp	0x30a	; 0x30a <__bad_interrupt>
      20:	0c 94 85 01 	jmp	0x30a	; 0x30a <__bad_interrupt>
      24:	0c 94 b2 04 	jmp	0x964	; 0x964 <__vector_9>
      28:	0c 94 85 01 	jmp	0x30a	; 0x30a <__bad_interrupt>
      2c:	0c 94 85 01 	jmp	0x30a	; 0x30a <__bad_interrupt>
      30:	0c 94 85 01 	jmp	0x30a	; 0x30a <__bad_interrupt>
      34:	0c 94 85 01 	jmp	0x30a	; 0x30a <__bad_interrupt>
      38:	0c 94 85 01 	jmp	0x30a	; 0x30a <__bad_interrupt>
      3c:	0c 94 85 01 	jmp	0x30a	; 0x30a <__bad_interrupt>
      40:	0c 94 67 18 	jmp	0x30ce	; 0x30ce <__vector_16>
      44:	0c 94 85 01 	jmp	0x30a	; 0x30a <__bad_interrupt>
      48:	0c 94 85 01 	jmp	0x30a	; 0x30a <__bad_interrupt>
      4c:	0c 94 85 01 	jmp	0x30a	; 0x30a <__bad_interrupt>
      50:	0c 94 19 17 	jmp	0x2e32	; 0x2e32 <__vector_20>
      54:	0c 94 d7 16 	jmp	0x2dae	; 0x2dae <__vector_21>
      58:	0c 94 85 01 	jmp	0x30a	; 0x30a <__bad_interrupt>
      5c:	0c 94 85 01 	jmp	0x30a	; 0x30a <__bad_interrupt>
      60:	0c 94 85 01 	jmp	0x30a	; 0x30a <__bad_interrupt>
      64:	0c 94 85 01 	jmp	0x30a	; 0x30a <__bad_interrupt>
      68:	0c 94 85 01 	jmp	0x30a	; 0x30a <__bad_interrupt>
      6c:	0c 94 85 01 	jmp	0x30a	; 0x30a <__bad_interrupt>
      70:	0c 94 85 01 	jmp	0x30a	; 0x30a <__bad_interrupt>
      74:	0c 94 85 01 	jmp	0x30a	; 0x30a <__bad_interrupt>
      78:	0c 94 85 01 	jmp	0x30a	; 0x30a <__bad_interrupt>
      7c:	08 07       	cpc	r16, r24
      7e:	0b 07       	cpc	r16, r27
      80:	0b 07       	cpc	r16, r27
      82:	0b 07       	cpc	r16, r27
      84:	08 07       	cpc	r16, r24
      86:	0f 07       	cpc	r16, r31
      88:	0f 07       	cpc	r16, r31
      8a:	13 07       	cpc	r17, r19
      8c:	62 07       	cpc	r22, r18
      8e:	2b 07       	cpc	r18, r27
      90:	2b 07       	cpc	r18, r27
      92:	2b 07       	cpc	r18, r27
      94:	62 07       	cpc	r22, r18
      96:	3c 07       	cpc	r19, r28
      98:	3c 07       	cpc	r19, r28
      9a:	55 07       	cpc	r21, r21

0000009c <__trampolines_end>:
      9c:	6c 65       	ori	r22, 0x5C	; 92
      9e:	76 65       	ori	r23, 0x56	; 86
      a0:	6c 3a       	cpi	r22, 0xAC	; 172
      a2:	20 25       	eor	r18, r0
      a4:	75 00       	.word	0x0075	; ????

000000a6 <__c.2257>:
      a6:	53 63 6f 72 65 3a 20 25 75 00                       Score: %u.

000000b0 <__c.2279>:
      b0:	25 73 00                                            %s.

000000b3 <__c.2277>:
      b3:	25 73 00                                            %s.

000000b6 <__c.2273>:
      b6:	45 6e 74 65 72 20 61 20 6e 61 6d 65 00              Enter a name.

000000c3 <__c.2271>:
      c3:	4e 45 57 20 48 49 47 48 20 53 43 4f 52 45 21 21     NEW HIGH SCORE!!
	...

000000d4 <__c.2252>:
      d4:	25 73 00                                            %s.

000000d7 <__c.2250>:
      d7:	20 25 75 00                                          %u.

000000db <__c.2248>:
      db:	25 73 00                                            %s.

000000de <__c.2246>:
      de:	20 25 75 00                                          %u.

000000e2 <__c.2244>:
      e2:	25 73 00                                            %s.

000000e5 <__c.2242>:
      e5:	20 25 75 00                                          %u.

000000e9 <__c.2240>:
      e9:	25 73 00                                            %s.

000000ec <__c.2238>:
      ec:	20 25 75 00                                          %u.

000000f0 <__c.2236>:
      f0:	25 73 00                                            %s.

000000f3 <__c.2234>:
      f3:	20 25 75 00                                          %u.

000000f7 <__c.2232>:
      f7:	20 20 35 20 00                                        5 .

000000fc <__c.2230>:
      fc:	20 20 34 20 20 00                                     4  .

00000102 <__c.2228>:
     102:	20 20 33 20 00                                        3 .

00000107 <__c.2226>:
     107:	20 20 32 20 00                                        2 .

0000010c <__c.2224>:
     10c:	20 20 31 20 20 00                                     1  .

00000112 <__c.2222>:
     112:	20 20 20 4e 61 6d 65 00                                Name.

0000011a <__c.2220>:
     11a:	53 63 6f 72 65 00                                   Score.

00000120 <__c.2218>:
     120:	20 52 61 6e 6b 00                                    Rank.

00000126 <__c.2216>:
     126:	48 69 67 68 73 63 6f 72 65 00                       Highscore.

00000130 <__c.2315>:
     130:	4c 65 76 65 6c 3a 20 25 75 00                       Level: %u.

0000013a <__c.2250>:
     13a:	4c 69 76 65 73 3a 20 25 75 00                       Lives: %u.

00000144 <__c.2369>:
     144:	50 72 65 73 73 20 61 20 62 75 74 74 6f 6e 20 74     Press a button t
     154:	6f 20 73 74 61 72 74 20 61 67 61 69 6e 00           o start again.

00000162 <__c.2367>:
     162:	47 41 4d 45 20 4f 56 45 52 00                       GAME OVER.

0000016c <__c.2365>:
     16c:	57 49 4e 4e 45 52 21 21 00                          WINNER!!.

00000175 <__c.2348>:
     175:	43 53 53 45 32 30 31 30 2f 37 32 30 31 20 70 72     CSSE2010/7201 pr
     185:	6f 6a 65 63 74 20 62 79 20 4d 69 63 68 61 65 6c     oject by Michael
     195:	20 42 6f 73 73 6e 65 72 20 53 34 34 32 37 37 31      Bossner S442771
     1a5:	39 00                                               9.

000001a7 <__c.2346>:
     1a7:	46 72 6f 67 67 65 72 00                             Frogger.

000001af <__c.2049>:
     1af:	53 63 6f 72 65 3a 20 25 34 75 00                    Score: %4u.

000001ba <numbers>:
     1ba:	25 02 22 02 1e 02 1a 02 16 02 12 02 0e 02 0a 02     %.".............
     1ca:	06 02 02 02                                         ....

000001ce <letters>:
     1ce:	94 02 90 02 8c 02 88 02 84 02 80 02 7c 02 78 02     ............|.x.
     1de:	75 02 71 02 6d 02 69 02 64 02 60 02 5c 02 58 02     u.q.m.i.d.`.\.X.
     1ee:	53 02 4f 02 4b 02 46 02 42 02 3d 02 38 02 33 02     S.O.K.F.B.=.8.3.
     1fe:	2e 02 29 02                                         ..).

00000202 <cols_9>:
     202:	64 92 92 7d                                         d..}

00000206 <cols_8>:
     206:	6c 92 92 6d                                         l..m

0000020a <cols_7>:
     20a:	80 9e a0 c1                                         ....

0000020e <cols_6>:
     20e:	7c 92 92 4d                                         |..M

00000212 <cols_5>:
     212:	e4 a2 a2 9d                                         ....

00000216 <cols_4>:
     216:	18 28 48 ff                                         .(H.

0000021a <cols_3>:
     21a:	44 92 92 6d                                         D..m

0000021e <cols_2>:
     21e:	46 8a 92 63                                         F..c

00000222 <cols_1>:
     222:	42 fe 03                                            B..

00000225 <cols_0>:
     225:	7c 92 a2 7d                                         |..}

00000229 <cols_Z>:
     229:	86 8a 92 a2 c3                                      .....

0000022e <cols_Y>:
     22e:	e0 10 0e 10 e1                                      .....

00000233 <cols_X>:
     233:	c6 28 10 28 c7                                      .(.(.

00000238 <cols_W>:
     238:	fc 02 1c 02 fd                                      .....

0000023d <cols_V>:
     23d:	f8 04 02 04 f9                                      .....

00000242 <cols_U>:
     242:	fc 02 02 fd                                         ....

00000246 <cols_T>:
     246:	80 80 fe 80 81                                      .....

0000024b <cols_S>:
     24b:	64 92 92 4d                                         d..M

0000024f <cols_R>:
     24f:	fe 90 98 67                                         ...g

00000253 <cols_Q>:
     253:	7c 82 8a 7c 03                                      |..|.

00000258 <cols_P>:
     258:	fe 90 90 61                                         ...a

0000025c <cols_O>:
     25c:	7c 82 82 7d                                         |..}

00000260 <cols_N>:
     260:	fe 20 10 ff                                         . ..

00000264 <cols_M>:
     264:	fe 40 30 40 ff                                      .@0@.

00000269 <cols_L>:
     269:	fe 02 02 03                                         ....

0000026d <cols_K>:
     26d:	fe 10 28 c7                                         ..(.

00000271 <cols_J>:
     271:	04 02 02 fd                                         ....

00000275 <cols_I>:
     275:	82 fe 83                                            ...

00000278 <cols_H>:
     278:	fe 10 10 ff                                         ....

0000027c <cols_G>:
     27c:	7c 82 92 5d                                         |..]

00000280 <cols_F>:
     280:	fe 90 90 81                                         ....

00000284 <cols_E>:
     284:	fe 92 92 83                                         ....

00000288 <cols_D>:
     288:	fe 82 82 7d                                         ...}

0000028c <cols_C>:
     28c:	7c 82 82 45                                         |..E

00000290 <cols_B>:
     290:	fe 92 92 6d                                         ...m

00000294 <cols_A>:
     294:	7e 90 90 7f                                         ~...

00000298 <__c.2096>:
     298:	1b 5b 42 1b 5b 44 00                                .[B.[D.

0000029f <__c.2058>:
     29f:	1b 5b 3f 32 35 68 00                                .[?25h.

000002a6 <__c.2054>:
     2a6:	1b 5b 3f 32 35 6c 00                                .[?25l.

000002ad <__c.2050>:
     2ad:	1b 5b 25 64 6d 00                                   .[%dm.

000002b3 <__c.2045>:
     2b3:	1b 5b 4b 00                                         .[K.

000002b7 <__c.2040>:
     2b7:	1b 5b 32 4a 00                                      .[2J.

000002bc <__c.2035>:
     2bc:	1b 5b 37 6d 00                                      .[7m.

000002c1 <__c.2030>:
     2c1:	1b 5b 30 6d 00                                      .[0m.

000002c6 <__c.2025>:
     2c6:	1b 5b 25 64 3b 25 64 48 00 00                       .[%d;%dH..

000002d0 <__ctors_end>:
     2d0:	11 24       	eor	r1, r1
     2d2:	1f be       	out	0x3f, r1	; 63
     2d4:	cf ef       	ldi	r28, 0xFF	; 255
     2d6:	d8 e0       	ldi	r29, 0x08	; 8
     2d8:	de bf       	out	0x3e, r29	; 62
     2da:	cd bf       	out	0x3d, r28	; 61

000002dc <__do_copy_data>:
     2dc:	12 e0       	ldi	r17, 0x02	; 2
     2de:	a0 e0       	ldi	r26, 0x00	; 0
     2e0:	b1 e0       	ldi	r27, 0x01	; 1
     2e2:	e6 ea       	ldi	r30, 0xA6	; 166
     2e4:	fc e3       	ldi	r31, 0x3C	; 60
     2e6:	02 c0       	rjmp	.+4      	; 0x2ec <__do_copy_data+0x10>
     2e8:	05 90       	lpm	r0, Z+
     2ea:	0d 92       	st	X+, r0
     2ec:	a0 36       	cpi	r26, 0x60	; 96
     2ee:	b1 07       	cpc	r27, r17
     2f0:	d9 f7       	brne	.-10     	; 0x2e8 <__do_copy_data+0xc>

000002f2 <__do_clear_bss>:
     2f2:	24 e0       	ldi	r18, 0x04	; 4
     2f4:	a0 e6       	ldi	r26, 0x60	; 96
     2f6:	b2 e0       	ldi	r27, 0x02	; 2
     2f8:	01 c0       	rjmp	.+2      	; 0x2fc <.do_clear_bss_start>

000002fa <.do_clear_bss_loop>:
     2fa:	1d 92       	st	X+, r1

000002fc <.do_clear_bss_start>:
     2fc:	a5 30       	cpi	r26, 0x05	; 5
     2fe:	b2 07       	cpc	r27, r18
     300:	e1 f7       	brne	.-8      	; 0x2fa <.do_clear_bss_loop>
     302:	0e 94 f8 14 	call	0x29f0	; 0x29f0 <main>
     306:	0c 94 51 1e 	jmp	0x3ca2	; 0x3ca2 <_exit>

0000030a <__bad_interrupt>:
     30a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000030e <track_helper>:
static uint16_t duty_cycle_to_pulse_width(float dutycycle, uint16_t clockperiod) {
	return (dutycycle * clockperiod) / 100;
}

// Controls what tones will be played and increments the array counter
static void track_helper(void) {
     30e:	cf 92       	push	r12
     310:	df 92       	push	r13
     312:	ef 92       	push	r14
     314:	ff 92       	push	r15
	tone = TRUE;
     316:	81 e0       	ldi	r24, 0x01	; 1
     318:	80 93 69 02 	sts	0x0269, r24	; 0x800269 <tone>
	freq = loaded_track[count];
     31c:	e0 91 68 02 	lds	r30, 0x0268	; 0x800268 <count>
     320:	f0 e0       	ldi	r31, 0x00	; 0
     322:	ee 0f       	add	r30, r30
     324:	ff 1f       	adc	r31, r31
     326:	80 91 65 02 	lds	r24, 0x0265	; 0x800265 <loaded_track>
     32a:	90 91 66 02 	lds	r25, 0x0266	; 0x800266 <loaded_track+0x1>
     32e:	e8 0f       	add	r30, r24
     330:	f9 1f       	adc	r31, r25
/////////////////////////////// Private (Helper) Functions /////////////////////

// For a given frequency (Hz), return the clock period (in terms of the
// number of clock cycles of a 1MHz clock)
static uint16_t freq_to_clock_period(uint16_t freq) {
	return (1000000UL / freq);
     332:	20 81       	ld	r18, Z
     334:	31 81       	ldd	r19, Z+1	; 0x01
     336:	40 e0       	ldi	r20, 0x00	; 0
     338:	50 e0       	ldi	r21, 0x00	; 0
     33a:	60 e4       	ldi	r22, 0x40	; 64
     33c:	72 e4       	ldi	r23, 0x42	; 66
     33e:	8f e0       	ldi	r24, 0x0F	; 15
     340:	90 e0       	ldi	r25, 0x00	; 0
     342:	0e 94 5a 1a 	call	0x34b4	; 0x34b4 <__udivmodsi4>
     346:	69 01       	movw	r12, r18
     348:	7a 01       	movw	r14, r20
// Controls what tones will be played and increments the array counter
static void track_helper(void) {
	tone = TRUE;
	freq = loaded_track[count];
	clockperiod = freq_to_clock_period(freq);
	pulsewidth = duty_cycle_to_pulse_width(dutycycle, clockperiod);
     34a:	b9 01       	movw	r22, r18
     34c:	80 e0       	ldi	r24, 0x00	; 0
     34e:	90 e0       	ldi	r25, 0x00	; 0
     350:	0e 94 36 19 	call	0x326c	; 0x326c <__floatunsisf>
     354:	20 91 75 02 	lds	r18, 0x0275	; 0x800275 <dutycycle>
     358:	30 91 76 02 	lds	r19, 0x0276	; 0x800276 <dutycycle+0x1>
     35c:	40 91 77 02 	lds	r20, 0x0277	; 0x800277 <dutycycle+0x2>
     360:	50 91 78 02 	lds	r21, 0x0278	; 0x800278 <dutycycle+0x3>
     364:	0e 94 ed 19 	call	0x33da	; 0x33da <__mulsf3>
     368:	20 e0       	ldi	r18, 0x00	; 0
     36a:	30 e0       	ldi	r19, 0x00	; 0
     36c:	48 ec       	ldi	r20, 0xC8	; 200
     36e:	52 e4       	ldi	r21, 0x42	; 66
     370:	0e 94 95 18 	call	0x312a	; 0x312a <__divsf3>
     374:	0e 94 07 19 	call	0x320e	; 0x320e <__fixunssfsi>
     378:	70 93 74 02 	sts	0x0274, r23	; 0x800274 <pulsewidth+0x1>
     37c:	60 93 73 02 	sts	0x0273, r22	; 0x800273 <pulsewidth>
	OCR1A = clockperiod - 1;
     380:	81 e0       	ldi	r24, 0x01	; 1
     382:	c8 1a       	sub	r12, r24
     384:	d1 08       	sbc	r13, r1
     386:	d0 92 89 00 	sts	0x0089, r13	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
     38a:	c0 92 88 00 	sts	0x0088, r12	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
	OCR1B = pulsewidth - 1;
     38e:	80 91 73 02 	lds	r24, 0x0273	; 0x800273 <pulsewidth>
     392:	90 91 74 02 	lds	r25, 0x0274	; 0x800274 <pulsewidth+0x1>
     396:	01 97       	sbiw	r24, 0x01	; 1
     398:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
     39c:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
	tone_duration = loaded_track_duration[count];
     3a0:	e0 91 68 02 	lds	r30, 0x0268	; 0x800268 <count>
     3a4:	f0 e0       	ldi	r31, 0x00	; 0
     3a6:	ee 0f       	add	r30, r30
     3a8:	ff 1f       	adc	r31, r31
     3aa:	80 91 63 02 	lds	r24, 0x0263	; 0x800263 <loaded_track_duration>
     3ae:	90 91 64 02 	lds	r25, 0x0264	; 0x800264 <loaded_track_duration+0x1>
     3b2:	e8 0f       	add	r30, r24
     3b4:	f9 1f       	adc	r31, r25
     3b6:	80 81       	ld	r24, Z
     3b8:	91 81       	ldd	r25, Z+1	; 0x01
     3ba:	90 93 61 02 	sts	0x0261, r25	; 0x800261 <__data_end+0x1>
     3be:	80 93 60 02 	sts	0x0260, r24	; 0x800260 <__data_end>
	tone_start_time = get_current_time();
     3c2:	0e 94 51 18 	call	0x30a2	; 0x30a2 <get_current_time>
     3c6:	60 93 6f 02 	sts	0x026F, r22	; 0x80026f <tone_start_time>
     3ca:	70 93 70 02 	sts	0x0270, r23	; 0x800270 <tone_start_time+0x1>
     3ce:	80 93 71 02 	sts	0x0271, r24	; 0x800271 <tone_start_time+0x2>
     3d2:	90 93 72 02 	sts	0x0272, r25	; 0x800272 <tone_start_time+0x3>
	if((loaded_track[count] != NO_NOTE) && !(PIND & 0x08)) {
     3d6:	e0 91 68 02 	lds	r30, 0x0268	; 0x800268 <count>
     3da:	f0 e0       	ldi	r31, 0x00	; 0
     3dc:	ee 0f       	add	r30, r30
     3de:	ff 1f       	adc	r31, r31
     3e0:	80 91 65 02 	lds	r24, 0x0265	; 0x800265 <loaded_track>
     3e4:	90 91 66 02 	lds	r25, 0x0266	; 0x800266 <loaded_track+0x1>
     3e8:	e8 0f       	add	r30, r24
     3ea:	f9 1f       	adc	r31, r25
     3ec:	80 81       	ld	r24, Z
     3ee:	91 81       	ldd	r25, Z+1	; 0x01
     3f0:	89 2b       	or	r24, r25
     3f2:	11 f0       	breq	.+4      	; 0x3f8 <track_helper+0xea>
     3f4:	4b 9b       	sbis	0x09, 3	; 9
		DDRD |= (1<<DDRD4);
     3f6:	54 9a       	sbi	0x0a, 4	; 10
	}
	count++;
     3f8:	80 91 68 02 	lds	r24, 0x0268	; 0x800268 <count>
     3fc:	8f 5f       	subi	r24, 0xFF	; 255
     3fe:	80 93 68 02 	sts	0x0268, r24	; 0x800268 <count>
}
     402:	ff 90       	pop	r15
     404:	ef 90       	pop	r14
     406:	df 90       	pop	r13
     408:	cf 90       	pop	r12
     40a:	08 95       	ret

0000040c <init_audio>:
static void track_helper(void);

/////////////////////////////// Public Functions ///////////////////////////////

// Initialses the audio hardware for use
void init_audio(void) {
     40c:	cf 92       	push	r12
     40e:	df 92       	push	r13
     410:	ef 92       	push	r14
     412:	ff 92       	push	r15
freq = 0;
dutycycle = 20;
     414:	80 e0       	ldi	r24, 0x00	; 0
     416:	90 e0       	ldi	r25, 0x00	; 0
     418:	a0 ea       	ldi	r26, 0xA0	; 160
     41a:	b1 e4       	ldi	r27, 0x41	; 65
     41c:	80 93 75 02 	sts	0x0275, r24	; 0x800275 <dutycycle>
     420:	90 93 76 02 	sts	0x0276, r25	; 0x800276 <dutycycle+0x1>
     424:	a0 93 77 02 	sts	0x0277, r26	; 0x800277 <dutycycle+0x2>
     428:	b0 93 78 02 	sts	0x0278, r27	; 0x800278 <dutycycle+0x3>
/////////////////////////////// Private (Helper) Functions /////////////////////

// For a given frequency (Hz), return the clock period (in terms of the
// number of clock cycles of a 1MHz clock)
static uint16_t freq_to_clock_period(uint16_t freq) {
	return (1000000UL / freq);
     42c:	60 e4       	ldi	r22, 0x40	; 64
     42e:	72 e4       	ldi	r23, 0x42	; 66
     430:	8f e0       	ldi	r24, 0x0F	; 15
     432:	90 e0       	ldi	r25, 0x00	; 0
     434:	20 e0       	ldi	r18, 0x00	; 0
     436:	30 e0       	ldi	r19, 0x00	; 0
     438:	a9 01       	movw	r20, r18
     43a:	0e 94 5a 1a 	call	0x34b4	; 0x34b4 <__udivmodsi4>
     43e:	69 01       	movw	r12, r18
     440:	7a 01       	movw	r14, r20
// Initialses the audio hardware for use
void init_audio(void) {
freq = 0;
dutycycle = 20;
clockperiod = freq_to_clock_period(freq);
pulsewidth = duty_cycle_to_pulse_width(dutycycle, clockperiod);
     442:	b9 01       	movw	r22, r18
     444:	80 e0       	ldi	r24, 0x00	; 0
     446:	90 e0       	ldi	r25, 0x00	; 0
     448:	0e 94 36 19 	call	0x326c	; 0x326c <__floatunsisf>
     44c:	20 e0       	ldi	r18, 0x00	; 0
     44e:	30 e0       	ldi	r19, 0x00	; 0
     450:	40 ea       	ldi	r20, 0xA0	; 160
     452:	51 e4       	ldi	r21, 0x41	; 65
     454:	0e 94 ed 19 	call	0x33da	; 0x33da <__mulsf3>
     458:	20 e0       	ldi	r18, 0x00	; 0
     45a:	30 e0       	ldi	r19, 0x00	; 0
     45c:	48 ec       	ldi	r20, 0xC8	; 200
     45e:	52 e4       	ldi	r21, 0x42	; 66
     460:	0e 94 95 18 	call	0x312a	; 0x312a <__divsf3>
     464:	0e 94 07 19 	call	0x320e	; 0x320e <__fixunssfsi>
     468:	70 93 74 02 	sts	0x0274, r23	; 0x800274 <pulsewidth+0x1>
     46c:	60 93 73 02 	sts	0x0273, r22	; 0x800273 <pulsewidth>

// Set the maximum count value for timer/counter 1 to be one less than the clockperiod
OCR1A = clockperiod - 1;
     470:	81 e0       	ldi	r24, 0x01	; 1
     472:	c8 1a       	sub	r12, r24
     474:	d1 08       	sbc	r13, r1
     476:	d0 92 89 00 	sts	0x0089, r13	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
     47a:	c0 92 88 00 	sts	0x0088, r12	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>

// Set the count compare value based on the pulse width. The value will be 1 less
// than the pulse width - unless the pulse width is 0.
OCR1B = pulsewidth - 1;
     47e:	80 91 73 02 	lds	r24, 0x0273	; 0x800273 <pulsewidth>
     482:	90 91 74 02 	lds	r25, 0x0274	; 0x800274 <pulsewidth+0x1>
     486:	01 97       	sbiw	r24, 0x01	; 1
     488:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
     48c:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>

// Turns audio output off
DDRD &= DDRD4_OFF;
     490:	54 98       	cbi	0x0a, 4	; 10

// Set up timer/counter 1 for Fast PWM, counting from 0 to the value in OCR1A
// before reseting to 0. Count at 1MHz (CLK/8).
// Configure output OC1B to be clear on compare match and set on timer/counter
// overflow (non-inverting mode).
TCCR1A = (1 << COM1B1) | (0 <<COM1B0) | (1 <<WGM11) | (1 << WGM10);
     492:	83 e2       	ldi	r24, 0x23	; 35
     494:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
TCCR1B = (1 << WGM13) | (1 << WGM12) | (0 << CS12) | (1 << CS11) | (0 << CS10);
     498:	8a e1       	ldi	r24, 0x1A	; 26
     49a:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
}
     49e:	ff 90       	pop	r15
     4a0:	ef 90       	pop	r14
     4a2:	df 90       	pop	r13
     4a4:	cf 90       	pop	r12
     4a6:	08 95       	ret

000004a8 <play_audio>:

// Loads and plays audio tracks
void play_audio(int track) {
     4a8:	8f 92       	push	r8
     4aa:	9f 92       	push	r9
     4ac:	af 92       	push	r10
     4ae:	bf 92       	push	r11
     4b0:	cf 92       	push	r12
     4b2:	df 92       	push	r13
     4b4:	ef 92       	push	r14
     4b6:	ff 92       	push	r15
     4b8:	0f 93       	push	r16
     4ba:	1f 93       	push	r17
	// Turns the volume down if switch S6 is set to 1
	if(PIND & 0x04) {
     4bc:	4a 9b       	sbis	0x09, 2	; 9
     4be:	0d c0       	rjmp	.+26     	; 0x4da <play_audio+0x32>
		dutycycle = 0.2;
     4c0:	4d ec       	ldi	r20, 0xCD	; 205
     4c2:	5c ec       	ldi	r21, 0xCC	; 204
     4c4:	6c e4       	ldi	r22, 0x4C	; 76
     4c6:	7e e3       	ldi	r23, 0x3E	; 62
     4c8:	40 93 75 02 	sts	0x0275, r20	; 0x800275 <dutycycle>
     4cc:	50 93 76 02 	sts	0x0276, r21	; 0x800276 <dutycycle+0x1>
     4d0:	60 93 77 02 	sts	0x0277, r22	; 0x800277 <dutycycle+0x2>
     4d4:	70 93 78 02 	sts	0x0278, r23	; 0x800278 <dutycycle+0x3>
     4d8:	0c c0       	rjmp	.+24     	; 0x4f2 <play_audio+0x4a>
	} else {
		dutycycle = 20;
     4da:	40 e0       	ldi	r20, 0x00	; 0
     4dc:	50 e0       	ldi	r21, 0x00	; 0
     4de:	60 ea       	ldi	r22, 0xA0	; 160
     4e0:	71 e4       	ldi	r23, 0x41	; 65
     4e2:	40 93 75 02 	sts	0x0275, r20	; 0x800275 <dutycycle>
     4e6:	50 93 76 02 	sts	0x0276, r21	; 0x800276 <dutycycle+0x1>
     4ea:	60 93 77 02 	sts	0x0277, r22	; 0x800277 <dutycycle+0x2>
     4ee:	70 93 78 02 	sts	0x0278, r23	; 0x800278 <dutycycle+0x3>
	}
	// If a track is loaded it will continue to play
	if((track == NO_TRACK) && (is_track_loaded == TRUE)) {
     4f2:	8f 3f       	cpi	r24, 0xFF	; 255
     4f4:	2f ef       	ldi	r18, 0xFF	; 255
     4f6:	92 07       	cpc	r25, r18
     4f8:	09 f0       	breq	.+2      	; 0x4fc <play_audio+0x54>
     4fa:	76 c0       	rjmp	.+236    	; 0x5e8 <play_audio+0x140>
     4fc:	80 91 67 02 	lds	r24, 0x0267	; 0x800267 <is_track_loaded>
     500:	81 30       	cpi	r24, 0x01	; 1
     502:	09 f0       	breq	.+2      	; 0x506 <play_audio+0x5e>
     504:	3d c1       	rjmp	.+634    	; 0x780 <play_audio+0x2d8>
		// if in a rest period during a track and the rest time has expired 
		// turn rest off
		if(rest && (count < array_size) &&
     506:	80 91 6a 02 	lds	r24, 0x026A	; 0x80026a <rest>
     50a:	88 23       	and	r24, r24
     50c:	09 f1       	breq	.+66     	; 0x550 <play_audio+0xa8>
     50e:	90 91 68 02 	lds	r25, 0x0268	; 0x800268 <count>
     512:	80 91 62 02 	lds	r24, 0x0262	; 0x800262 <array_size>
     516:	98 17       	cp	r25, r24
     518:	08 f0       	brcs	.+2      	; 0x51c <play_audio+0x74>
     51a:	5a c0       	rjmp	.+180    	; 0x5d0 <play_audio+0x128>
		(get_current_time() >= (rest_start_time + REST_TIME))) {
     51c:	0e 94 51 18 	call	0x30a2	; 0x30a2 <get_current_time>
	}
	// If a track is loaded it will continue to play
	if((track == NO_TRACK) && (is_track_loaded == TRUE)) {
		// if in a rest period during a track and the rest time has expired 
		// turn rest off
		if(rest && (count < array_size) &&
     520:	00 91 6b 02 	lds	r16, 0x026B	; 0x80026b <rest_start_time>
     524:	10 91 6c 02 	lds	r17, 0x026C	; 0x80026c <rest_start_time+0x1>
     528:	20 91 6d 02 	lds	r18, 0x026D	; 0x80026d <rest_start_time+0x2>
     52c:	30 91 6e 02 	lds	r19, 0x026E	; 0x80026e <rest_start_time+0x3>
     530:	0e 5c       	subi	r16, 0xCE	; 206
     532:	1f 4f       	sbci	r17, 0xFF	; 255
     534:	2f 4f       	sbci	r18, 0xFF	; 255
     536:	3f 4f       	sbci	r19, 0xFF	; 255
     538:	60 17       	cp	r22, r16
     53a:	71 07       	cpc	r23, r17
     53c:	82 07       	cpc	r24, r18
     53e:	93 07       	cpc	r25, r19
     540:	18 f0       	brcs	.+6      	; 0x548 <play_audio+0xa0>
		(get_current_time() >= (rest_start_time + REST_TIME))) {
			rest = FALSE;
     542:	10 92 6a 02 	sts	0x026A, r1	; 0x80026a <rest>
     546:	1c c1       	rjmp	.+568    	; 0x780 <play_audio+0x2d8>
		}
		// If a tone is playing and the tone duration has been reached turn the
		// tone off and enter the rest period
		else if(!rest && tone &&
     548:	80 91 6a 02 	lds	r24, 0x026A	; 0x80026a <rest>
     54c:	81 11       	cpse	r24, r1
     54e:	40 c0       	rjmp	.+128    	; 0x5d0 <play_audio+0x128>
     550:	80 91 69 02 	lds	r24, 0x0269	; 0x800269 <tone>
     554:	88 23       	and	r24, r24
     556:	91 f1       	breq	.+100    	; 0x5bc <play_audio+0x114>
		(get_current_time() >= (tone_start_time + tone_duration))) {
     558:	0e 94 51 18 	call	0x30a2	; 0x30a2 <get_current_time>
		(get_current_time() >= (rest_start_time + REST_TIME))) {
			rest = FALSE;
		}
		// If a tone is playing and the tone duration has been reached turn the
		// tone off and enter the rest period
		else if(!rest && tone &&
     55c:	20 91 60 02 	lds	r18, 0x0260	; 0x800260 <__data_end>
     560:	30 91 61 02 	lds	r19, 0x0261	; 0x800261 <__data_end+0x1>
     564:	c0 90 6f 02 	lds	r12, 0x026F	; 0x80026f <tone_start_time>
     568:	d0 90 70 02 	lds	r13, 0x0270	; 0x800270 <tone_start_time+0x1>
     56c:	e0 90 71 02 	lds	r14, 0x0271	; 0x800271 <tone_start_time+0x2>
     570:	f0 90 72 02 	lds	r15, 0x0272	; 0x800272 <tone_start_time+0x3>
     574:	46 01       	movw	r8, r12
     576:	57 01       	movw	r10, r14
     578:	82 0e       	add	r8, r18
     57a:	93 1e       	adc	r9, r19
     57c:	a1 1c       	adc	r10, r1
     57e:	b1 1c       	adc	r11, r1
     580:	68 15       	cp	r22, r8
     582:	79 05       	cpc	r23, r9
     584:	8a 05       	cpc	r24, r10
     586:	9b 05       	cpc	r25, r11
     588:	88 f0       	brcs	.+34     	; 0x5ac <play_audio+0x104>
		(get_current_time() >= (tone_start_time + tone_duration))) {
			// Turn audio output off
			DDRD &= DDRD4_OFF;			
     58a:	54 98       	cbi	0x0a, 4	; 10
			rest_start_time = get_current_time();
     58c:	0e 94 51 18 	call	0x30a2	; 0x30a2 <get_current_time>
     590:	60 93 6b 02 	sts	0x026B, r22	; 0x80026b <rest_start_time>
     594:	70 93 6c 02 	sts	0x026C, r23	; 0x80026c <rest_start_time+0x1>
     598:	80 93 6d 02 	sts	0x026D, r24	; 0x80026d <rest_start_time+0x2>
     59c:	90 93 6e 02 	sts	0x026E, r25	; 0x80026e <rest_start_time+0x3>
			rest = TRUE;
     5a0:	81 e0       	ldi	r24, 0x01	; 1
     5a2:	80 93 6a 02 	sts	0x026A, r24	; 0x80026a <rest>
			tone = FALSE;
     5a6:	10 92 69 02 	sts	0x0269, r1	; 0x800269 <tone>
     5aa:	ea c0       	rjmp	.+468    	; 0x780 <play_audio+0x2d8>
		}
		// If the rest period has ended and there is still more track left
		// play the next tone in the track
		else if(!rest && !tone && (count < array_size))  {
     5ac:	80 91 6a 02 	lds	r24, 0x026A	; 0x80026a <rest>
     5b0:	81 11       	cpse	r24, r1
     5b2:	0e c0       	rjmp	.+28     	; 0x5d0 <play_audio+0x128>
     5b4:	80 91 69 02 	lds	r24, 0x0269	; 0x800269 <tone>
     5b8:	81 11       	cpse	r24, r1
     5ba:	e2 c0       	rjmp	.+452    	; 0x780 <play_audio+0x2d8>
     5bc:	90 91 68 02 	lds	r25, 0x0268	; 0x800268 <count>
     5c0:	80 91 62 02 	lds	r24, 0x0262	; 0x800262 <array_size>
     5c4:	98 17       	cp	r25, r24
     5c6:	08 f0       	brcs	.+2      	; 0x5ca <play_audio+0x122>
     5c8:	db c0       	rjmp	.+438    	; 0x780 <play_audio+0x2d8>
			track_helper();
     5ca:	0e 94 87 01 	call	0x30e	; 0x30e <track_helper>
     5ce:	d8 c0       	rjmp	.+432    	; 0x780 <play_audio+0x2d8>
		}
		// If the rest period has ended and there is no more track left
		// unload the track from use
		else if(rest && (count >= array_size)) {
     5d0:	90 91 68 02 	lds	r25, 0x0268	; 0x800268 <count>
     5d4:	80 91 62 02 	lds	r24, 0x0262	; 0x800262 <array_size>
     5d8:	98 17       	cp	r25, r24
     5da:	08 f4       	brcc	.+2      	; 0x5de <play_audio+0x136>
     5dc:	d1 c0       	rjmp	.+418    	; 0x780 <play_audio+0x2d8>
			rest = FALSE;
     5de:	10 92 6a 02 	sts	0x026A, r1	; 0x80026a <rest>
			is_track_loaded = FALSE;
     5e2:	10 92 67 02 	sts	0x0267, r1	; 0x800267 <is_track_loaded>
     5e6:	cc c0       	rjmp	.+408    	; 0x780 <play_audio+0x2d8>
		}
	}
	// load frog jump track
	else if(track == FROG_JUMP) {
     5e8:	81 30       	cpi	r24, 0x01	; 1
     5ea:	91 05       	cpc	r25, r1
     5ec:	b9 f4       	brne	.+46     	; 0x61c <play_audio+0x174>
		is_track_loaded = TRUE;
     5ee:	81 e0       	ldi	r24, 0x01	; 1
     5f0:	80 93 67 02 	sts	0x0267, r24	; 0x800267 <is_track_loaded>
		count = 0;
     5f4:	10 92 68 02 	sts	0x0268, r1	; 0x800268 <count>
		loaded_track = track_frog_jump_tone;
     5f8:	84 e6       	ldi	r24, 0x64	; 100
     5fa:	91 e0       	ldi	r25, 0x01	; 1
     5fc:	90 93 66 02 	sts	0x0266, r25	; 0x800266 <loaded_track+0x1>
     600:	80 93 65 02 	sts	0x0265, r24	; 0x800265 <loaded_track>
		loaded_track_duration = track_frog_jump_duration;
     604:	80 e6       	ldi	r24, 0x60	; 96
     606:	91 e0       	ldi	r25, 0x01	; 1
     608:	90 93 64 02 	sts	0x0264, r25	; 0x800264 <loaded_track_duration+0x1>
     60c:	80 93 63 02 	sts	0x0263, r24	; 0x800263 <loaded_track_duration>
		array_size = TRACK_FROG_JUMP_SIZE;
     610:	82 e0       	ldi	r24, 0x02	; 2
     612:	80 93 62 02 	sts	0x0262, r24	; 0x800262 <array_size>
		track_helper();
     616:	0e 94 87 01 	call	0x30e	; 0x30e <track_helper>
     61a:	b2 c0       	rjmp	.+356    	; 0x780 <play_audio+0x2d8>
	}
	// load frog died track
	else if(track == FROG_DIED) {
     61c:	82 30       	cpi	r24, 0x02	; 2
     61e:	91 05       	cpc	r25, r1
     620:	21 f5       	brne	.+72     	; 0x66a <play_audio+0x1c2>
		is_track_loaded = TRUE;
     622:	81 e0       	ldi	r24, 0x01	; 1
     624:	80 93 67 02 	sts	0x0267, r24	; 0x800267 <is_track_loaded>
		count = 0;
     628:	10 92 68 02 	sts	0x0268, r1	; 0x800268 <count>
		loaded_track = track_frog_died_tone;
     62c:	86 e5       	ldi	r24, 0x56	; 86
     62e:	91 e0       	ldi	r25, 0x01	; 1
     630:	90 93 66 02 	sts	0x0266, r25	; 0x800266 <loaded_track+0x1>
     634:	80 93 65 02 	sts	0x0265, r24	; 0x800265 <loaded_track>
		loaded_track_duration = track_frog_died_duration;
     638:	8c e4       	ldi	r24, 0x4C	; 76
     63a:	91 e0       	ldi	r25, 0x01	; 1
     63c:	90 93 64 02 	sts	0x0264, r25	; 0x800264 <loaded_track_duration+0x1>
     640:	80 93 63 02 	sts	0x0263, r24	; 0x800263 <loaded_track_duration>
		array_size = TRACK_FROG_DIED_SIZE;
     644:	85 e0       	ldi	r24, 0x05	; 5
     646:	80 93 62 02 	sts	0x0262, r24	; 0x800262 <array_size>
		track_helper();
     64a:	0e 94 87 01 	call	0x30e	; 0x30e <track_helper>
		// Delay game until finished used instead of _delay_ms()
		while(is_track_loaded == TRUE) {			
     64e:	80 91 67 02 	lds	r24, 0x0267	; 0x800267 <is_track_loaded>
     652:	81 30       	cpi	r24, 0x01	; 1
     654:	09 f0       	breq	.+2      	; 0x658 <play_audio+0x1b0>
     656:	94 c0       	rjmp	.+296    	; 0x780 <play_audio+0x2d8>
			play_audio(NO_TRACK);
     658:	8f ef       	ldi	r24, 0xFF	; 255
     65a:	9f ef       	ldi	r25, 0xFF	; 255
     65c:	0e 94 54 02 	call	0x4a8	; 0x4a8 <play_audio>
		loaded_track = track_frog_died_tone;
		loaded_track_duration = track_frog_died_duration;
		array_size = TRACK_FROG_DIED_SIZE;
		track_helper();
		// Delay game until finished used instead of _delay_ms()
		while(is_track_loaded == TRUE) {			
     660:	80 91 67 02 	lds	r24, 0x0267	; 0x800267 <is_track_loaded>
     664:	81 30       	cpi	r24, 0x01	; 1
     666:	c1 f3       	breq	.-16     	; 0x658 <play_audio+0x1b0>
     668:	8b c0       	rjmp	.+278    	; 0x780 <play_audio+0x2d8>
			play_audio(NO_TRACK);
		}
	}
	// load frog made it track
	else if(track == FROG_MADE_IT) {
     66a:	83 30       	cpi	r24, 0x03	; 3
     66c:	91 05       	cpc	r25, r1
     66e:	21 f5       	brne	.+72     	; 0x6b8 <play_audio+0x210>
		is_track_loaded = TRUE;
     670:	81 e0       	ldi	r24, 0x01	; 1
     672:	80 93 67 02 	sts	0x0267, r24	; 0x800267 <is_track_loaded>
		count = 0;
     676:	10 92 68 02 	sts	0x0268, r1	; 0x800268 <count>
		loaded_track = track_made_it_tone;
     67a:	82 e4       	ldi	r24, 0x42	; 66
     67c:	91 e0       	ldi	r25, 0x01	; 1
     67e:	90 93 66 02 	sts	0x0266, r25	; 0x800266 <loaded_track+0x1>
     682:	80 93 65 02 	sts	0x0265, r24	; 0x800265 <loaded_track>
		loaded_track_duration = track_made_it_duration;
     686:	88 e3       	ldi	r24, 0x38	; 56
     688:	91 e0       	ldi	r25, 0x01	; 1
     68a:	90 93 64 02 	sts	0x0264, r25	; 0x800264 <loaded_track_duration+0x1>
     68e:	80 93 63 02 	sts	0x0263, r24	; 0x800263 <loaded_track_duration>
		array_size = TRACK_MADE_IT_SIZE;
     692:	85 e0       	ldi	r24, 0x05	; 5
     694:	80 93 62 02 	sts	0x0262, r24	; 0x800262 <array_size>
		track_helper();
     698:	0e 94 87 01 	call	0x30e	; 0x30e <track_helper>
		// Delay game until finished used instead of _delay_ms()
		while(is_track_loaded == TRUE) {
     69c:	80 91 67 02 	lds	r24, 0x0267	; 0x800267 <is_track_loaded>
     6a0:	81 30       	cpi	r24, 0x01	; 1
     6a2:	09 f0       	breq	.+2      	; 0x6a6 <play_audio+0x1fe>
     6a4:	6d c0       	rjmp	.+218    	; 0x780 <play_audio+0x2d8>
			play_audio(NO_TRACK);
     6a6:	8f ef       	ldi	r24, 0xFF	; 255
     6a8:	9f ef       	ldi	r25, 0xFF	; 255
     6aa:	0e 94 54 02 	call	0x4a8	; 0x4a8 <play_audio>
		loaded_track = track_made_it_tone;
		loaded_track_duration = track_made_it_duration;
		array_size = TRACK_MADE_IT_SIZE;
		track_helper();
		// Delay game until finished used instead of _delay_ms()
		while(is_track_loaded == TRUE) {
     6ae:	80 91 67 02 	lds	r24, 0x0267	; 0x800267 <is_track_loaded>
     6b2:	81 30       	cpi	r24, 0x01	; 1
     6b4:	c1 f3       	breq	.-16     	; 0x6a6 <play_audio+0x1fe>
     6b6:	64 c0       	rjmp	.+200    	; 0x780 <play_audio+0x2d8>
			play_audio(NO_TRACK);
		}
	}
	// load level up track
	else if(track == FROG_LEVELUP) {
     6b8:	84 30       	cpi	r24, 0x04	; 4
     6ba:	91 05       	cpc	r25, r1
     6bc:	b9 f4       	brne	.+46     	; 0x6ec <play_audio+0x244>
		is_track_loaded = TRUE;
     6be:	81 e0       	ldi	r24, 0x01	; 1
     6c0:	80 93 67 02 	sts	0x0267, r24	; 0x800267 <is_track_loaded>
		count = 0;
     6c4:	10 92 68 02 	sts	0x0268, r1	; 0x800268 <count>
		loaded_track = track_levelup_tone;
     6c8:	8e e2       	ldi	r24, 0x2E	; 46
     6ca:	91 e0       	ldi	r25, 0x01	; 1
     6cc:	90 93 66 02 	sts	0x0266, r25	; 0x800266 <loaded_track+0x1>
     6d0:	80 93 65 02 	sts	0x0265, r24	; 0x800265 <loaded_track>
		loaded_track_duration = track_levelup_duration;
     6d4:	84 e2       	ldi	r24, 0x24	; 36
     6d6:	91 e0       	ldi	r25, 0x01	; 1
     6d8:	90 93 64 02 	sts	0x0264, r25	; 0x800264 <loaded_track_duration+0x1>
     6dc:	80 93 63 02 	sts	0x0263, r24	; 0x800263 <loaded_track_duration>
		array_size = TRACK_LEVELUP_SIZE;
     6e0:	85 e0       	ldi	r24, 0x05	; 5
     6e2:	80 93 62 02 	sts	0x0262, r24	; 0x800262 <array_size>
		track_helper();
     6e6:	0e 94 87 01 	call	0x30e	; 0x30e <track_helper>
     6ea:	4a c0       	rjmp	.+148    	; 0x780 <play_audio+0x2d8>
	}
	// load winner track
	else if(track == WINNER) {
     6ec:	85 30       	cpi	r24, 0x05	; 5
     6ee:	91 05       	cpc	r25, r1
     6f0:	19 f5       	brne	.+70     	; 0x738 <play_audio+0x290>
		is_track_loaded = TRUE;
     6f2:	81 e0       	ldi	r24, 0x01	; 1
     6f4:	80 93 67 02 	sts	0x0267, r24	; 0x800267 <is_track_loaded>
		count = 0;
     6f8:	10 92 68 02 	sts	0x0268, r1	; 0x800268 <count>
		loaded_track = track_winner_tone;
     6fc:	88 e1       	ldi	r24, 0x18	; 24
     6fe:	91 e0       	ldi	r25, 0x01	; 1
     700:	90 93 66 02 	sts	0x0266, r25	; 0x800266 <loaded_track+0x1>
     704:	80 93 65 02 	sts	0x0265, r24	; 0x800265 <loaded_track>
		loaded_track_duration = track_winner_duration;
     708:	8c e0       	ldi	r24, 0x0C	; 12
     70a:	91 e0       	ldi	r25, 0x01	; 1
     70c:	90 93 64 02 	sts	0x0264, r25	; 0x800264 <loaded_track_duration+0x1>
     710:	80 93 63 02 	sts	0x0263, r24	; 0x800263 <loaded_track_duration>
		array_size = TRACK_WINNER_SIZE;
     714:	86 e0       	ldi	r24, 0x06	; 6
     716:	80 93 62 02 	sts	0x0262, r24	; 0x800262 <array_size>
		track_helper();
     71a:	0e 94 87 01 	call	0x30e	; 0x30e <track_helper>
		// Delay game until finished used instead of _delay_ms()
		while(is_track_loaded == TRUE) {
     71e:	80 91 67 02 	lds	r24, 0x0267	; 0x800267 <is_track_loaded>
     722:	81 30       	cpi	r24, 0x01	; 1
     724:	69 f5       	brne	.+90     	; 0x780 <play_audio+0x2d8>
			play_audio(NO_TRACK);
     726:	8f ef       	ldi	r24, 0xFF	; 255
     728:	9f ef       	ldi	r25, 0xFF	; 255
     72a:	0e 94 54 02 	call	0x4a8	; 0x4a8 <play_audio>
		loaded_track = track_winner_tone;
		loaded_track_duration = track_winner_duration;
		array_size = TRACK_WINNER_SIZE;
		track_helper();
		// Delay game until finished used instead of _delay_ms()
		while(is_track_loaded == TRUE) {
     72e:	80 91 67 02 	lds	r24, 0x0267	; 0x800267 <is_track_loaded>
     732:	81 30       	cpi	r24, 0x01	; 1
     734:	c1 f3       	breq	.-16     	; 0x726 <play_audio+0x27e>
     736:	24 c0       	rjmp	.+72     	; 0x780 <play_audio+0x2d8>
			play_audio(NO_TRACK);
		}
	}
	// load game over track
	else if(track == GAME_OVER) {
     738:	06 97       	sbiw	r24, 0x06	; 6
     73a:	11 f5       	brne	.+68     	; 0x780 <play_audio+0x2d8>
		is_track_loaded = TRUE;
     73c:	81 e0       	ldi	r24, 0x01	; 1
     73e:	80 93 67 02 	sts	0x0267, r24	; 0x800267 <is_track_loaded>
		count = 0;
     742:	10 92 68 02 	sts	0x0268, r1	; 0x800268 <count>
		loaded_track = track_game_over_tone;
     746:	86 e0       	ldi	r24, 0x06	; 6
     748:	91 e0       	ldi	r25, 0x01	; 1
     74a:	90 93 66 02 	sts	0x0266, r25	; 0x800266 <loaded_track+0x1>
     74e:	80 93 65 02 	sts	0x0265, r24	; 0x800265 <loaded_track>
		loaded_track_duration = track_game_over_duration;
     752:	80 e0       	ldi	r24, 0x00	; 0
     754:	91 e0       	ldi	r25, 0x01	; 1
     756:	90 93 64 02 	sts	0x0264, r25	; 0x800264 <loaded_track_duration+0x1>
     75a:	80 93 63 02 	sts	0x0263, r24	; 0x800263 <loaded_track_duration>
		array_size = TRACK_GAME_OVER_SIZE;
     75e:	83 e0       	ldi	r24, 0x03	; 3
     760:	80 93 62 02 	sts	0x0262, r24	; 0x800262 <array_size>
		track_helper();
     764:	0e 94 87 01 	call	0x30e	; 0x30e <track_helper>
		// Delay game until finished used instead of _delay_ms()
		while(is_track_loaded == TRUE) {
     768:	80 91 67 02 	lds	r24, 0x0267	; 0x800267 <is_track_loaded>
     76c:	81 30       	cpi	r24, 0x01	; 1
     76e:	41 f4       	brne	.+16     	; 0x780 <play_audio+0x2d8>
			play_audio(NO_TRACK);
     770:	8f ef       	ldi	r24, 0xFF	; 255
     772:	9f ef       	ldi	r25, 0xFF	; 255
     774:	0e 94 54 02 	call	0x4a8	; 0x4a8 <play_audio>
		loaded_track = track_game_over_tone;
		loaded_track_duration = track_game_over_duration;
		array_size = TRACK_GAME_OVER_SIZE;
		track_helper();
		// Delay game until finished used instead of _delay_ms()
		while(is_track_loaded == TRUE) {
     778:	80 91 67 02 	lds	r24, 0x0267	; 0x800267 <is_track_loaded>
     77c:	81 30       	cpi	r24, 0x01	; 1
     77e:	c1 f3       	breq	.-16     	; 0x770 <play_audio+0x2c8>
			play_audio(NO_TRACK);
		}
	}
}
     780:	1f 91       	pop	r17
     782:	0f 91       	pop	r16
     784:	ff 90       	pop	r15
     786:	ef 90       	pop	r14
     788:	df 90       	pop	r13
     78a:	cf 90       	pop	r12
     78c:	bf 90       	pop	r11
     78e:	af 90       	pop	r10
     790:	9f 90       	pop	r9
     792:	8f 90       	pop	r8
     794:	08 95       	ret

00000796 <init_button_interrupts>:
// using a pin change interrupt. These pins correspond to pin
// change interrupts PCINT8 to PCINT11 which are covered by
// Pin change interrupt 1.
void init_button_interrupts(void) {
	// Enable the interrupt (see datasheet page 91)
	PCICR |= (1<<PCIE1);
     796:	e8 e6       	ldi	r30, 0x68	; 104
     798:	f0 e0       	ldi	r31, 0x00	; 0
     79a:	80 81       	ld	r24, Z
     79c:	82 60       	ori	r24, 0x02	; 2
     79e:	80 83       	st	Z, r24

	// Make sure the interrupt flag is cleared (by writing a
	// 1 to it) (see datasheet page 92)
	PCIFR |= (1<<PCIF1);
     7a0:	d9 9a       	sbi	0x1b, 1	; 27

	// Choose which pins we're interested in by setting
	// the relevant bits in the mask register (see datasheet page 94)
	PCMSK1 |= (1<<PCINT8)|(1<<PCINT9)|(1<<PCINT10)|(1<<PCINT11);
     7a2:	ec e6       	ldi	r30, 0x6C	; 108
     7a4:	f0 e0       	ldi	r31, 0x00	; 0
     7a6:	80 81       	ld	r24, Z
     7a8:	8f 60       	ori	r24, 0x0F	; 15
     7aa:	80 83       	st	Z, r24

	// Empty the button push queue
	queue_length = 0;
     7ac:	10 92 79 02 	sts	0x0279, r1	; 0x800279 <queue_length>
     7b0:	08 95       	ret

000007b2 <clear_button_queue>:
}

// clears all buttons that are queued
void clear_button_queue(void) {
	for(uint8_t i = 0; i < BUTTON_QUEUE_SIZE; i++) {
		button_queue[i] = NO_BUTTON_PUSHED;
     7b2:	ea e7       	ldi	r30, 0x7A	; 122
     7b4:	f2 e0       	ldi	r31, 0x02	; 2
     7b6:	8f ef       	ldi	r24, 0xFF	; 255
     7b8:	80 83       	st	Z, r24
     7ba:	81 83       	std	Z+1, r24	; 0x01
     7bc:	82 83       	std	Z+2, r24	; 0x02
     7be:	83 83       	std	Z+3, r24	; 0x03
	}
	queue_length = 0;
     7c0:	10 92 79 02 	sts	0x0279, r1	; 0x800279 <queue_length>
     7c4:	08 95       	ret

000007c6 <button_pushed>:
}

int8_t button_pushed(void) {
	int8_t return_value = NO_BUTTON_PUSHED;	// Assume no button pushed
	if(queue_length > 0) {
     7c6:	80 91 79 02 	lds	r24, 0x0279	; 0x800279 <queue_length>
     7ca:	18 16       	cp	r1, r24
     7cc:	3c f5       	brge	.+78     	; 0x81c <button_pushed+0x56>
		// Remove the first element off the queue and move all the other
		// entries closer to the front of the queue. We turn off interrupts (if on)
		// before we make any changes to the queue. If interrupts were on
		// we turn them back on when done.
		return_value = button_queue[0];
     7ce:	80 91 7a 02 	lds	r24, 0x027A	; 0x80027a <button_queue>

		// Save whether interrupts were enabled and turn them off
		int8_t interrupts_were_enabled = bit_is_set(SREG, SREG_I);
     7d2:	6f b7       	in	r22, 0x3f	; 63
		cli();
     7d4:	f8 94       	cli

		for(uint8_t i = 1; i < queue_length; i++) {
     7d6:	90 91 79 02 	lds	r25, 0x0279	; 0x800279 <queue_length>
     7da:	92 30       	cpi	r25, 0x02	; 2
     7dc:	b4 f0       	brlt	.+44     	; 0x80a <button_pushed+0x44>
     7de:	21 e0       	ldi	r18, 0x01	; 1
     7e0:	30 e0       	ldi	r19, 0x00	; 0
     7e2:	91 e0       	ldi	r25, 0x01	; 1
			button_queue[i-1] = button_queue[i];
     7e4:	f9 01       	movw	r30, r18
     7e6:	e6 58       	subi	r30, 0x86	; 134
     7e8:	fd 4f       	sbci	r31, 0xFD	; 253
     7ea:	40 81       	ld	r20, Z
     7ec:	f9 01       	movw	r30, r18
     7ee:	e7 58       	subi	r30, 0x87	; 135
     7f0:	fd 4f       	sbci	r31, 0xFD	; 253
     7f2:	40 83       	st	Z, r20

		// Save whether interrupts were enabled and turn them off
		int8_t interrupts_were_enabled = bit_is_set(SREG, SREG_I);
		cli();

		for(uint8_t i = 1; i < queue_length; i++) {
     7f4:	9f 5f       	subi	r25, 0xFF	; 255
     7f6:	29 2f       	mov	r18, r25
     7f8:	30 e0       	ldi	r19, 0x00	; 0
     7fa:	40 91 79 02 	lds	r20, 0x0279	; 0x800279 <queue_length>
     7fe:	04 2e       	mov	r0, r20
     800:	00 0c       	add	r0, r0
     802:	55 0b       	sbc	r21, r21
     804:	24 17       	cp	r18, r20
     806:	35 07       	cpc	r19, r21
     808:	6c f3       	brlt	.-38     	; 0x7e4 <button_pushed+0x1e>
			button_queue[i-1] = button_queue[i];
		}
		queue_length--;
     80a:	90 91 79 02 	lds	r25, 0x0279	; 0x800279 <queue_length>
     80e:	91 50       	subi	r25, 0x01	; 1
     810:	90 93 79 02 	sts	0x0279, r25	; 0x800279 <queue_length>

		if(interrupts_were_enabled) {
     814:	66 23       	and	r22, r22
     816:	1c f4       	brge	.+6      	; 0x81e <button_pushed+0x58>
			// Turn them back on again
			sei();
     818:	78 94       	sei
     81a:	08 95       	ret
	}
	queue_length = 0;
}

int8_t button_pushed(void) {
	int8_t return_value = NO_BUTTON_PUSHED;	// Assume no button pushed
     81c:	8f ef       	ldi	r24, 0xFF	; 255
			// Turn them back on again
			sei();
		}
	}
	return return_value;
}
     81e:	08 95       	ret

00000820 <is_button_held>:

// returns the state of button_held
int8_t is_button_held(void) {
	int8_t return_value = button_held;
     820:	80 91 68 01 	lds	r24, 0x0168	; 0x800168 <button_held>
	return return_value;
}
     824:	08 95       	ret

00000826 <__vector_5>:

// Interrupt handler for a change on buttons
ISR(PCINT1_vect) {
     826:	1f 92       	push	r1
     828:	0f 92       	push	r0
     82a:	0f b6       	in	r0, 0x3f	; 63
     82c:	0f 92       	push	r0
     82e:	11 24       	eor	r1, r1
     830:	2f 93       	push	r18
     832:	3f 93       	push	r19
     834:	4f 93       	push	r20
     836:	5f 93       	push	r21
     838:	6f 93       	push	r22
     83a:	8f 93       	push	r24
     83c:	9f 93       	push	r25
     83e:	af 93       	push	r26
     840:	bf 93       	push	r27
     842:	ef 93       	push	r30
     844:	ff 93       	push	r31
	// Get the current state of the buttons. We'll compare this with
	// the last state to see what has changed.
	uint8_t button_state = PINB & 0x0F;
     846:	33 b1       	in	r19, 0x03	; 3
     848:	3f 70       	andi	r19, 0x0F	; 15
     84a:	80 e0       	ldi	r24, 0x00	; 0
     84c:	90 e0       	ldi	r25, 0x00	; 0
	// Any button pushes are added to the queue of button pushes (if
	// there is space). We ignore button releases so we're just looking
	// for a transition from 0 in the last_button_state bit to a 1 in the
	// button_state.
	for(uint8_t pin=0; pin<=3; pin++) {
		if(queue_length < BUTTON_QUEUE_SIZE &&
     84e:	a3 2f       	mov	r26, r19
     850:	b0 e0       	ldi	r27, 0x00	; 0
     852:	20 91 79 02 	lds	r18, 0x0279	; 0x800279 <queue_length>
     856:	24 30       	cpi	r18, 0x04	; 4
     858:	14 f5       	brge	.+68     	; 0x89e <__vector_5+0x78>
     85a:	ad 01       	movw	r20, r26
     85c:	08 2e       	mov	r0, r24
     85e:	02 c0       	rjmp	.+4      	; 0x864 <__vector_5+0x3e>
     860:	55 95       	asr	r21
     862:	47 95       	ror	r20
     864:	0a 94       	dec	r0
     866:	e2 f7       	brpl	.-8      	; 0x860 <__vector_5+0x3a>
     868:	40 ff       	sbrs	r20, 0
     86a:	19 c0       	rjmp	.+50     	; 0x89e <__vector_5+0x78>
				(button_state & (1<<pin)) &&
				!(last_button_state & (1<<pin))) {
     86c:	40 91 7e 02 	lds	r20, 0x027E	; 0x80027e <last_button_state>
	// there is space). We ignore button releases so we're just looking
	// for a transition from 0 in the last_button_state bit to a 1 in the
	// button_state.
	for(uint8_t pin=0; pin<=3; pin++) {
		if(queue_length < BUTTON_QUEUE_SIZE &&
				(button_state & (1<<pin)) &&
     870:	50 e0       	ldi	r21, 0x00	; 0
     872:	08 2e       	mov	r0, r24
     874:	02 c0       	rjmp	.+4      	; 0x87a <__vector_5+0x54>
     876:	55 95       	asr	r21
     878:	47 95       	ror	r20
     87a:	0a 94       	dec	r0
     87c:	e2 f7       	brpl	.-8      	; 0x876 <__vector_5+0x50>
     87e:	40 fd       	sbrc	r20, 0
     880:	0e c0       	rjmp	.+28     	; 0x89e <__vector_5+0x78>
				!(last_button_state & (1<<pin))) {
			// Add the button push to the queue (and update the
			// length of the queue
			button_queue[queue_length++] = pin;
     882:	e0 91 79 02 	lds	r30, 0x0279	; 0x800279 <queue_length>
     886:	21 e0       	ldi	r18, 0x01	; 1
     888:	2e 0f       	add	r18, r30
     88a:	20 93 79 02 	sts	0x0279, r18	; 0x800279 <queue_length>
     88e:	0e 2e       	mov	r0, r30
     890:	00 0c       	add	r0, r0
     892:	ff 0b       	sbc	r31, r31
     894:	e6 58       	subi	r30, 0x86	; 134
     896:	fd 4f       	sbci	r31, 0xFD	; 253
     898:	80 83       	st	Z, r24
			button_held = pin;
     89a:	80 93 68 01 	sts	0x0168, r24	; 0x800168 <button_held>
     89e:	01 96       	adiw	r24, 0x01	; 1
	// Iterate over all the buttons and see which ones have changed.
	// Any button pushes are added to the queue of button pushes (if
	// there is space). We ignore button releases so we're just looking
	// for a transition from 0 in the last_button_state bit to a 1 in the
	// button_state.
	for(uint8_t pin=0; pin<=3; pin++) {
     8a0:	84 30       	cpi	r24, 0x04	; 4
     8a2:	91 05       	cpc	r25, r1
     8a4:	b1 f6       	brne	.-84     	; 0x852 <__vector_5+0x2c>
			// length of the queue
			button_queue[queue_length++] = pin;
			button_held = pin;
		}
	}
	if(!(button_state & (1<<button_held)) &&
     8a6:	20 91 68 01 	lds	r18, 0x0168	; 0x800168 <button_held>
     8aa:	83 2f       	mov	r24, r19
     8ac:	90 e0       	ldi	r25, 0x00	; 0
     8ae:	02 c0       	rjmp	.+4      	; 0x8b4 <__vector_5+0x8e>
     8b0:	95 95       	asr	r25
     8b2:	87 95       	ror	r24
     8b4:	2a 95       	dec	r18
     8b6:	e2 f7       	brpl	.-8      	; 0x8b0 <__vector_5+0x8a>
     8b8:	80 fd       	sbrc	r24, 0
     8ba:	0f c0       	rjmp	.+30     	; 0x8da <__vector_5+0xb4>
     8bc:	80 91 7e 02 	lds	r24, 0x027E	; 0x80027e <last_button_state>
     8c0:	20 91 68 01 	lds	r18, 0x0168	; 0x800168 <button_held>
     8c4:	90 e0       	ldi	r25, 0x00	; 0
     8c6:	02 c0       	rjmp	.+4      	; 0x8cc <__vector_5+0xa6>
     8c8:	95 95       	asr	r25
     8ca:	87 95       	ror	r24
     8cc:	2a 95       	dec	r18
     8ce:	e2 f7       	brpl	.-8      	; 0x8c8 <__vector_5+0xa2>
     8d0:	80 ff       	sbrs	r24, 0
     8d2:	03 c0       	rjmp	.+6      	; 0x8da <__vector_5+0xb4>
			(last_button_state & (1<<button_held))) {
			button_held = NO_BUTTON_PUSHED;
     8d4:	8f ef       	ldi	r24, 0xFF	; 255
     8d6:	80 93 68 01 	sts	0x0168, r24	; 0x800168 <button_held>
	}
	// Remember this button state
	last_button_state = button_state;
     8da:	30 93 7e 02 	sts	0x027E, r19	; 0x80027e <last_button_state>
     8de:	ff 91       	pop	r31
     8e0:	ef 91       	pop	r30
     8e2:	bf 91       	pop	r27
     8e4:	af 91       	pop	r26
     8e6:	9f 91       	pop	r25
     8e8:	8f 91       	pop	r24
     8ea:	6f 91       	pop	r22
     8ec:	5f 91       	pop	r21
     8ee:	4f 91       	pop	r20
     8f0:	3f 91       	pop	r19
     8f2:	2f 91       	pop	r18
     8f4:	0f 90       	pop	r0
     8f6:	0f be       	out	0x3f, r0	; 63
     8f8:	0f 90       	pop	r0
     8fa:	1f 90       	pop	r1
     8fc:	18 95       	reti

000008fe <init_countdown>:

/////////////////////////////// Public Functions ///////////////////////////////

// initilises the countdown for use during the game
void init_countdown(void) {
	countdown = TIME_LIMIT;
     8fe:	80 ed       	ldi	r24, 0xD0	; 208
     900:	97 e0       	ldi	r25, 0x07	; 7
     902:	90 93 82 02 	sts	0x0282, r25	; 0x800282 <countdown+0x1>
     906:	80 93 81 02 	sts	0x0281, r24	; 0x800281 <countdown>
	pause = FALSE;
     90a:	10 92 80 02 	sts	0x0280, r1	; 0x800280 <pause>

	// clear timer
	TCNT2 = 0;
     90e:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7e00b2>
	// set 10ms ticks
	OCR2A = 77;
     912:	8d e4       	ldi	r24, 0x4D	; 77
     914:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
	// CTC mode
	TCCR2A = (1<<WGM21);
     918:	82 e0       	ldi	r24, 0x02	; 2
     91a:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
	TCCR2B = (1<<CS21) | (1<<CS20) | (1<<CS22);
     91e:	87 e0       	ldi	r24, 0x07	; 7
     920:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
	// sets interrupts for every 10ms
	TIMSK2 |= (1<<OCIE2A);
     924:	e0 e7       	ldi	r30, 0x70	; 112
     926:	f0 e0       	ldi	r31, 0x00	; 0
     928:	80 81       	ld	r24, Z
     92a:	82 60       	ori	r24, 0x02	; 2
     92c:	80 83       	st	Z, r24
	// clears the interrupt flag
	TIFR2 &= (1<<OCF2A);
     92e:	87 b3       	in	r24, 0x17	; 23
     930:	82 70       	andi	r24, 0x02	; 2
     932:	87 bb       	out	0x17, r24	; 23

	// Set all of Port C as an output
	DDRC = 0xFF;
     934:	8f ef       	ldi	r24, 0xFF	; 255
     936:	87 b9       	out	0x07, r24	; 7
	DDRA |= (1<<DDRA7);
     938:	0f 9a       	sbi	0x01, 7	; 1
     93a:	08 95       	ret

0000093c <reset_countdown>:
}

// resets the countdown
void reset_countdown(void) {
	countdown = TIME_LIMIT;
     93c:	80 ed       	ldi	r24, 0xD0	; 208
     93e:	97 e0       	ldi	r25, 0x07	; 7
     940:	90 93 82 02 	sts	0x0282, r25	; 0x800282 <countdown+0x1>
     944:	80 93 81 02 	sts	0x0281, r24	; 0x800281 <countdown>
	TCNT1 = 0;
     948:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
     94c:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
	pause = FALSE;
     950:	10 92 80 02 	sts	0x0280, r1	; 0x800280 <pause>
     954:	08 95       	ret

00000956 <pause_countdown>:
}

// Sets the pause flag.
// Resets the interrupt flag is unpaused.
void pause_countdown(uint8_t set) {
	pause = set;
     956:	80 93 80 02 	sts	0x0280, r24	; 0x800280 <pause>
	if(!pause) {
     95a:	81 11       	cpse	r24, r1
     95c:	02 c0       	rjmp	.+4      	; 0x962 <pause_countdown+0xc>
		TIFR1 = (1<<OCF1A);
     95e:	82 e0       	ldi	r24, 0x02	; 2
     960:	86 bb       	out	0x16, r24	; 22
     962:	08 95       	ret

00000964 <__vector_9>:

// Timer interupt set to go off every 10ms.
// Checks for a joystick move and updates the countdown.
// I used this timer for the joystick check as it fires less often then the main
// timer.
ISR(TIMER2_COMPA_vect) {
     964:	1f 92       	push	r1
     966:	0f 92       	push	r0
     968:	0f b6       	in	r0, 0x3f	; 63
     96a:	0f 92       	push	r0
     96c:	11 24       	eor	r1, r1
     96e:	2f 93       	push	r18
     970:	3f 93       	push	r19
     972:	4f 93       	push	r20
     974:	5f 93       	push	r21
     976:	6f 93       	push	r22
     978:	7f 93       	push	r23
     97a:	8f 93       	push	r24
     97c:	9f 93       	push	r25
     97e:	af 93       	push	r26
     980:	bf 93       	push	r27
     982:	ef 93       	push	r30
     984:	ff 93       	push	r31
	if(!pause) {
     986:	80 91 80 02 	lds	r24, 0x0280	; 0x800280 <pause>
     98a:	81 11       	cpse	r24, r1
     98c:	0b c0       	rjmp	.+22     	; 0x9a4 <__vector_9+0x40>
		countdown--;
     98e:	80 91 81 02 	lds	r24, 0x0281	; 0x800281 <countdown>
     992:	90 91 82 02 	lds	r25, 0x0282	; 0x800282 <countdown+0x1>
     996:	01 97       	sbiw	r24, 0x01	; 1
     998:	90 93 82 02 	sts	0x0282, r25	; 0x800282 <countdown+0x1>
     99c:	80 93 81 02 	sts	0x0281, r24	; 0x800281 <countdown>
		joystick_move();
     9a0:	0e 94 5e 0e 	call	0x1cbc	; 0x1cbc <joystick_move>
	}
	ssd_cc = 0x80 ^ ssd_cc;
     9a4:	80 91 7f 02 	lds	r24, 0x027F	; 0x80027f <ssd_cc>
     9a8:	80 58       	subi	r24, 0x80	; 128
     9aa:	80 93 7f 02 	sts	0x027F, r24	; 0x80027f <ssd_cc>
	if(ssd_cc) {
     9ae:	80 91 7f 02 	lds	r24, 0x027F	; 0x80027f <ssd_cc>
     9b2:	88 23       	and	r24, r24
     9b4:	21 f0       	breq	.+8      	; 0x9be <__vector_9+0x5a>
		PORTA ^= 0b10000000;
     9b6:	82 b1       	in	r24, 0x02	; 2
     9b8:	80 58       	subi	r24, 0x80	; 128
     9ba:	82 b9       	out	0x02, r24	; 2
     9bc:	01 c0       	rjmp	.+2      	; 0x9c0 <__vector_9+0x5c>
	} else {
		PORTA &= 0b01111111;
     9be:	17 98       	cbi	0x02, 7	; 2
/////////////////////////////// Private (Helper) Functions /////////////////////

// Updates the SSD displays with the correct digits for the countdown
// Also sets the frog to dead if the countdown reaches 0
static void update_countdown(void) {
	if(countdown >= 1000) {
     9c0:	80 91 81 02 	lds	r24, 0x0281	; 0x800281 <countdown>
     9c4:	90 91 82 02 	lds	r25, 0x0282	; 0x800282 <countdown+0x1>
     9c8:	88 3e       	cpi	r24, 0xE8	; 232
     9ca:	93 40       	sbci	r25, 0x03	; 3
     9cc:	08 f4       	brcc	.+2      	; 0x9d0 <__vector_9+0x6c>
     9ce:	68 c0       	rjmp	.+208    	; 0xaa0 <__vector_9+0x13c>
		if(ssd_cc) {
     9d0:	80 91 7f 02 	lds	r24, 0x027F	; 0x80027f <ssd_cc>
     9d4:	88 23       	and	r24, r24
     9d6:	a9 f1       	breq	.+106    	; 0xa42 <__vector_9+0xde>
			PORTC = SSD_digits[(countdown/1000)%10];
     9d8:	20 91 81 02 	lds	r18, 0x0281	; 0x800281 <countdown>
     9dc:	30 91 82 02 	lds	r19, 0x0282	; 0x800282 <countdown+0x1>
     9e0:	36 95       	lsr	r19
     9e2:	27 95       	ror	r18
     9e4:	36 95       	lsr	r19
     9e6:	27 95       	ror	r18
     9e8:	36 95       	lsr	r19
     9ea:	27 95       	ror	r18
     9ec:	a5 ec       	ldi	r26, 0xC5	; 197
     9ee:	b0 e2       	ldi	r27, 0x20	; 32
     9f0:	0e 94 a1 1a 	call	0x3542	; 0x3542 <__umulhisi3>
     9f4:	ac 01       	movw	r20, r24
     9f6:	52 95       	swap	r21
     9f8:	42 95       	swap	r20
     9fa:	4f 70       	andi	r20, 0x0F	; 15
     9fc:	45 27       	eor	r20, r21
     9fe:	5f 70       	andi	r21, 0x0F	; 15
     a00:	45 27       	eor	r20, r21
     a02:	9a 01       	movw	r18, r20
     a04:	ad ec       	ldi	r26, 0xCD	; 205
     a06:	bc ec       	ldi	r27, 0xCC	; 204
     a08:	0e 94 a1 1a 	call	0x3542	; 0x3542 <__umulhisi3>
     a0c:	96 95       	lsr	r25
     a0e:	87 95       	ror	r24
     a10:	96 95       	lsr	r25
     a12:	87 95       	ror	r24
     a14:	96 95       	lsr	r25
     a16:	87 95       	ror	r24
     a18:	9c 01       	movw	r18, r24
     a1a:	22 0f       	add	r18, r18
     a1c:	33 1f       	adc	r19, r19
     a1e:	88 0f       	add	r24, r24
     a20:	99 1f       	adc	r25, r25
     a22:	88 0f       	add	r24, r24
     a24:	99 1f       	adc	r25, r25
     a26:	88 0f       	add	r24, r24
     a28:	99 1f       	adc	r25, r25
     a2a:	82 0f       	add	r24, r18
     a2c:	93 1f       	adc	r25, r19
     a2e:	fa 01       	movw	r30, r20
     a30:	e8 1b       	sub	r30, r24
     a32:	f9 0b       	sbc	r31, r25
     a34:	ee 0f       	add	r30, r30
     a36:	ff 1f       	adc	r31, r31
     a38:	e6 57       	subi	r30, 0x76	; 118
     a3a:	fe 4f       	sbci	r31, 0xFE	; 254
     a3c:	80 81       	ld	r24, Z
     a3e:	88 b9       	out	0x08, r24	; 8
     a40:	9e c0       	rjmp	.+316    	; 0xb7e <__vector_9+0x21a>
			} else {
			PORTC = SSD_digits[(countdown/100)%10];
     a42:	20 91 81 02 	lds	r18, 0x0281	; 0x800281 <countdown>
     a46:	30 91 82 02 	lds	r19, 0x0282	; 0x800282 <countdown+0x1>
     a4a:	36 95       	lsr	r19
     a4c:	27 95       	ror	r18
     a4e:	36 95       	lsr	r19
     a50:	27 95       	ror	r18
     a52:	ab e7       	ldi	r26, 0x7B	; 123
     a54:	b4 e1       	ldi	r27, 0x14	; 20
     a56:	0e 94 a1 1a 	call	0x3542	; 0x3542 <__umulhisi3>
     a5a:	ac 01       	movw	r20, r24
     a5c:	56 95       	lsr	r21
     a5e:	47 95       	ror	r20
     a60:	9a 01       	movw	r18, r20
     a62:	ad ec       	ldi	r26, 0xCD	; 205
     a64:	bc ec       	ldi	r27, 0xCC	; 204
     a66:	0e 94 a1 1a 	call	0x3542	; 0x3542 <__umulhisi3>
     a6a:	96 95       	lsr	r25
     a6c:	87 95       	ror	r24
     a6e:	96 95       	lsr	r25
     a70:	87 95       	ror	r24
     a72:	96 95       	lsr	r25
     a74:	87 95       	ror	r24
     a76:	9c 01       	movw	r18, r24
     a78:	22 0f       	add	r18, r18
     a7a:	33 1f       	adc	r19, r19
     a7c:	88 0f       	add	r24, r24
     a7e:	99 1f       	adc	r25, r25
     a80:	88 0f       	add	r24, r24
     a82:	99 1f       	adc	r25, r25
     a84:	88 0f       	add	r24, r24
     a86:	99 1f       	adc	r25, r25
     a88:	82 0f       	add	r24, r18
     a8a:	93 1f       	adc	r25, r19
     a8c:	fa 01       	movw	r30, r20
     a8e:	e8 1b       	sub	r30, r24
     a90:	f9 0b       	sbc	r31, r25
     a92:	ee 0f       	add	r30, r30
     a94:	ff 1f       	adc	r31, r31
     a96:	e6 57       	subi	r30, 0x76	; 118
     a98:	fe 4f       	sbci	r31, 0xFE	; 254
     a9a:	80 81       	ld	r24, Z
     a9c:	88 b9       	out	0x08, r24	; 8
     a9e:	6f c0       	rjmp	.+222    	; 0xb7e <__vector_9+0x21a>
		}
	}
	else if(countdown >= 100) {
     aa0:	80 91 81 02 	lds	r24, 0x0281	; 0x800281 <countdown>
     aa4:	90 91 82 02 	lds	r25, 0x0282	; 0x800282 <countdown+0x1>
     aa8:	84 36       	cpi	r24, 0x64	; 100
     aaa:	91 05       	cpc	r25, r1
     aac:	a8 f1       	brcs	.+106    	; 0xb18 <__vector_9+0x1b4>
		if(ssd_cc) {
     aae:	80 91 7f 02 	lds	r24, 0x027F	; 0x80027f <ssd_cc>
     ab2:	88 23       	and	r24, r24
     ab4:	11 f0       	breq	.+4      	; 0xaba <__vector_9+0x156>
			PORTC = 0x00;
     ab6:	18 b8       	out	0x08, r1	; 8
     ab8:	62 c0       	rjmp	.+196    	; 0xb7e <__vector_9+0x21a>
			} else {
			PORTC = SSD_digits[(countdown/100)%10];
     aba:	20 91 81 02 	lds	r18, 0x0281	; 0x800281 <countdown>
     abe:	30 91 82 02 	lds	r19, 0x0282	; 0x800282 <countdown+0x1>
     ac2:	36 95       	lsr	r19
     ac4:	27 95       	ror	r18
     ac6:	36 95       	lsr	r19
     ac8:	27 95       	ror	r18
     aca:	ab e7       	ldi	r26, 0x7B	; 123
     acc:	b4 e1       	ldi	r27, 0x14	; 20
     ace:	0e 94 a1 1a 	call	0x3542	; 0x3542 <__umulhisi3>
     ad2:	ac 01       	movw	r20, r24
     ad4:	56 95       	lsr	r21
     ad6:	47 95       	ror	r20
     ad8:	9a 01       	movw	r18, r20
     ada:	ad ec       	ldi	r26, 0xCD	; 205
     adc:	bc ec       	ldi	r27, 0xCC	; 204
     ade:	0e 94 a1 1a 	call	0x3542	; 0x3542 <__umulhisi3>
     ae2:	96 95       	lsr	r25
     ae4:	87 95       	ror	r24
     ae6:	96 95       	lsr	r25
     ae8:	87 95       	ror	r24
     aea:	96 95       	lsr	r25
     aec:	87 95       	ror	r24
     aee:	9c 01       	movw	r18, r24
     af0:	22 0f       	add	r18, r18
     af2:	33 1f       	adc	r19, r19
     af4:	88 0f       	add	r24, r24
     af6:	99 1f       	adc	r25, r25
     af8:	88 0f       	add	r24, r24
     afa:	99 1f       	adc	r25, r25
     afc:	88 0f       	add	r24, r24
     afe:	99 1f       	adc	r25, r25
     b00:	82 0f       	add	r24, r18
     b02:	93 1f       	adc	r25, r19
     b04:	fa 01       	movw	r30, r20
     b06:	e8 1b       	sub	r30, r24
     b08:	f9 0b       	sbc	r31, r25
     b0a:	ee 0f       	add	r30, r30
     b0c:	ff 1f       	adc	r31, r31
     b0e:	e6 57       	subi	r30, 0x76	; 118
     b10:	fe 4f       	sbci	r31, 0xFE	; 254
     b12:	80 81       	ld	r24, Z
     b14:	88 b9       	out	0x08, r24	; 8
     b16:	33 c0       	rjmp	.+102    	; 0xb7e <__vector_9+0x21a>
		}
	}
	else {
		if(ssd_cc) {
     b18:	80 91 7f 02 	lds	r24, 0x027F	; 0x80027f <ssd_cc>
     b1c:	88 23       	and	r24, r24
     b1e:	19 f0       	breq	.+6      	; 0xb26 <__vector_9+0x1c2>
			PORTC = 0xBF;
     b20:	8f eb       	ldi	r24, 0xBF	; 191
     b22:	88 b9       	out	0x08, r24	; 8
     b24:	2c c0       	rjmp	.+88     	; 0xb7e <__vector_9+0x21a>
			} else {
			PORTC = SSD_digits[(countdown/10)%10];
     b26:	20 91 81 02 	lds	r18, 0x0281	; 0x800281 <countdown>
     b2a:	30 91 82 02 	lds	r19, 0x0282	; 0x800282 <countdown+0x1>
     b2e:	ad ec       	ldi	r26, 0xCD	; 205
     b30:	bc ec       	ldi	r27, 0xCC	; 204
     b32:	0e 94 a1 1a 	call	0x3542	; 0x3542 <__umulhisi3>
     b36:	ac 01       	movw	r20, r24
     b38:	56 95       	lsr	r21
     b3a:	47 95       	ror	r20
     b3c:	56 95       	lsr	r21
     b3e:	47 95       	ror	r20
     b40:	56 95       	lsr	r21
     b42:	47 95       	ror	r20
     b44:	9a 01       	movw	r18, r20
     b46:	0e 94 a1 1a 	call	0x3542	; 0x3542 <__umulhisi3>
     b4a:	96 95       	lsr	r25
     b4c:	87 95       	ror	r24
     b4e:	96 95       	lsr	r25
     b50:	87 95       	ror	r24
     b52:	96 95       	lsr	r25
     b54:	87 95       	ror	r24
     b56:	9c 01       	movw	r18, r24
     b58:	22 0f       	add	r18, r18
     b5a:	33 1f       	adc	r19, r19
     b5c:	88 0f       	add	r24, r24
     b5e:	99 1f       	adc	r25, r25
     b60:	88 0f       	add	r24, r24
     b62:	99 1f       	adc	r25, r25
     b64:	88 0f       	add	r24, r24
     b66:	99 1f       	adc	r25, r25
     b68:	82 0f       	add	r24, r18
     b6a:	93 1f       	adc	r25, r19
     b6c:	fa 01       	movw	r30, r20
     b6e:	e8 1b       	sub	r30, r24
     b70:	f9 0b       	sbc	r31, r25
     b72:	ee 0f       	add	r30, r30
     b74:	ff 1f       	adc	r31, r31
     b76:	e6 57       	subi	r30, 0x76	; 118
     b78:	fe 4f       	sbci	r31, 0xFE	; 254
     b7a:	80 81       	ld	r24, Z
     b7c:	88 b9       	out	0x08, r24	; 8
		}
	}

	if(countdown <= 0 && get_frog_row() != 7) {
     b7e:	80 91 81 02 	lds	r24, 0x0281	; 0x800281 <countdown>
     b82:	90 91 82 02 	lds	r25, 0x0282	; 0x800282 <countdown+0x1>
     b86:	89 2b       	or	r24, r25
     b88:	39 f4       	brne	.+14     	; 0xb98 <__vector_9+0x234>
     b8a:	0e 94 66 07 	call	0xecc	; 0xecc <get_frog_row>
     b8e:	87 30       	cpi	r24, 0x07	; 7
     b90:	19 f0       	breq	.+6      	; 0xb98 <__vector_9+0x234>
		set_frog_dead(TRUE);
     b92:	81 e0       	ldi	r24, 0x01	; 1
     b94:	0e 94 7a 07 	call	0xef4	; 0xef4 <set_frog_dead>
		PORTA ^= 0b10000000;
	} else {
		PORTA &= 0b01111111;
	}
	update_countdown();
     b98:	ff 91       	pop	r31
     b9a:	ef 91       	pop	r30
     b9c:	bf 91       	pop	r27
     b9e:	af 91       	pop	r26
     ba0:	9f 91       	pop	r25
     ba2:	8f 91       	pop	r24
     ba4:	7f 91       	pop	r23
     ba6:	6f 91       	pop	r22
     ba8:	5f 91       	pop	r21
     baa:	4f 91       	pop	r20
     bac:	3f 91       	pop	r19
     bae:	2f 91       	pop	r18
     bb0:	0f 90       	pop	r0
     bb2:	0f be       	out	0x3f, r0	; 63
     bb4:	0f 90       	pop	r0
     bb6:	1f 90       	pop	r1
     bb8:	18 95       	reti

00000bba <redraw_roadside>:
	return frog_row;
}
// returns the frogs column position
uint8_t get_frog_column(void) {
	return frog_column;
}
     bba:	cf 93       	push	r28
     bbc:	df 93       	push	r29
     bbe:	cd b7       	in	r28, 0x3d	; 61
     bc0:	de b7       	in	r29, 0x3e	; 62
     bc2:	60 97       	sbiw	r28, 0x10	; 16
     bc4:	0f b6       	in	r0, 0x3f	; 63
     bc6:	f8 94       	cli
     bc8:	de bf       	out	0x3e, r29	; 62
     bca:	0f be       	out	0x3f, r0	; 63
     bcc:	cd bf       	out	0x3d, r28	; 61
     bce:	fe 01       	movw	r30, r28
     bd0:	31 96       	adiw	r30, 0x01	; 1
     bd2:	9e 01       	movw	r18, r28
     bd4:	2f 5e       	subi	r18, 0xEF	; 239
     bd6:	3f 4f       	sbci	r19, 0xFF	; 255
     bd8:	91 e1       	ldi	r25, 0x11	; 17
     bda:	91 93       	st	Z+, r25
     bdc:	e2 17       	cp	r30, r18
     bde:	f3 07       	cpc	r31, r19
     be0:	e1 f7       	brne	.-8      	; 0xbda <redraw_roadside+0x20>
     be2:	be 01       	movw	r22, r28
     be4:	6f 5f       	subi	r22, 0xFF	; 255
     be6:	7f 4f       	sbci	r23, 0xFF	; 255
     be8:	0e 94 50 10 	call	0x20a0	; 0x20a0 <ledmatrix_update_row>
     bec:	60 96       	adiw	r28, 0x10	; 16
     bee:	0f b6       	in	r0, 0x3f	; 63
     bf0:	f8 94       	cli
     bf2:	de bf       	out	0x3e, r29	; 62
     bf4:	0f be       	out	0x3f, r0	; 63
     bf6:	cd bf       	out	0x3d, r28	; 61
     bf8:	df 91       	pop	r29
     bfa:	cf 91       	pop	r28
     bfc:	08 95       	ret

00000bfe <redraw_riverbank>:
     bfe:	ef 92       	push	r14
     c00:	ff 92       	push	r15
     c02:	0f 93       	push	r16
     c04:	1f 93       	push	r17
     c06:	cf 93       	push	r28
     c08:	df 93       	push	r29
     c0a:	cd b7       	in	r28, 0x3d	; 61
     c0c:	de b7       	in	r29, 0x3e	; 62
     c0e:	60 97       	sbiw	r28, 0x10	; 16
     c10:	0f b6       	in	r0, 0x3f	; 63
     c12:	f8 94       	cli
     c14:	de bf       	out	0x3e, r29	; 62
     c16:	0f be       	out	0x3f, r0	; 63
     c18:	cd bf       	out	0x3d, r28	; 61
     c1a:	a0 91 85 02 	lds	r26, 0x0285	; 0x800285 <riverbank>
     c1e:	b0 91 86 02 	lds	r27, 0x0286	; 0x800286 <riverbank+0x1>
     c22:	e0 90 83 02 	lds	r14, 0x0283	; 0x800283 <riverbank_status>
     c26:	f0 90 84 02 	lds	r15, 0x0284	; 0x800284 <riverbank_status+0x1>
     c2a:	ae 01       	movw	r20, r28
     c2c:	4f 5f       	subi	r20, 0xFF	; 255
     c2e:	5f 4f       	sbci	r21, 0xFF	; 255
     c30:	be 01       	movw	r22, r28
     c32:	6f 5e       	subi	r22, 0xEF	; 239
     c34:	7f 4f       	sbci	r23, 0xFF	; 255
     c36:	fa 01       	movw	r30, r20
     c38:	00 ef       	ldi	r16, 0xF0	; 240
     c3a:	11 e1       	ldi	r17, 0x11	; 17
     c3c:	cf 01       	movw	r24, r30
     c3e:	84 1b       	sub	r24, r20
     c40:	95 0b       	sbc	r25, r21
     c42:	9d 01       	movw	r18, r26
     c44:	08 2e       	mov	r0, r24
     c46:	02 c0       	rjmp	.+4      	; 0xc4c <redraw_riverbank+0x4e>
     c48:	36 95       	lsr	r19
     c4a:	27 95       	ror	r18
     c4c:	0a 94       	dec	r0
     c4e:	e2 f7       	brpl	.-8      	; 0xc48 <redraw_riverbank+0x4a>
     c50:	20 ff       	sbrs	r18, 0
     c52:	02 c0       	rjmp	.+4      	; 0xc58 <redraw_riverbank+0x5a>
     c54:	10 83       	st	Z, r17
     c56:	0b c0       	rjmp	.+22     	; 0xc6e <redraw_riverbank+0x70>
     c58:	97 01       	movw	r18, r14
     c5a:	02 c0       	rjmp	.+4      	; 0xc60 <redraw_riverbank+0x62>
     c5c:	36 95       	lsr	r19
     c5e:	27 95       	ror	r18
     c60:	8a 95       	dec	r24
     c62:	e2 f7       	brpl	.-8      	; 0xc5c <redraw_riverbank+0x5e>
     c64:	20 ff       	sbrs	r18, 0
     c66:	02 c0       	rjmp	.+4      	; 0xc6c <redraw_riverbank+0x6e>
     c68:	00 83       	st	Z, r16
     c6a:	01 c0       	rjmp	.+2      	; 0xc6e <redraw_riverbank+0x70>
     c6c:	10 82       	st	Z, r1
     c6e:	31 96       	adiw	r30, 0x01	; 1
     c70:	e6 17       	cp	r30, r22
     c72:	f7 07       	cpc	r31, r23
     c74:	19 f7       	brne	.-58     	; 0xc3c <redraw_riverbank+0x3e>
     c76:	be 01       	movw	r22, r28
     c78:	6f 5f       	subi	r22, 0xFF	; 255
     c7a:	7f 4f       	sbci	r23, 0xFF	; 255
     c7c:	87 e0       	ldi	r24, 0x07	; 7
     c7e:	0e 94 50 10 	call	0x20a0	; 0x20a0 <ledmatrix_update_row>
     c82:	60 96       	adiw	r28, 0x10	; 16
     c84:	0f b6       	in	r0, 0x3f	; 63
     c86:	f8 94       	cli
     c88:	de bf       	out	0x3e, r29	; 62
     c8a:	0f be       	out	0x3f, r0	; 63
     c8c:	cd bf       	out	0x3d, r28	; 61
     c8e:	df 91       	pop	r29
     c90:	cf 91       	pop	r28
     c92:	1f 91       	pop	r17
     c94:	0f 91       	pop	r16
     c96:	ff 90       	pop	r15
     c98:	ef 90       	pop	r14
     c9a:	08 95       	ret

00000c9c <redraw_traffic_lane>:
     c9c:	bf 92       	push	r11
     c9e:	cf 92       	push	r12
     ca0:	df 92       	push	r13
     ca2:	ef 92       	push	r14
     ca4:	ff 92       	push	r15
     ca6:	0f 93       	push	r16
     ca8:	1f 93       	push	r17
     caa:	cf 93       	push	r28
     cac:	df 93       	push	r29
     cae:	cd b7       	in	r28, 0x3d	; 61
     cb0:	de b7       	in	r29, 0x3e	; 62
     cb2:	60 97       	sbiw	r28, 0x10	; 16
     cb4:	0f b6       	in	r0, 0x3f	; 63
     cb6:	f8 94       	cli
     cb8:	de bf       	out	0x3e, r29	; 62
     cba:	0f be       	out	0x3f, r0	; 63
     cbc:	cd bf       	out	0x3d, r28	; 61
     cbe:	b8 2e       	mov	r11, r24
     cc0:	e8 2f       	mov	r30, r24
     cc2:	f0 e0       	ldi	r31, 0x00	; 0
     cc4:	e7 57       	subi	r30, 0x77	; 119
     cc6:	fd 4f       	sbci	r31, 0xFD	; 253
     cc8:	10 81       	ld	r17, Z
     cca:	ce 01       	movw	r24, r28
     ccc:	01 96       	adiw	r24, 0x01	; 1
     cce:	7c 01       	movw	r14, r24
     cd0:	6e 01       	movw	r12, r28
     cd2:	91 e1       	ldi	r25, 0x11	; 17
     cd4:	c9 0e       	add	r12, r25
     cd6:	d1 1c       	adc	r13, r1
     cd8:	8b 2d       	mov	r24, r11
     cda:	0e 94 cb 10 	call	0x2196	; 0x2196 <get_lane_data>
     cde:	01 2f       	mov	r16, r17
     ce0:	0e 94 b2 1a 	call	0x3564	; 0x3564 <__lshrdi3>
     ce4:	21 70       	andi	r18, 0x01	; 1
     ce6:	30 e0       	ldi	r19, 0x00	; 0
     ce8:	40 e0       	ldi	r20, 0x00	; 0
     cea:	50 e0       	ldi	r21, 0x00	; 0
     cec:	60 e0       	ldi	r22, 0x00	; 0
     cee:	70 e0       	ldi	r23, 0x00	; 0
     cf0:	80 e0       	ldi	r24, 0x00	; 0
     cf2:	90 e0       	ldi	r25, 0x00	; 0
     cf4:	a0 e0       	ldi	r26, 0x00	; 0
     cf6:	0e 94 ce 1a 	call	0x359c	; 0x359c <__cmpdi2_s8>
     cfa:	31 f0       	breq	.+12     	; 0xd08 <redraw_traffic_lane+0x6c>
     cfc:	8b 2d       	mov	r24, r11
     cfe:	0e 94 fa 10 	call	0x21f4	; 0x21f4 <get_lane_colours>
     d02:	f7 01       	movw	r30, r14
     d04:	80 83       	st	Z, r24
     d06:	02 c0       	rjmp	.+4      	; 0xd0c <redraw_traffic_lane+0x70>
     d08:	f7 01       	movw	r30, r14
     d0a:	10 82       	st	Z, r1
     d0c:	1f 5f       	subi	r17, 0xFF	; 255
     d0e:	10 34       	cpi	r17, 0x40	; 64
     d10:	08 f0       	brcs	.+2      	; 0xd14 <redraw_traffic_lane+0x78>
     d12:	10 e0       	ldi	r17, 0x00	; 0
     d14:	ff ef       	ldi	r31, 0xFF	; 255
     d16:	ef 1a       	sub	r14, r31
     d18:	ff 0a       	sbc	r15, r31
     d1a:	ec 14       	cp	r14, r12
     d1c:	fd 04       	cpc	r15, r13
     d1e:	e1 f6       	brne	.-72     	; 0xcd8 <redraw_traffic_lane+0x3c>
     d20:	be 01       	movw	r22, r28
     d22:	6f 5f       	subi	r22, 0xFF	; 255
     d24:	7f 4f       	sbci	r23, 0xFF	; 255
     d26:	81 e0       	ldi	r24, 0x01	; 1
     d28:	8b 0d       	add	r24, r11
     d2a:	0e 94 50 10 	call	0x20a0	; 0x20a0 <ledmatrix_update_row>
     d2e:	60 96       	adiw	r28, 0x10	; 16
     d30:	0f b6       	in	r0, 0x3f	; 63
     d32:	f8 94       	cli
     d34:	de bf       	out	0x3e, r29	; 62
     d36:	0f be       	out	0x3f, r0	; 63
     d38:	cd bf       	out	0x3d, r28	; 61
     d3a:	df 91       	pop	r29
     d3c:	cf 91       	pop	r28
     d3e:	1f 91       	pop	r17
     d40:	0f 91       	pop	r16
     d42:	ff 90       	pop	r15
     d44:	ef 90       	pop	r14
     d46:	df 90       	pop	r13
     d48:	cf 90       	pop	r12
     d4a:	bf 90       	pop	r11
     d4c:	08 95       	ret

00000d4e <redraw_river_channel>:
     d4e:	bf 92       	push	r11
     d50:	cf 92       	push	r12
     d52:	df 92       	push	r13
     d54:	ef 92       	push	r14
     d56:	ff 92       	push	r15
     d58:	0f 93       	push	r16
     d5a:	1f 93       	push	r17
     d5c:	cf 93       	push	r28
     d5e:	df 93       	push	r29
     d60:	cd b7       	in	r28, 0x3d	; 61
     d62:	de b7       	in	r29, 0x3e	; 62
     d64:	60 97       	sbiw	r28, 0x10	; 16
     d66:	0f b6       	in	r0, 0x3f	; 63
     d68:	f8 94       	cli
     d6a:	de bf       	out	0x3e, r29	; 62
     d6c:	0f be       	out	0x3f, r0	; 63
     d6e:	cd bf       	out	0x3d, r28	; 61
     d70:	08 2f       	mov	r16, r24
     d72:	e8 2f       	mov	r30, r24
     d74:	f0 e0       	ldi	r31, 0x00	; 0
     d76:	e9 57       	subi	r30, 0x79	; 121
     d78:	fd 4f       	sbci	r31, 0xFD	; 253
     d7a:	10 81       	ld	r17, Z
     d7c:	ce 01       	movw	r24, r28
     d7e:	01 96       	adiw	r24, 0x01	; 1
     d80:	7c 01       	movw	r14, r24
     d82:	6e 01       	movw	r12, r28
     d84:	91 e1       	ldi	r25, 0x11	; 17
     d86:	c9 0e       	add	r12, r25
     d88:	d1 1c       	adc	r13, r1
     d8a:	0f 2e       	mov	r0, r31
     d8c:	fc e3       	ldi	r31, 0x3C	; 60
     d8e:	bf 2e       	mov	r11, r31
     d90:	f0 2d       	mov	r31, r0
     d92:	80 2f       	mov	r24, r16
     d94:	0e 94 e7 10 	call	0x21ce	; 0x21ce <get_log_data>
     d98:	dc 01       	movw	r26, r24
     d9a:	cb 01       	movw	r24, r22
     d9c:	01 2e       	mov	r0, r17
     d9e:	04 c0       	rjmp	.+8      	; 0xda8 <redraw_river_channel+0x5a>
     da0:	b6 95       	lsr	r27
     da2:	a7 95       	ror	r26
     da4:	97 95       	ror	r25
     da6:	87 95       	ror	r24
     da8:	0a 94       	dec	r0
     daa:	d2 f7       	brpl	.-12     	; 0xda0 <redraw_river_channel+0x52>
     dac:	80 ff       	sbrs	r24, 0
     dae:	03 c0       	rjmp	.+6      	; 0xdb6 <redraw_river_channel+0x68>
     db0:	f7 01       	movw	r30, r14
     db2:	b0 82       	st	Z, r11
     db4:	02 c0       	rjmp	.+4      	; 0xdba <redraw_river_channel+0x6c>
     db6:	f7 01       	movw	r30, r14
     db8:	10 82       	st	Z, r1
     dba:	1f 5f       	subi	r17, 0xFF	; 255
     dbc:	10 32       	cpi	r17, 0x20	; 32
     dbe:	08 f0       	brcs	.+2      	; 0xdc2 <redraw_river_channel+0x74>
     dc0:	10 e0       	ldi	r17, 0x00	; 0
     dc2:	ff ef       	ldi	r31, 0xFF	; 255
     dc4:	ef 1a       	sub	r14, r31
     dc6:	ff 0a       	sbc	r15, r31
     dc8:	ec 14       	cp	r14, r12
     dca:	fd 04       	cpc	r15, r13
     dcc:	11 f7       	brne	.-60     	; 0xd92 <redraw_river_channel+0x44>
     dce:	be 01       	movw	r22, r28
     dd0:	6f 5f       	subi	r22, 0xFF	; 255
     dd2:	7f 4f       	sbci	r23, 0xFF	; 255
     dd4:	85 e0       	ldi	r24, 0x05	; 5
     dd6:	80 0f       	add	r24, r16
     dd8:	0e 94 50 10 	call	0x20a0	; 0x20a0 <ledmatrix_update_row>
     ddc:	60 96       	adiw	r28, 0x10	; 16
     dde:	0f b6       	in	r0, 0x3f	; 63
     de0:	f8 94       	cli
     de2:	de bf       	out	0x3e, r29	; 62
     de4:	0f be       	out	0x3f, r0	; 63
     de6:	cd bf       	out	0x3d, r28	; 61
     de8:	df 91       	pop	r29
     dea:	cf 91       	pop	r28
     dec:	1f 91       	pop	r17
     dee:	0f 91       	pop	r16
     df0:	ff 90       	pop	r15
     df2:	ef 90       	pop	r14
     df4:	df 90       	pop	r13
     df6:	cf 90       	pop	r12
     df8:	bf 90       	pop	r11
     dfa:	08 95       	ret

00000dfc <redraw_row>:
     dfc:	48 2f       	mov	r20, r24
     dfe:	50 e0       	ldi	r21, 0x00	; 0
     e00:	48 30       	cpi	r20, 0x08	; 8
     e02:	51 05       	cpc	r21, r1
     e04:	90 f4       	brcc	.+36     	; 0xe2a <redraw_row+0x2e>
     e06:	fa 01       	movw	r30, r20
     e08:	e2 5c       	subi	r30, 0xC2	; 194
     e0a:	ff 4f       	sbci	r31, 0xFF	; 255
     e0c:	0c 94 9b 1a 	jmp	0x3536	; 0x3536 <__tablejump2__>
     e10:	0e 94 dd 05 	call	0xbba	; 0xbba <redraw_roadside>
     e14:	08 95       	ret
     e16:	81 50       	subi	r24, 0x01	; 1
     e18:	0e 94 4e 06 	call	0xc9c	; 0xc9c <redraw_traffic_lane>
     e1c:	08 95       	ret
     e1e:	85 50       	subi	r24, 0x05	; 5
     e20:	0e 94 a7 06 	call	0xd4e	; 0xd4e <redraw_river_channel>
     e24:	08 95       	ret
     e26:	0e 94 ff 05 	call	0xbfe	; 0xbfe <redraw_riverbank>
     e2a:	08 95       	ret

00000e2c <will_frog_die_at_position>:
     e2c:	0f 93       	push	r16
     e2e:	1f 93       	push	r17
     e30:	60 31       	cpi	r22, 0x10	; 16
     e32:	08 f0       	brcs	.+2      	; 0xe36 <will_frog_die_at_position+0xa>
     e34:	45 c0       	rjmp	.+138    	; 0xec0 <will_frog_die_at_position+0x94>
     e36:	08 2f       	mov	r16, r24
     e38:	08 2e       	mov	r0, r24
     e3a:	00 0c       	add	r0, r0
     e3c:	11 0b       	sbc	r17, r17
     e3e:	22 0b       	sbc	r18, r18
     e40:	33 0b       	sbc	r19, r19
     e42:	08 30       	cpi	r16, 0x08	; 8
     e44:	11 05       	cpc	r17, r1
     e46:	28 f4       	brcc	.+10     	; 0xe52 <will_frog_die_at_position+0x26>
     e48:	f8 01       	movw	r30, r16
     e4a:	ea 5b       	subi	r30, 0xBA	; 186
     e4c:	ff 4f       	sbci	r31, 0xFF	; 255
     e4e:	0c 94 9b 1a 	jmp	0x3536	; 0x3536 <__tablejump2__>
     e52:	81 e0       	ldi	r24, 0x01	; 1
     e54:	38 c0       	rjmp	.+112    	; 0xec6 <will_frog_die_at_position+0x9a>
     e56:	81 50       	subi	r24, 0x01	; 1
     e58:	e8 2f       	mov	r30, r24
     e5a:	f0 e0       	ldi	r31, 0x00	; 0
     e5c:	e7 57       	subi	r30, 0x77	; 119
     e5e:	fd 4f       	sbci	r31, 0xFD	; 253
     e60:	00 81       	ld	r16, Z
     e62:	06 0f       	add	r16, r22
     e64:	00 34       	cpi	r16, 0x40	; 64
     e66:	08 f0       	brcs	.+2      	; 0xe6a <will_frog_die_at_position+0x3e>
     e68:	00 54       	subi	r16, 0x40	; 64
     e6a:	0e 94 cb 10 	call	0x2196	; 0x2196 <get_lane_data>
     e6e:	0e 94 b2 1a 	call	0x3564	; 0x3564 <__lshrdi3>
     e72:	82 2f       	mov	r24, r18
     e74:	81 70       	andi	r24, 0x01	; 1
     e76:	27 c0       	rjmp	.+78     	; 0xec6 <will_frog_die_at_position+0x9a>
     e78:	85 50       	subi	r24, 0x05	; 5
     e7a:	e8 2f       	mov	r30, r24
     e7c:	f0 e0       	ldi	r31, 0x00	; 0
     e7e:	e9 57       	subi	r30, 0x79	; 121
     e80:	fd 4f       	sbci	r31, 0xFD	; 253
     e82:	00 81       	ld	r16, Z
     e84:	06 0f       	add	r16, r22
     e86:	00 32       	cpi	r16, 0x20	; 32
     e88:	08 f0       	brcs	.+2      	; 0xe8c <will_frog_die_at_position+0x60>
     e8a:	00 52       	subi	r16, 0x20	; 32
     e8c:	0e 94 e7 10 	call	0x21ce	; 0x21ce <get_log_data>
     e90:	dc 01       	movw	r26, r24
     e92:	cb 01       	movw	r24, r22
     e94:	04 c0       	rjmp	.+8      	; 0xe9e <will_frog_die_at_position+0x72>
     e96:	b6 95       	lsr	r27
     e98:	a7 95       	ror	r26
     e9a:	97 95       	ror	r25
     e9c:	87 95       	ror	r24
     e9e:	0a 95       	dec	r16
     ea0:	d2 f7       	brpl	.-12     	; 0xe96 <will_frog_die_at_position+0x6a>
     ea2:	21 e0       	ldi	r18, 0x01	; 1
     ea4:	82 27       	eor	r24, r18
     ea6:	81 70       	andi	r24, 0x01	; 1
     ea8:	0e c0       	rjmp	.+28     	; 0xec6 <will_frog_die_at_position+0x9a>
     eaa:	80 91 83 02 	lds	r24, 0x0283	; 0x800283 <riverbank_status>
     eae:	90 91 84 02 	lds	r25, 0x0284	; 0x800284 <riverbank_status+0x1>
     eb2:	02 c0       	rjmp	.+4      	; 0xeb8 <will_frog_die_at_position+0x8c>
     eb4:	96 95       	lsr	r25
     eb6:	87 95       	ror	r24
     eb8:	6a 95       	dec	r22
     eba:	e2 f7       	brpl	.-8      	; 0xeb4 <will_frog_die_at_position+0x88>
     ebc:	81 70       	andi	r24, 0x01	; 1
     ebe:	03 c0       	rjmp	.+6      	; 0xec6 <will_frog_die_at_position+0x9a>
     ec0:	81 e0       	ldi	r24, 0x01	; 1
     ec2:	01 c0       	rjmp	.+2      	; 0xec6 <will_frog_die_at_position+0x9a>
     ec4:	80 e0       	ldi	r24, 0x00	; 0
     ec6:	1f 91       	pop	r17
     ec8:	0f 91       	pop	r16
     eca:	08 95       	ret

00000ecc <get_frog_row>:
     ecc:	80 91 8e 02 	lds	r24, 0x028E	; 0x80028e <frog_row>
     ed0:	08 95       	ret

00000ed2 <is_riverbank_full>:
uint8_t is_riverbank_full(void) {
	return (riverbank_status == 0xFFFF);
     ed2:	81 e0       	ldi	r24, 0x01	; 1
     ed4:	20 91 83 02 	lds	r18, 0x0283	; 0x800283 <riverbank_status>
     ed8:	30 91 84 02 	lds	r19, 0x0284	; 0x800284 <riverbank_status+0x1>
     edc:	2f 3f       	cpi	r18, 0xFF	; 255
     ede:	3f 4f       	sbci	r19, 0xFF	; 255
     ee0:	09 f0       	breq	.+2      	; 0xee4 <is_riverbank_full+0x12>
     ee2:	80 e0       	ldi	r24, 0x00	; 0
}
     ee4:	08 95       	ret

00000ee6 <frog_has_reached_riverbank>:

uint8_t frog_has_reached_riverbank(void) {
	return (frog_row == RIVERBANK_ROW);
     ee6:	81 e0       	ldi	r24, 0x01	; 1
     ee8:	90 91 8e 02 	lds	r25, 0x028E	; 0x80028e <frog_row>
     eec:	97 30       	cpi	r25, 0x07	; 7
     eee:	09 f0       	breq	.+2      	; 0xef2 <frog_has_reached_riverbank+0xc>
     ef0:	80 e0       	ldi	r24, 0x00	; 0
}
     ef2:	08 95       	ret

00000ef4 <set_frog_dead>:
void set_frog_dead(uint8_t is_dead) {
	if(is_dead == TRUE) {
     ef4:	81 30       	cpi	r24, 0x01	; 1
     ef6:	19 f4       	brne	.+6      	; 0xefe <set_frog_dead+0xa>
		frog_dead = TRUE;
     ef8:	80 93 8c 02 	sts	0x028C, r24	; 0x80028c <frog_dead>
     efc:	08 95       	ret
	}
	else {
		frog_dead = FALSE;
     efe:	10 92 8c 02 	sts	0x028C, r1	; 0x80028c <frog_dead>
     f02:	08 95       	ret

00000f04 <is_frog_dead>:
	}
}

uint8_t is_frog_dead(void) {
	return frog_dead;
}
     f04:	80 91 8c 02 	lds	r24, 0x028C	; 0x80028c <frog_dead>
     f08:	08 95       	ret

00000f0a <redraw_frog>:
	}
}

// Redraw the frog in its current position.
void redraw_frog(void) {
	if(frog_dead) {
     f0a:	80 91 8c 02 	lds	r24, 0x028C	; 0x80028c <frog_dead>
     f0e:	88 23       	and	r24, r24
     f10:	41 f0       	breq	.+16     	; 0xf22 <redraw_frog+0x18>
		ledmatrix_update_pixel(frog_column, frog_row, COLOUR_DEAD_FROG);
     f12:	45 e3       	ldi	r20, 0x35	; 53
     f14:	60 91 8e 02 	lds	r22, 0x028E	; 0x80028e <frog_row>
     f18:	80 91 8d 02 	lds	r24, 0x028D	; 0x80028d <frog_column>
     f1c:	0e 94 31 10 	call	0x2062	; 0x2062 <ledmatrix_update_pixel>
     f20:	08 95       	ret
		} else {
		ledmatrix_update_pixel(frog_column, frog_row, COLOUR_FROG);
     f22:	40 ef       	ldi	r20, 0xF0	; 240
     f24:	60 91 8e 02 	lds	r22, 0x028E	; 0x80028e <frog_row>
     f28:	80 91 8d 02 	lds	r24, 0x028D	; 0x80028d <frog_column>
     f2c:	0e 94 31 10 	call	0x2062	; 0x2062 <ledmatrix_update_pixel>
     f30:	08 95       	ret

00000f32 <put_frog_in_start_position>:

// Redraw the rows on the game field. The frog is not redrawn.
static void redraw_whole_display(void) {
	// Clear the display
	//terminal_game_clear();
	ledmatrix_clear();
     f32:	0e 94 91 10 	call	0x2122	; 0x2122 <ledmatrix_clear>


	// Start with the starting and halfway rows
	redraw_roadside(START_ROW);
     f36:	80 e0       	ldi	r24, 0x00	; 0
     f38:	0e 94 dd 05 	call	0xbba	; 0xbba <redraw_roadside>
	redraw_roadside(HALFWAY_ROW);
     f3c:	84 e0       	ldi	r24, 0x04	; 4
     f3e:	0e 94 dd 05 	call	0xbba	; 0xbba <redraw_roadside>



	// Redraw traffic lanes
	for(uint8_t lane=0; lane<=2; lane++) {
		redraw_traffic_lane(lane);
     f42:	80 e0       	ldi	r24, 0x00	; 0
     f44:	0e 94 4e 06 	call	0xc9c	; 0xc9c <redraw_traffic_lane>
     f48:	81 e0       	ldi	r24, 0x01	; 1
     f4a:	0e 94 4e 06 	call	0xc9c	; 0xc9c <redraw_traffic_lane>
     f4e:	82 e0       	ldi	r24, 0x02	; 2
     f50:	0e 94 4e 06 	call	0xc9c	; 0xc9c <redraw_traffic_lane>
	}
	// Redraw river
	for(uint8_t channel=0; channel<=1; channel++) {
		redraw_river_channel(channel);
     f54:	80 e0       	ldi	r24, 0x00	; 0
     f56:	0e 94 a7 06 	call	0xd4e	; 0xd4e <redraw_river_channel>
     f5a:	81 e0       	ldi	r24, 0x01	; 1
     f5c:	0e 94 a7 06 	call	0xd4e	; 0xd4e <redraw_river_channel>
	}
	// Redraw riverbank
	redraw_riverbank();
     f60:	0e 94 ff 05 	call	0xbfe	; 0xbfe <redraw_riverbank>

// Add a frog to the game
void put_frog_in_start_position(void) {
	redraw_whole_display();
	// Initial starting position of frog (7,0)
	frog_row = 0;
     f64:	10 92 8e 02 	sts	0x028E, r1	; 0x80028e <frog_row>
	frog_column = 7;
     f68:	87 e0       	ldi	r24, 0x07	; 7
     f6a:	80 93 8d 02 	sts	0x028D, r24	; 0x80028d <frog_column>

	// Frog is initially alive
	frog_dead = FALSE;
     f6e:	10 92 8c 02 	sts	0x028C, r1	; 0x80028c <frog_dead>

	// Show the frog
	redraw_frog();
     f72:	0e 94 85 07 	call	0xf0a	; 0xf0a <redraw_frog>
	reset_countdown();
     f76:	0e 94 9e 04 	call	0x93c	; 0x93c <reset_countdown>
	clear_button_queue();
     f7a:	0e 94 d9 03 	call	0x7b2	; 0x7b2 <clear_button_queue>
	clear_serial_input_buffer();
     f7e:	0e 94 d2 16 	call	0x2da4	; 0x2da4 <clear_serial_input_buffer>
	clear_joystick_queue();
     f82:	0e 94 01 10 	call	0x2002	; 0x2002 <clear_joystick_queue>
     f86:	08 95       	ret

00000f88 <initialise_game>:
/////////////////////////////// Public Functions ///////////////////////////////
// These functions are defined in the same order as declared in game.h

// Reset the game
void initialise_game(void) {
	cli();
     f88:	f8 94       	cli
	// Initial lane and log positions
	lane_position[0] = lane_position[1] = lane_position[2] = 0;
     f8a:	e9 e8       	ldi	r30, 0x89	; 137
     f8c:	f2 e0       	ldi	r31, 0x02	; 2
     f8e:	12 82       	std	Z+2, r1	; 0x02
     f90:	11 82       	std	Z+1, r1	; 0x01
     f92:	10 82       	st	Z, r1
	log_position[0] = log_position[1] = 0;
     f94:	e7 e8       	ldi	r30, 0x87	; 135
     f96:	f2 e0       	ldi	r31, 0x02	; 2
     f98:	11 82       	std	Z+1, r1	; 0x01
     f9a:	10 82       	st	Z, r1

	// Initial riverbank pattern
	riverbank = RIVERBANK;
     f9c:	8d ed       	ldi	r24, 0xDD	; 221
     f9e:	9d ed       	ldi	r25, 0xDD	; 221
     fa0:	90 93 86 02 	sts	0x0286, r25	; 0x800286 <riverbank+0x1>
     fa4:	80 93 85 02 	sts	0x0285, r24	; 0x800285 <riverbank>
	riverbank_status = RIVERBANK;
     fa8:	90 93 84 02 	sts	0x0284, r25	; 0x800284 <riverbank_status+0x1>
     fac:	80 93 83 02 	sts	0x0283, r24	; 0x800283 <riverbank_status>

	// Add a frog to the roadside - this will redraw the frog
	put_frog_in_start_position();
     fb0:	0e 94 99 07 	call	0xf32	; 0xf32 <put_frog_in_start_position>
	sei();
     fb4:	78 94       	sei
     fb6:	08 95       	ret

00000fb8 <move_frog_forward>:
// This function assumes that the frog is not in row 7 (the top row). A frog in
// row 7 is out
// of the game.
void move_frog_forward(void) {
	// Redraw the row the frog is currently on (this will remove the frog)
	redraw_row(frog_row);
     fb8:	80 91 8e 02 	lds	r24, 0x028E	; 0x80028e <frog_row>
     fbc:	0e 94 fe 06 	call	0xdfc	; 0xdfc <redraw_row>

	// Check whether this move will cause the frog to die or not
	frog_dead = will_frog_die_at_position(frog_row+1, frog_column);
     fc0:	80 91 8e 02 	lds	r24, 0x028E	; 0x80028e <frog_row>
     fc4:	60 91 8d 02 	lds	r22, 0x028D	; 0x80028d <frog_column>
     fc8:	8f 5f       	subi	r24, 0xFF	; 255
     fca:	0e 94 16 07 	call	0xe2c	; 0xe2c <will_frog_die_at_position>
     fce:	80 93 8c 02 	sts	0x028C, r24	; 0x80028c <frog_dead>

	// Move the frog position forward and show the frog.
	// We do this whether the frog is alive or not.
	frog_row++;
     fd2:	80 91 8e 02 	lds	r24, 0x028E	; 0x80028e <frog_row>
     fd6:	8f 5f       	subi	r24, 0xFF	; 255
     fd8:	80 93 8e 02 	sts	0x028E, r24	; 0x80028e <frog_row>
	redraw_frog();
     fdc:	0e 94 85 07 	call	0xf0a	; 0xf0a <redraw_frog>

	// If the frog has ended up successfully in row 7 - add it to the
	// riverbank_status flag
	if(!frog_dead && frog_row == RIVERBANK_ROW) {
     fe0:	80 91 8c 02 	lds	r24, 0x028C	; 0x80028c <frog_dead>
     fe4:	81 11       	cpse	r24, r1
     fe6:	20 c0       	rjmp	.+64     	; 0x1028 <move_frog_forward+0x70>
     fe8:	80 91 8e 02 	lds	r24, 0x028E	; 0x80028e <frog_row>
     fec:	87 30       	cpi	r24, 0x07	; 7
     fee:	c1 f4       	brne	.+48     	; 0x1020 <move_frog_forward+0x68>
		riverbank_status |= (1<<frog_column);
     ff0:	81 e0       	ldi	r24, 0x01	; 1
     ff2:	90 e0       	ldi	r25, 0x00	; 0
     ff4:	00 90 8d 02 	lds	r0, 0x028D	; 0x80028d <frog_column>
     ff8:	02 c0       	rjmp	.+4      	; 0xffe <move_frog_forward+0x46>
     ffa:	88 0f       	add	r24, r24
     ffc:	99 1f       	adc	r25, r25
     ffe:	0a 94       	dec	r0
    1000:	e2 f7       	brpl	.-8      	; 0xffa <move_frog_forward+0x42>
    1002:	20 91 83 02 	lds	r18, 0x0283	; 0x800283 <riverbank_status>
    1006:	30 91 84 02 	lds	r19, 0x0284	; 0x800284 <riverbank_status+0x1>
    100a:	82 2b       	or	r24, r18
    100c:	93 2b       	or	r25, r19
    100e:	90 93 84 02 	sts	0x0284, r25	; 0x800284 <riverbank_status+0x1>
    1012:	80 93 83 02 	sts	0x0283, r24	; 0x800283 <riverbank_status>
		add_to_score(10);
    1016:	8a e0       	ldi	r24, 0x0A	; 10
    1018:	90 e0       	ldi	r25, 0x00	; 0
    101a:	0e 94 2d 15 	call	0x2a5a	; 0x2a5a <add_to_score>
    101e:	08 95       	ret

	} else if(!frog_dead) {
		add_to_score(1);
    1020:	81 e0       	ldi	r24, 0x01	; 1
    1022:	90 e0       	ldi	r25, 0x00	; 0
    1024:	0e 94 2d 15 	call	0x2a5a	; 0x2a5a <add_to_score>
    1028:	08 95       	ret

0000102a <move_frog_backward>:
}

void move_frog_backward(void) {
	// If the frog is in the start row it will die in it's position otherwise
	// move the frog backward and redraw the frog.
	if(frog_row == START_ROW) {
    102a:	80 91 8e 02 	lds	r24, 0x028E	; 0x80028e <frog_row>
    102e:	81 11       	cpse	r24, r1
    1030:	04 c0       	rjmp	.+8      	; 0x103a <move_frog_backward+0x10>
		frog_dead = TRUE;
    1032:	81 e0       	ldi	r24, 0x01	; 1
    1034:	80 93 8c 02 	sts	0x028C, r24	; 0x80028c <frog_dead>
    1038:	08 95       	ret
	} else {
		redraw_row(frog_row);
    103a:	0e 94 fe 06 	call	0xdfc	; 0xdfc <redraw_row>
		frog_dead = will_frog_die_at_position(frog_row-1, frog_column);
    103e:	80 91 8e 02 	lds	r24, 0x028E	; 0x80028e <frog_row>
    1042:	60 91 8d 02 	lds	r22, 0x028D	; 0x80028d <frog_column>
    1046:	81 50       	subi	r24, 0x01	; 1
    1048:	0e 94 16 07 	call	0xe2c	; 0xe2c <will_frog_die_at_position>
    104c:	80 93 8c 02 	sts	0x028C, r24	; 0x80028c <frog_dead>
		frog_row--;
    1050:	80 91 8e 02 	lds	r24, 0x028E	; 0x80028e <frog_row>
    1054:	81 50       	subi	r24, 0x01	; 1
    1056:	80 93 8e 02 	sts	0x028E, r24	; 0x80028e <frog_row>
		redraw_frog();
    105a:	0e 94 85 07 	call	0xf0a	; 0xf0a <redraw_frog>
    105e:	08 95       	ret

00001060 <move_frog_to_left>:
}

void move_frog_to_left(void) {
	// If the frog is in the left most column it will die in it's position
	// otherwise move the frog left and redraw the frog.
	if(frog_column == 0) {
    1060:	80 91 8d 02 	lds	r24, 0x028D	; 0x80028d <frog_column>
    1064:	81 11       	cpse	r24, r1
    1066:	04 c0       	rjmp	.+8      	; 0x1070 <move_frog_to_left+0x10>
		frog_dead = TRUE;
    1068:	81 e0       	ldi	r24, 0x01	; 1
    106a:	80 93 8c 02 	sts	0x028C, r24	; 0x80028c <frog_dead>
    106e:	08 95       	ret
	} else {
		redraw_row(frog_row);
    1070:	80 91 8e 02 	lds	r24, 0x028E	; 0x80028e <frog_row>
    1074:	0e 94 fe 06 	call	0xdfc	; 0xdfc <redraw_row>
		frog_dead = will_frog_die_at_position(frog_row, frog_column-1);
    1078:	60 91 8d 02 	lds	r22, 0x028D	; 0x80028d <frog_column>
    107c:	61 50       	subi	r22, 0x01	; 1
    107e:	80 91 8e 02 	lds	r24, 0x028E	; 0x80028e <frog_row>
    1082:	0e 94 16 07 	call	0xe2c	; 0xe2c <will_frog_die_at_position>
    1086:	80 93 8c 02 	sts	0x028C, r24	; 0x80028c <frog_dead>
		frog_column--;
    108a:	80 91 8d 02 	lds	r24, 0x028D	; 0x80028d <frog_column>
    108e:	81 50       	subi	r24, 0x01	; 1
    1090:	80 93 8d 02 	sts	0x028D, r24	; 0x80028d <frog_column>
		redraw_frog();
    1094:	0e 94 85 07 	call	0xf0a	; 0xf0a <redraw_frog>
    1098:	08 95       	ret

0000109a <move_frog_to_right>:
}

void move_frog_to_right(void) {
	// If the frog is in right most column it will die in it's position
	// otherwise move the frog right and redraw the frog.
	if(frog_column == 15) {
    109a:	80 91 8d 02 	lds	r24, 0x028D	; 0x80028d <frog_column>
    109e:	8f 30       	cpi	r24, 0x0F	; 15
    10a0:	21 f4       	brne	.+8      	; 0x10aa <move_frog_to_right+0x10>
		frog_dead = TRUE;
    10a2:	81 e0       	ldi	r24, 0x01	; 1
    10a4:	80 93 8c 02 	sts	0x028C, r24	; 0x80028c <frog_dead>
    10a8:	08 95       	ret
	} else {
		redraw_row(frog_row);
    10aa:	80 91 8e 02 	lds	r24, 0x028E	; 0x80028e <frog_row>
    10ae:	0e 94 fe 06 	call	0xdfc	; 0xdfc <redraw_row>
		frog_dead = will_frog_die_at_position(frog_row, frog_column+1);
    10b2:	60 91 8d 02 	lds	r22, 0x028D	; 0x80028d <frog_column>
    10b6:	6f 5f       	subi	r22, 0xFF	; 255
    10b8:	80 91 8e 02 	lds	r24, 0x028E	; 0x80028e <frog_row>
    10bc:	0e 94 16 07 	call	0xe2c	; 0xe2c <will_frog_die_at_position>
    10c0:	80 93 8c 02 	sts	0x028C, r24	; 0x80028c <frog_dead>
		frog_column++;
    10c4:	80 91 8d 02 	lds	r24, 0x028D	; 0x80028d <frog_column>
    10c8:	8f 5f       	subi	r24, 0xFF	; 255
    10ca:	80 93 8d 02 	sts	0x028D, r24	; 0x80028d <frog_column>
		redraw_frog();
    10ce:	0e 94 85 07 	call	0xf0a	; 0xf0a <redraw_frog>
    10d2:	08 95       	ret

000010d4 <move_frog_up_left>:

// Diagonal movement functions
void move_frog_up_left(void) {
	// If the frog is in the left most column it will die in it's position
	// otherwise move the frog left and up and redraw the frog.
	if(frog_column == 0) {
    10d4:	80 91 8d 02 	lds	r24, 0x028D	; 0x80028d <frog_column>
    10d8:	81 11       	cpse	r24, r1
    10da:	04 c0       	rjmp	.+8      	; 0x10e4 <move_frog_up_left+0x10>
		frog_dead = TRUE;
    10dc:	81 e0       	ldi	r24, 0x01	; 1
    10de:	80 93 8c 02 	sts	0x028C, r24	; 0x80028c <frog_dead>
    10e2:	08 95       	ret
	} else {
		redraw_row(frog_row);
    10e4:	80 91 8e 02 	lds	r24, 0x028E	; 0x80028e <frog_row>
    10e8:	0e 94 fe 06 	call	0xdfc	; 0xdfc <redraw_row>
		frog_dead = will_frog_die_at_position(frog_row+1, frog_column-1);
    10ec:	60 91 8d 02 	lds	r22, 0x028D	; 0x80028d <frog_column>
    10f0:	61 50       	subi	r22, 0x01	; 1
    10f2:	80 91 8e 02 	lds	r24, 0x028E	; 0x80028e <frog_row>
    10f6:	8f 5f       	subi	r24, 0xFF	; 255
    10f8:	0e 94 16 07 	call	0xe2c	; 0xe2c <will_frog_die_at_position>
    10fc:	80 93 8c 02 	sts	0x028C, r24	; 0x80028c <frog_dead>
		frog_row++;
    1100:	80 91 8e 02 	lds	r24, 0x028E	; 0x80028e <frog_row>
    1104:	8f 5f       	subi	r24, 0xFF	; 255
    1106:	80 93 8e 02 	sts	0x028E, r24	; 0x80028e <frog_row>
		frog_column--;
    110a:	80 91 8d 02 	lds	r24, 0x028D	; 0x80028d <frog_column>
    110e:	81 50       	subi	r24, 0x01	; 1
    1110:	80 93 8d 02 	sts	0x028D, r24	; 0x80028d <frog_column>
		redraw_frog();
    1114:	0e 94 85 07 	call	0xf0a	; 0xf0a <redraw_frog>

		// If the frog has ended up successfully in row 7 - add it to the
		// riverbank_status flag
		if(!frog_dead && frog_row == RIVERBANK_ROW) {
    1118:	80 91 8c 02 	lds	r24, 0x028C	; 0x80028c <frog_dead>
    111c:	81 11       	cpse	r24, r1
    111e:	20 c0       	rjmp	.+64     	; 0x1160 <move_frog_up_left+0x8c>
    1120:	80 91 8e 02 	lds	r24, 0x028E	; 0x80028e <frog_row>
    1124:	87 30       	cpi	r24, 0x07	; 7
    1126:	c1 f4       	brne	.+48     	; 0x1158 <move_frog_up_left+0x84>
			riverbank_status |= (1<<frog_column);
    1128:	81 e0       	ldi	r24, 0x01	; 1
    112a:	90 e0       	ldi	r25, 0x00	; 0
    112c:	00 90 8d 02 	lds	r0, 0x028D	; 0x80028d <frog_column>
    1130:	02 c0       	rjmp	.+4      	; 0x1136 <move_frog_up_left+0x62>
    1132:	88 0f       	add	r24, r24
    1134:	99 1f       	adc	r25, r25
    1136:	0a 94       	dec	r0
    1138:	e2 f7       	brpl	.-8      	; 0x1132 <move_frog_up_left+0x5e>
    113a:	20 91 83 02 	lds	r18, 0x0283	; 0x800283 <riverbank_status>
    113e:	30 91 84 02 	lds	r19, 0x0284	; 0x800284 <riverbank_status+0x1>
    1142:	82 2b       	or	r24, r18
    1144:	93 2b       	or	r25, r19
    1146:	90 93 84 02 	sts	0x0284, r25	; 0x800284 <riverbank_status+0x1>
    114a:	80 93 83 02 	sts	0x0283, r24	; 0x800283 <riverbank_status>
			add_to_score(10);
    114e:	8a e0       	ldi	r24, 0x0A	; 10
    1150:	90 e0       	ldi	r25, 0x00	; 0
    1152:	0e 94 2d 15 	call	0x2a5a	; 0x2a5a <add_to_score>
    1156:	08 95       	ret

			} else if(!frog_dead) {
			add_to_score(1);
    1158:	81 e0       	ldi	r24, 0x01	; 1
    115a:	90 e0       	ldi	r25, 0x00	; 0
    115c:	0e 94 2d 15 	call	0x2a5a	; 0x2a5a <add_to_score>
    1160:	08 95       	ret

00001162 <move_frog_up_right>:

// Diagonal movement functions
void move_frog_up_right(void) {
	// If the frog is in the right most column it will die in it's position
	// otherwise move the frog left and up and redraw the frog.
	if(frog_column == 15) {
    1162:	80 91 8d 02 	lds	r24, 0x028D	; 0x80028d <frog_column>
    1166:	8f 30       	cpi	r24, 0x0F	; 15
    1168:	21 f4       	brne	.+8      	; 0x1172 <move_frog_up_right+0x10>
		frog_dead = TRUE;
    116a:	81 e0       	ldi	r24, 0x01	; 1
    116c:	80 93 8c 02 	sts	0x028C, r24	; 0x80028c <frog_dead>
    1170:	08 95       	ret
	} else {
		redraw_row(frog_row);
    1172:	80 91 8e 02 	lds	r24, 0x028E	; 0x80028e <frog_row>
    1176:	0e 94 fe 06 	call	0xdfc	; 0xdfc <redraw_row>
		frog_dead = will_frog_die_at_position(frog_row+1, frog_column+1);
    117a:	60 91 8d 02 	lds	r22, 0x028D	; 0x80028d <frog_column>
    117e:	6f 5f       	subi	r22, 0xFF	; 255
    1180:	80 91 8e 02 	lds	r24, 0x028E	; 0x80028e <frog_row>
    1184:	8f 5f       	subi	r24, 0xFF	; 255
    1186:	0e 94 16 07 	call	0xe2c	; 0xe2c <will_frog_die_at_position>
    118a:	80 93 8c 02 	sts	0x028C, r24	; 0x80028c <frog_dead>
		frog_row++;
    118e:	80 91 8e 02 	lds	r24, 0x028E	; 0x80028e <frog_row>
    1192:	8f 5f       	subi	r24, 0xFF	; 255
    1194:	80 93 8e 02 	sts	0x028E, r24	; 0x80028e <frog_row>
		frog_column++;
    1198:	80 91 8d 02 	lds	r24, 0x028D	; 0x80028d <frog_column>
    119c:	8f 5f       	subi	r24, 0xFF	; 255
    119e:	80 93 8d 02 	sts	0x028D, r24	; 0x80028d <frog_column>
		redraw_frog();
    11a2:	0e 94 85 07 	call	0xf0a	; 0xf0a <redraw_frog>

		// If the frog has ended up successfully in row 7 - add it to the
		// riverbank_status flag
		if(!frog_dead && frog_row == RIVERBANK_ROW) {
    11a6:	80 91 8c 02 	lds	r24, 0x028C	; 0x80028c <frog_dead>
    11aa:	81 11       	cpse	r24, r1
    11ac:	20 c0       	rjmp	.+64     	; 0x11ee <move_frog_up_right+0x8c>
    11ae:	80 91 8e 02 	lds	r24, 0x028E	; 0x80028e <frog_row>
    11b2:	87 30       	cpi	r24, 0x07	; 7
    11b4:	c1 f4       	brne	.+48     	; 0x11e6 <move_frog_up_right+0x84>
			riverbank_status |= (1<<frog_column);
    11b6:	81 e0       	ldi	r24, 0x01	; 1
    11b8:	90 e0       	ldi	r25, 0x00	; 0
    11ba:	00 90 8d 02 	lds	r0, 0x028D	; 0x80028d <frog_column>
    11be:	02 c0       	rjmp	.+4      	; 0x11c4 <move_frog_up_right+0x62>
    11c0:	88 0f       	add	r24, r24
    11c2:	99 1f       	adc	r25, r25
    11c4:	0a 94       	dec	r0
    11c6:	e2 f7       	brpl	.-8      	; 0x11c0 <move_frog_up_right+0x5e>
    11c8:	20 91 83 02 	lds	r18, 0x0283	; 0x800283 <riverbank_status>
    11cc:	30 91 84 02 	lds	r19, 0x0284	; 0x800284 <riverbank_status+0x1>
    11d0:	82 2b       	or	r24, r18
    11d2:	93 2b       	or	r25, r19
    11d4:	90 93 84 02 	sts	0x0284, r25	; 0x800284 <riverbank_status+0x1>
    11d8:	80 93 83 02 	sts	0x0283, r24	; 0x800283 <riverbank_status>
			add_to_score(10);
    11dc:	8a e0       	ldi	r24, 0x0A	; 10
    11de:	90 e0       	ldi	r25, 0x00	; 0
    11e0:	0e 94 2d 15 	call	0x2a5a	; 0x2a5a <add_to_score>
    11e4:	08 95       	ret
		} else if(!frog_dead) {
			add_to_score(1);
    11e6:	81 e0       	ldi	r24, 0x01	; 1
    11e8:	90 e0       	ldi	r25, 0x00	; 0
    11ea:	0e 94 2d 15 	call	0x2a5a	; 0x2a5a <add_to_score>
    11ee:	08 95       	ret

000011f0 <move_frog_down_left>:

// Diagonal movement functions
void move_frog_down_left(void) {
	// If the frog is in the start row it will die in it's position otherwise
	// move the frog backward and redraw the frog.
	if((frog_row == START_ROW) || (frog_column == 0)) {
    11f0:	80 91 8e 02 	lds	r24, 0x028E	; 0x80028e <frog_row>
    11f4:	88 23       	and	r24, r24
    11f6:	21 f0       	breq	.+8      	; 0x1200 <move_frog_down_left+0x10>
    11f8:	90 91 8d 02 	lds	r25, 0x028D	; 0x80028d <frog_column>
    11fc:	91 11       	cpse	r25, r1
    11fe:	04 c0       	rjmp	.+8      	; 0x1208 <move_frog_down_left+0x18>
		frog_dead = TRUE;
    1200:	81 e0       	ldi	r24, 0x01	; 1
    1202:	80 93 8c 02 	sts	0x028C, r24	; 0x80028c <frog_dead>
    1206:	08 95       	ret
	} else {
		redraw_row(frog_row);
    1208:	0e 94 fe 06 	call	0xdfc	; 0xdfc <redraw_row>
		frog_dead = will_frog_die_at_position(frog_row-1, frog_column-1);
    120c:	60 91 8d 02 	lds	r22, 0x028D	; 0x80028d <frog_column>
    1210:	61 50       	subi	r22, 0x01	; 1
    1212:	80 91 8e 02 	lds	r24, 0x028E	; 0x80028e <frog_row>
    1216:	81 50       	subi	r24, 0x01	; 1
    1218:	0e 94 16 07 	call	0xe2c	; 0xe2c <will_frog_die_at_position>
    121c:	80 93 8c 02 	sts	0x028C, r24	; 0x80028c <frog_dead>
		frog_row--;
    1220:	80 91 8e 02 	lds	r24, 0x028E	; 0x80028e <frog_row>
    1224:	81 50       	subi	r24, 0x01	; 1
    1226:	80 93 8e 02 	sts	0x028E, r24	; 0x80028e <frog_row>
		frog_column--;
    122a:	80 91 8d 02 	lds	r24, 0x028D	; 0x80028d <frog_column>
    122e:	81 50       	subi	r24, 0x01	; 1
    1230:	80 93 8d 02 	sts	0x028D, r24	; 0x80028d <frog_column>
		redraw_frog();
    1234:	0e 94 85 07 	call	0xf0a	; 0xf0a <redraw_frog>
    1238:	08 95       	ret

0000123a <move_frog_down_right>:

// Diagonal movement functions
void move_frog_down_right(void) {
	// If the frog is in the start row or in the left most column it will
	// die in it's position otherwise move the frog backward and redraw the frog.
	if((frog_row == START_ROW) || (frog_column == 0)) {
    123a:	80 91 8e 02 	lds	r24, 0x028E	; 0x80028e <frog_row>
    123e:	88 23       	and	r24, r24
    1240:	21 f0       	breq	.+8      	; 0x124a <move_frog_down_right+0x10>
    1242:	90 91 8d 02 	lds	r25, 0x028D	; 0x80028d <frog_column>
    1246:	91 11       	cpse	r25, r1
    1248:	04 c0       	rjmp	.+8      	; 0x1252 <move_frog_down_right+0x18>
		frog_dead = TRUE;
    124a:	81 e0       	ldi	r24, 0x01	; 1
    124c:	80 93 8c 02 	sts	0x028C, r24	; 0x80028c <frog_dead>
    1250:	08 95       	ret
	} else {
		redraw_row(frog_row);
    1252:	0e 94 fe 06 	call	0xdfc	; 0xdfc <redraw_row>
		frog_dead = will_frog_die_at_position(frog_row-1, frog_column+1);
    1256:	60 91 8d 02 	lds	r22, 0x028D	; 0x80028d <frog_column>
    125a:	6f 5f       	subi	r22, 0xFF	; 255
    125c:	80 91 8e 02 	lds	r24, 0x028E	; 0x80028e <frog_row>
    1260:	81 50       	subi	r24, 0x01	; 1
    1262:	0e 94 16 07 	call	0xe2c	; 0xe2c <will_frog_die_at_position>
    1266:	80 93 8c 02 	sts	0x028C, r24	; 0x80028c <frog_dead>
		frog_row--;
    126a:	80 91 8e 02 	lds	r24, 0x028E	; 0x80028e <frog_row>
    126e:	81 50       	subi	r24, 0x01	; 1
    1270:	80 93 8e 02 	sts	0x028E, r24	; 0x80028e <frog_row>
		frog_column++;
    1274:	80 91 8d 02 	lds	r24, 0x028D	; 0x80028d <frog_column>
    1278:	8f 5f       	subi	r24, 0xFF	; 255
    127a:	80 93 8d 02 	sts	0x028D, r24	; 0x80028d <frog_column>
		redraw_frog();
    127e:	0e 94 85 07 	call	0xf0a	; 0xf0a <redraw_frog>
    1282:	08 95       	ret

00001284 <scroll_vehicle_lane>:
uint8_t is_frog_dead(void) {
	return frog_dead;
}

// Scroll the given lane of traffic. (lane value must be 0 to 2)
void scroll_vehicle_lane(uint8_t lane, int8_t direction) {
    1284:	0f 93       	push	r16
    1286:	1f 93       	push	r17
    1288:	cf 93       	push	r28
    128a:	df 93       	push	r29
	uint8_t frog_is_in_this_row = (frog_row == lane + FIRST_VEHICLE_ROW);
    128c:	c0 91 8e 02 	lds	r28, 0x028E	; 0x80028e <frog_row>
    1290:	0c 2e       	mov	r0, r28
    1292:	00 0c       	add	r0, r0
    1294:	dd 0b       	sbc	r29, r29
    1296:	28 2f       	mov	r18, r24
    1298:	30 e0       	ldi	r19, 0x00	; 0
    129a:	89 01       	movw	r16, r18
    129c:	0f 5f       	subi	r16, 0xFF	; 255
    129e:	1f 4f       	sbci	r17, 0xFF	; 255

	// Work out the new lane position.
	// Wrap numbers around if they go out of range
	// A direction of -1 indicates movement to the left which means we
	// start from a higher bit position in column 0
	lane_position[lane] -= direction;
    12a0:	f9 01       	movw	r30, r18
    12a2:	e7 57       	subi	r30, 0x77	; 119
    12a4:	fd 4f       	sbci	r31, 0xFD	; 253
    12a6:	90 81       	ld	r25, Z
    12a8:	96 1b       	sub	r25, r22
	if(lane_position[lane] < 0) {
    12aa:	32 f4       	brpl	.+12     	; 0x12b8 <scroll_vehicle_lane+0x34>
		lane_position[lane] = LANE_DATA_WIDTH-1;
    12ac:	f9 01       	movw	r30, r18
    12ae:	e7 57       	subi	r30, 0x77	; 119
    12b0:	fd 4f       	sbci	r31, 0xFD	; 253
    12b2:	9f e3       	ldi	r25, 0x3F	; 63
    12b4:	90 83       	st	Z, r25
    12b6:	0b c0       	rjmp	.+22     	; 0x12ce <scroll_vehicle_lane+0x4a>
	}
	else if(lane_position[lane] >= LANE_DATA_WIDTH) {
    12b8:	90 34       	cpi	r25, 0x40	; 64
    12ba:	2c f4       	brge	.+10     	; 0x12c6 <scroll_vehicle_lane+0x42>

	// Work out the new lane position.
	// Wrap numbers around if they go out of range
	// A direction of -1 indicates movement to the left which means we
	// start from a higher bit position in column 0
	lane_position[lane] -= direction;
    12bc:	f9 01       	movw	r30, r18
    12be:	e7 57       	subi	r30, 0x77	; 119
    12c0:	fd 4f       	sbci	r31, 0xFD	; 253
    12c2:	90 83       	st	Z, r25
    12c4:	04 c0       	rjmp	.+8      	; 0x12ce <scroll_vehicle_lane+0x4a>
	if(lane_position[lane] < 0) {
		lane_position[lane] = LANE_DATA_WIDTH-1;
	}
	else if(lane_position[lane] >= LANE_DATA_WIDTH) {
		lane_position[lane] = 0;
    12c6:	f9 01       	movw	r30, r18
    12c8:	e7 57       	subi	r30, 0x77	; 119
    12ca:	fd 4f       	sbci	r31, 0xFD	; 253
    12cc:	10 82       	st	Z, r1
	}

	// Show the lane on the display
	redraw_traffic_lane(lane);
    12ce:	0e 94 4e 06 	call	0xc9c	; 0xc9c <redraw_traffic_lane>

	// If the frog is in this row, show it
	if(frog_is_in_this_row) {
    12d2:	c0 17       	cp	r28, r16
    12d4:	d1 07       	cpc	r29, r17
    12d6:	51 f4       	brne	.+20     	; 0x12ec <scroll_vehicle_lane+0x68>
		// Update whether the frog will be alive or not. (The frog hasn't moved but
		// it may have been hit by a vehicle.)
		frog_dead = will_frog_die_at_position(frog_row, frog_column);
    12d8:	60 91 8d 02 	lds	r22, 0x028D	; 0x80028d <frog_column>
    12dc:	80 91 8e 02 	lds	r24, 0x028E	; 0x80028e <frog_row>
    12e0:	0e 94 16 07 	call	0xe2c	; 0xe2c <will_frog_die_at_position>
    12e4:	80 93 8c 02 	sts	0x028C, r24	; 0x80028c <frog_dead>
		redraw_frog();
    12e8:	0e 94 85 07 	call	0xf0a	; 0xf0a <redraw_frog>
	}
}
    12ec:	df 91       	pop	r29
    12ee:	cf 91       	pop	r28
    12f0:	1f 91       	pop	r17
    12f2:	0f 91       	pop	r16
    12f4:	08 95       	ret

000012f6 <scroll_river_channel>:

void scroll_river_channel(uint8_t channel, int8_t direction) {
    12f6:	0f 93       	push	r16
    12f8:	1f 93       	push	r17
    12fa:	cf 93       	push	r28
    12fc:	df 93       	push	r29
	uint8_t frog_is_in_this_row = (frog_row == channel + FIRST_RIVER_ROW);
    12fe:	c0 91 8e 02 	lds	r28, 0x028E	; 0x80028e <frog_row>
    1302:	0c 2e       	mov	r0, r28
    1304:	00 0c       	add	r0, r0
    1306:	dd 0b       	sbc	r29, r29
    1308:	28 2f       	mov	r18, r24
    130a:	30 e0       	ldi	r19, 0x00	; 0
    130c:	89 01       	movw	r16, r18
    130e:	0b 5f       	subi	r16, 0xFB	; 251
    1310:	1f 4f       	sbci	r17, 0xFF	; 255
	// Note, if the frog is in this row then it will be on a log

	if(frog_is_in_this_row) {
    1312:	c0 17       	cp	r28, r16
    1314:	d1 07       	cpc	r29, r17
    1316:	c9 f4       	brne	.+50     	; 0x134a <scroll_river_channel+0x54>
		// Check if they're going to hit the edge - don't let the frog
		// go beyond the edge
		if(direction == 1 && frog_column == 15) {
    1318:	61 30       	cpi	r22, 0x01	; 1
    131a:	41 f4       	brne	.+16     	; 0x132c <scroll_river_channel+0x36>
    131c:	90 91 8d 02 	lds	r25, 0x028D	; 0x80028d <frog_column>
    1320:	9f 30       	cpi	r25, 0x0F	; 15
    1322:	71 f4       	brne	.+28     	; 0x1340 <scroll_river_channel+0x4a>
			frog_dead = 1; // hit right edge
    1324:	91 e0       	ldi	r25, 0x01	; 1
    1326:	90 93 8c 02 	sts	0x028C, r25	; 0x80028c <frog_dead>
    132a:	0f c0       	rjmp	.+30     	; 0x134a <scroll_river_channel+0x54>
		}
		else if(direction == -1 && frog_column == 0) {
    132c:	6f 3f       	cpi	r22, 0xFF	; 255
    132e:	41 f4       	brne	.+16     	; 0x1340 <scroll_river_channel+0x4a>
    1330:	90 91 8d 02 	lds	r25, 0x028D	; 0x80028d <frog_column>
    1334:	91 11       	cpse	r25, r1
    1336:	04 c0       	rjmp	.+8      	; 0x1340 <scroll_river_channel+0x4a>
			frog_dead = 1; // hit left edge
    1338:	91 e0       	ldi	r25, 0x01	; 1
    133a:	90 93 8c 02 	sts	0x028C, r25	; 0x80028c <frog_dead>
    133e:	05 c0       	rjmp	.+10     	; 0x134a <scroll_river_channel+0x54>
		}
		else {
			// Move the frog with the log - they're not going to hit the edge
			frog_column += direction;
    1340:	90 91 8d 02 	lds	r25, 0x028D	; 0x80028d <frog_column>
    1344:	96 0f       	add	r25, r22
    1346:	90 93 8d 02 	sts	0x028D, r25	; 0x80028d <frog_column>
		}
	}

	// Work out the new log position.
	// Wrap numbers around if they go out of range
	log_position[channel] -= direction;
    134a:	f9 01       	movw	r30, r18
    134c:	e9 57       	subi	r30, 0x79	; 121
    134e:	fd 4f       	sbci	r31, 0xFD	; 253
    1350:	90 81       	ld	r25, Z
    1352:	96 1b       	sub	r25, r22
	if(log_position[channel] < 0) {
    1354:	32 f4       	brpl	.+12     	; 0x1362 <scroll_river_channel+0x6c>
		log_position[channel] = LOG_DATA_WIDTH-1;
    1356:	f9 01       	movw	r30, r18
    1358:	e9 57       	subi	r30, 0x79	; 121
    135a:	fd 4f       	sbci	r31, 0xFD	; 253
    135c:	9f e1       	ldi	r25, 0x1F	; 31
    135e:	90 83       	st	Z, r25
    1360:	0b c0       	rjmp	.+22     	; 0x1378 <scroll_river_channel+0x82>
	} else if(log_position[channel] >= LOG_DATA_WIDTH) {
    1362:	90 32       	cpi	r25, 0x20	; 32
    1364:	2c f4       	brge	.+10     	; 0x1370 <scroll_river_channel+0x7a>
		}
	}

	// Work out the new log position.
	// Wrap numbers around if they go out of range
	log_position[channel] -= direction;
    1366:	f9 01       	movw	r30, r18
    1368:	e9 57       	subi	r30, 0x79	; 121
    136a:	fd 4f       	sbci	r31, 0xFD	; 253
    136c:	90 83       	st	Z, r25
    136e:	04 c0       	rjmp	.+8      	; 0x1378 <scroll_river_channel+0x82>
	if(log_position[channel] < 0) {
		log_position[channel] = LOG_DATA_WIDTH-1;
	} else if(log_position[channel] >= LOG_DATA_WIDTH) {
		log_position[channel] = 0;
    1370:	f9 01       	movw	r30, r18
    1372:	e9 57       	subi	r30, 0x79	; 121
    1374:	fd 4f       	sbci	r31, 0xFD	; 253
    1376:	10 82       	st	Z, r1
	}

	// Work out the log data to send to the display
	redraw_river_channel(channel);
    1378:	0e 94 a7 06 	call	0xd4e	; 0xd4e <redraw_river_channel>

	// If the frog is in this row, put them on the log
	if(frog_is_in_this_row) {
    137c:	c0 17       	cp	r28, r16
    137e:	d1 07       	cpc	r29, r17
    1380:	11 f4       	brne	.+4      	; 0x1386 <scroll_river_channel+0x90>
		redraw_frog();
    1382:	0e 94 85 07 	call	0xf0a	; 0xf0a <redraw_frog>
	}
}
    1386:	df 91       	pop	r29
    1388:	cf 91       	pop	r28
    138a:	1f 91       	pop	r17
    138c:	0f 91       	pop	r16
    138e:	08 95       	ret

00001390 <input_highscore>:
	draw_vertical_line(END_POS_X, START_POS_Y, END_POS_Y);
	set_display_attribute(FG_GREEN);
}

// Controls the logic for inputing a high score winners name
static void input_highscore(void) {
    1390:	4f 92       	push	r4
    1392:	5f 92       	push	r5
    1394:	6f 92       	push	r6
    1396:	7f 92       	push	r7
    1398:	8f 92       	push	r8
    139a:	9f 92       	push	r9
    139c:	af 92       	push	r10
    139e:	cf 92       	push	r12
    13a0:	df 92       	push	r13
    13a2:	ef 92       	push	r14
    13a4:	ff 92       	push	r15
    13a6:	1f 93       	push	r17
    13a8:	cf 93       	push	r28
    13aa:	df 93       	push	r29
    13ac:	e0 e9       	ldi	r30, 0x90	; 144
    13ae:	f2 e0       	ldi	r31, 0x02	; 2
    13b0:	8b e9       	ldi	r24, 0x9B	; 155
    13b2:	92 e0       	ldi	r25, 0x02	; 2
	// clears name_input
	for(uint8_t i = 0; i<MAX_NAME_SIZE; i++) {
		name_input[i] = 0;
    13b4:	11 92       	st	Z+, r1
}

// Controls the logic for inputing a high score winners name
static void input_highscore(void) {
	// clears name_input
	for(uint8_t i = 0; i<MAX_NAME_SIZE; i++) {
    13b6:	e8 17       	cp	r30, r24
    13b8:	f9 07       	cpc	r31, r25
    13ba:	e1 f7       	brne	.-8      	; 0x13b4 <input_highscore+0x24>
		name_input[i] = 0;
	}

	move_cursor(END_POS_X+5, START_POS_Y+4);
    13bc:	69 e0       	ldi	r22, 0x09	; 9
    13be:	70 e0       	ldi	r23, 0x00	; 0
    13c0:	8e e3       	ldi	r24, 0x3E	; 62
    13c2:	90 e0       	ldi	r25, 0x00	; 0
    13c4:	0e 94 9a 17 	call	0x2f34	; 0x2f34 <move_cursor>
	printf_P(PSTR("NEW HIGH SCORE!!"));
    13c8:	83 ec       	ldi	r24, 0xC3	; 195
    13ca:	90 e0       	ldi	r25, 0x00	; 0
    13cc:	9f 93       	push	r25
    13ce:	8f 93       	push	r24
    13d0:	0e 94 18 1b 	call	0x3630	; 0x3630 <printf_P>
	move_cursor(END_POS_X+5, START_POS_Y+6);
    13d4:	6b e0       	ldi	r22, 0x0B	; 11
    13d6:	70 e0       	ldi	r23, 0x00	; 0
    13d8:	8e e3       	ldi	r24, 0x3E	; 62
    13da:	90 e0       	ldi	r25, 0x00	; 0
    13dc:	0e 94 9a 17 	call	0x2f34	; 0x2f34 <move_cursor>
	printf_P(PSTR("Enter a name"));
    13e0:	86 eb       	ldi	r24, 0xB6	; 182
    13e2:	90 e0       	ldi	r25, 0x00	; 0
    13e4:	9f 93       	push	r25
    13e6:	8f 93       	push	r24
    13e8:	0e 94 18 1b 	call	0x3630	; 0x3630 <printf_P>
	move_cursor(INPUT_NAME_X, INPUT_NAME_Y);
    13ec:	6c e0       	ldi	r22, 0x0C	; 12
    13ee:	70 e0       	ldi	r23, 0x00	; 0
    13f0:	8e e3       	ldi	r24, 0x3E	; 62
    13f2:	90 e0       	ldi	r25, 0x00	; 0
    13f4:	0e 94 9a 17 	call	0x2f34	; 0x2f34 <move_cursor>
	show_cursor();
    13f8:	0e 94 e5 17 	call	0x2fca	; 0x2fca <show_cursor>
    13fc:	0f 90       	pop	r0
    13fe:	0f 90       	pop	r0
    1400:	0f 90       	pop	r0
    1402:	0f 90       	pop	r0

	uint8_t i = 0;
    1404:	10 e0       	ldi	r17, 0x00	; 0
				move_cursor(INPUT_NAME_X+i, INPUT_NAME_Y);
				clear_to_end_of_line();
			}
			else if((escape_sequence_char == LEFT_CURSOR) && (i > 0)) {
				i--;
				name_input[i] = 0;
    1406:	c0 e9       	ldi	r28, 0x90	; 144
    1408:	d2 e0       	ldi	r29, 0x02	; 2
				move_cursor(INPUT_NAME_X, INPUT_NAME_Y);
				printf_P(PSTR("%s"), name_input);
    140a:	0f 2e       	mov	r0, r31
    140c:	f0 eb       	ldi	r31, 0xB0	; 176
    140e:	cf 2e       	mov	r12, r31
    1410:	f0 e0       	ldi	r31, 0x00	; 0
    1412:	df 2e       	mov	r13, r31
    1414:	f0 2d       	mov	r31, r0
			(serial_input >= 97 && serial_input <= 122)) &&
			(i < 10)) {
				name_input[i] = serial_input;
				i++;
				move_cursor(INPUT_NAME_X, INPUT_NAME_Y);
				printf_P(PSTR("%s"), name_input);
    1416:	0f 2e       	mov	r0, r31
    1418:	f3 eb       	ldi	r31, 0xB3	; 179
    141a:	4f 2e       	mov	r4, r31
    141c:	f0 e0       	ldi	r31, 0x00	; 0
    141e:	5f 2e       	mov	r5, r31
    1420:	f0 2d       	mov	r31, r0

// Processes the serial input for escape characters
static void process_serial_in(void) {
	if(serial_input_available()) {
		// Serial data was available - read the data from standard input
		serial_input = fgetc(stdin);
    1422:	0f 2e       	mov	r0, r31
    1424:	ff ef       	ldi	r31, 0xFF	; 255
    1426:	ef 2e       	mov	r14, r31
    1428:	f3 e0       	ldi	r31, 0x03	; 3
    142a:	ff 2e       	mov	r15, r31
    142c:	f0 2d       	mov	r31, r0
			serial_input = -1; // Don't further process this character
		}
		else if(characters_into_escape_sequence == 2) {
			// Third (and last) character in the escape sequence
			escape_sequence_char = serial_input;			
			serial_input = -1;  // Don't further process this character - we
    142e:	aa 24       	eor	r10, r10
    1430:	aa 94       	dec	r10
			characters_into_escape_sequence++;
			serial_input = -1; // Don't further process this character
		}
		else if(characters_into_escape_sequence == 1 && serial_input == '[') {
			// We've hit the second character in an escape sequence
			characters_into_escape_sequence++;
    1432:	68 94       	set
    1434:	66 24       	eor	r6, r6
    1436:	61 f8       	bld	r6, 1
		// Serial data was available - read the data from standard input
		serial_input = fgetc(stdin);
		// Check if the character is part of an escape sequence
		if(characters_into_escape_sequence == 0 && serial_input == ESCAPE_CHAR) {
			// We've hit the first character in an escape sequence (escape)
			characters_into_escape_sequence++;
    1438:	77 24       	eor	r7, r7
    143a:	73 94       	inc	r7
	move_cursor(INPUT_NAME_X, INPUT_NAME_Y);
	show_cursor();

	uint8_t i = 0;
	while(1) {
		if(serial_input_available()) {
    143c:	0e 94 cb 16 	call	0x2d96	; 0x2d96 <serial_input_available>
    1440:	88 23       	and	r24, r24
    1442:	e1 f3       	breq	.-8      	; 0x143c <input_highscore+0xac>
			
			set_display_attribute(FG_CYAN);
    1444:	84 e2       	ldi	r24, 0x24	; 36
    1446:	0e 94 cf 17 	call	0x2f9e	; 0x2f9e <set_display_attribute>
	set_display_attribute(FG_GREEN);
}

// Processes the serial input for escape characters
static void process_serial_in(void) {
	if(serial_input_available()) {
    144a:	0e 94 cb 16 	call	0x2d96	; 0x2d96 <serial_input_available>
    144e:	88 23       	and	r24, r24
    1450:	31 f1       	breq	.+76     	; 0x149e <input_highscore+0x10e>
		// Serial data was available - read the data from standard input
		serial_input = fgetc(stdin);
    1452:	f7 01       	movw	r30, r14
    1454:	80 81       	ld	r24, Z
    1456:	91 81       	ldd	r25, Z+1	; 0x01
    1458:	0e 94 da 1a 	call	0x35b4	; 0x35b4 <fgetc>
    145c:	80 93 9c 02 	sts	0x029C, r24	; 0x80029c <serial_input>
		// Check if the character is part of an escape sequence
		if(characters_into_escape_sequence == 0 && serial_input == ESCAPE_CHAR) {
    1460:	90 91 69 01 	lds	r25, 0x0169	; 0x800169 <characters_into_escape_sequence>
    1464:	91 11       	cpse	r25, r1
    1466:	07 c0       	rjmp	.+14     	; 0x1476 <input_highscore+0xe6>
    1468:	8b 31       	cpi	r24, 0x1B	; 27
    146a:	b9 f4       	brne	.+46     	; 0x149a <input_highscore+0x10a>
			// We've hit the first character in an escape sequence (escape)
			characters_into_escape_sequence++;
    146c:	70 92 69 01 	sts	0x0169, r7	; 0x800169 <characters_into_escape_sequence>
			serial_input = -1; // Don't further process this character
    1470:	a0 92 9c 02 	sts	0x029C, r10	; 0x80029c <serial_input>
    1474:	82 c0       	rjmp	.+260    	; 0x157a <input_highscore+0x1ea>
		}
		else if(characters_into_escape_sequence == 1 && serial_input == '[') {
    1476:	91 30       	cpi	r25, 0x01	; 1
    1478:	39 f4       	brne	.+14     	; 0x1488 <input_highscore+0xf8>
    147a:	8b 35       	cpi	r24, 0x5B	; 91
    147c:	71 f4       	brne	.+28     	; 0x149a <input_highscore+0x10a>
			// We've hit the second character in an escape sequence
			characters_into_escape_sequence++;
    147e:	60 92 69 01 	sts	0x0169, r6	; 0x800169 <characters_into_escape_sequence>
			serial_input = -1; // Don't further process this character
    1482:	a0 92 9c 02 	sts	0x029C, r10	; 0x80029c <serial_input>
    1486:	79 c0       	rjmp	.+242    	; 0x157a <input_highscore+0x1ea>
		}
		else if(characters_into_escape_sequence == 2) {
    1488:	92 30       	cpi	r25, 0x02	; 2
    148a:	39 f4       	brne	.+14     	; 0x149a <input_highscore+0x10a>
			// Third (and last) character in the escape sequence
			escape_sequence_char = serial_input;			
    148c:	80 93 9b 02 	sts	0x029B, r24	; 0x80029b <escape_sequence_char>
			serial_input = -1;  // Don't further process this character - we
    1490:	a0 92 9c 02 	sts	0x029C, r10	; 0x80029c <serial_input>
			// deal with it as part of the escape sequence
			characters_into_escape_sequence = 0;
    1494:	10 92 69 01 	sts	0x0169, r1	; 0x800169 <characters_into_escape_sequence>
    1498:	70 c0       	rjmp	.+224    	; 0x157a <input_highscore+0x1ea>
		}
		else {
			// Character was not part of an escape sequence (or we received
			// an invalid second character in the sequence). We'll process
			// the data in the serial_input variable.
			characters_into_escape_sequence = 0;
    149a:	10 92 69 01 	sts	0x0169, r1	; 0x800169 <characters_into_escape_sequence>
		if(serial_input_available()) {
			
			set_display_attribute(FG_CYAN);
			process_serial_in();
			
			if(serial_input == ENTER) {
    149e:	80 91 9c 02 	lds	r24, 0x029C	; 0x80029c <serial_input>
    14a2:	8a 30       	cpi	r24, 0x0A	; 10
    14a4:	09 f4       	brne	.+2      	; 0x14a8 <input_highscore+0x118>
    14a6:	53 c0       	rjmp	.+166    	; 0x154e <input_highscore+0x1be>
				break;
			}
			else if(((serial_input == SPACE) ||
    14a8:	80 32       	cpi	r24, 0x20	; 32
    14aa:	29 f0       	breq	.+10     	; 0x14b6 <input_highscore+0x126>
    14ac:	98 2f       	mov	r25, r24
    14ae:	9f 7d       	andi	r25, 0xDF	; 223
    14b0:	91 54       	subi	r25, 0x41	; 65
    14b2:	9a 31       	cpi	r25, 0x1A	; 26
    14b4:	10 f5       	brcc	.+68     	; 0x14fa <input_highscore+0x16a>
			(serial_input >= 65 && serial_input <= 90) ||
			(serial_input >= 97 && serial_input <= 122)) &&
    14b6:	1a 30       	cpi	r17, 0x0A	; 10
    14b8:	00 f5       	brcc	.+64     	; 0x14fa <input_highscore+0x16a>
			(i < 10)) {
				name_input[i] = serial_input;
    14ba:	e1 2f       	mov	r30, r17
    14bc:	f0 e0       	ldi	r31, 0x00	; 0
    14be:	e0 57       	subi	r30, 0x70	; 112
    14c0:	fd 4f       	sbci	r31, 0xFD	; 253
    14c2:	80 83       	st	Z, r24
				i++;
    14c4:	1f 5f       	subi	r17, 0xFF	; 255
				move_cursor(INPUT_NAME_X, INPUT_NAME_Y);
    14c6:	6c e0       	ldi	r22, 0x0C	; 12
    14c8:	70 e0       	ldi	r23, 0x00	; 0
    14ca:	8e e3       	ldi	r24, 0x3E	; 62
    14cc:	90 e0       	ldi	r25, 0x00	; 0
    14ce:	0e 94 9a 17 	call	0x2f34	; 0x2f34 <move_cursor>
				printf_P(PSTR("%s"), name_input);
    14d2:	df 93       	push	r29
    14d4:	cf 93       	push	r28
    14d6:	5f 92       	push	r5
    14d8:	4f 92       	push	r4
    14da:	0e 94 18 1b 	call	0x3630	; 0x3630 <printf_P>
				move_cursor(INPUT_NAME_X+i, INPUT_NAME_Y);
    14de:	81 2f       	mov	r24, r17
    14e0:	90 e0       	ldi	r25, 0x00	; 0
    14e2:	6c e0       	ldi	r22, 0x0C	; 12
    14e4:	70 e0       	ldi	r23, 0x00	; 0
    14e6:	ce 96       	adiw	r24, 0x3e	; 62
    14e8:	0e 94 9a 17 	call	0x2f34	; 0x2f34 <move_cursor>
				clear_to_end_of_line();
    14ec:	0e 94 c6 17 	call	0x2f8c	; 0x2f8c <clear_to_end_of_line>
    14f0:	0f 90       	pop	r0
    14f2:	0f 90       	pop	r0
    14f4:	0f 90       	pop	r0
    14f6:	0f 90       	pop	r0
    14f8:	25 c0       	rjmp	.+74     	; 0x1544 <input_highscore+0x1b4>
			}
			else if((escape_sequence_char == LEFT_CURSOR) && (i > 0)) {
    14fa:	80 91 9b 02 	lds	r24, 0x029B	; 0x80029b <escape_sequence_char>
    14fe:	84 34       	cpi	r24, 0x44	; 68
    1500:	09 f5       	brne	.+66     	; 0x1544 <input_highscore+0x1b4>
    1502:	11 23       	and	r17, r17
    1504:	f9 f0       	breq	.+62     	; 0x1544 <input_highscore+0x1b4>
				i--;
    1506:	11 50       	subi	r17, 0x01	; 1
				name_input[i] = 0;
    1508:	81 2e       	mov	r8, r17
    150a:	91 2c       	mov	r9, r1
    150c:	f4 01       	movw	r30, r8
    150e:	e0 57       	subi	r30, 0x70	; 112
    1510:	fd 4f       	sbci	r31, 0xFD	; 253
    1512:	10 82       	st	Z, r1
				move_cursor(INPUT_NAME_X, INPUT_NAME_Y);
    1514:	6c e0       	ldi	r22, 0x0C	; 12
    1516:	70 e0       	ldi	r23, 0x00	; 0
    1518:	8e e3       	ldi	r24, 0x3E	; 62
    151a:	90 e0       	ldi	r25, 0x00	; 0
    151c:	0e 94 9a 17 	call	0x2f34	; 0x2f34 <move_cursor>
				printf_P(PSTR("%s"), name_input);
    1520:	df 93       	push	r29
    1522:	cf 93       	push	r28
    1524:	df 92       	push	r13
    1526:	cf 92       	push	r12
    1528:	0e 94 18 1b 	call	0x3630	; 0x3630 <printf_P>
				move_cursor(INPUT_NAME_X+i, INPUT_NAME_Y);
    152c:	6c e0       	ldi	r22, 0x0C	; 12
    152e:	70 e0       	ldi	r23, 0x00	; 0
    1530:	c4 01       	movw	r24, r8
    1532:	ce 96       	adiw	r24, 0x3e	; 62
    1534:	0e 94 9a 17 	call	0x2f34	; 0x2f34 <move_cursor>
				clear_to_end_of_line();
    1538:	0e 94 c6 17 	call	0x2f8c	; 0x2f8c <clear_to_end_of_line>
    153c:	0f 90       	pop	r0
    153e:	0f 90       	pop	r0
    1540:	0f 90       	pop	r0
    1542:	0f 90       	pop	r0
			}
			serial_input = NO_INPUT;
    1544:	a0 92 9c 02 	sts	0x029C, r10	; 0x80029c <serial_input>
			escape_sequence_char = NO_INPUT;
    1548:	a0 92 9b 02 	sts	0x029B, r10	; 0x80029b <escape_sequence_char>
    154c:	77 cf       	rjmp	.-274    	; 0x143c <input_highscore+0xac>
		}
	}
	hide_cursor();
    154e:	0e 94 dc 17 	call	0x2fb8	; 0x2fb8 <hide_cursor>
	move_cursor(INPUT_NAME_X, INPUT_NAME_Y);
    1552:	6c e0       	ldi	r22, 0x0C	; 12
    1554:	70 e0       	ldi	r23, 0x00	; 0
    1556:	8e e3       	ldi	r24, 0x3E	; 62
    1558:	90 e0       	ldi	r25, 0x00	; 0
    155a:	0e 94 9a 17 	call	0x2f34	; 0x2f34 <move_cursor>
	clear_to_end_of_line();
    155e:	0e 94 c6 17 	call	0x2f8c	; 0x2f8c <clear_to_end_of_line>
	move_cursor(INPUT_NAME_X, INPUT_NAME_Y-1);
    1562:	6b e0       	ldi	r22, 0x0B	; 11
    1564:	70 e0       	ldi	r23, 0x00	; 0
    1566:	8e e3       	ldi	r24, 0x3E	; 62
    1568:	90 e0       	ldi	r25, 0x00	; 0
    156a:	0e 94 9a 17 	call	0x2f34	; 0x2f34 <move_cursor>
	clear_to_end_of_line();
    156e:	0e 94 c6 17 	call	0x2f8c	; 0x2f8c <clear_to_end_of_line>
	set_display_attribute(FG_GREEN);
    1572:	80 e2       	ldi	r24, 0x20	; 32
    1574:	0e 94 cf 17 	call	0x2f9e	; 0x2f9e <set_display_attribute>
}
    1578:	03 c0       	rjmp	.+6      	; 0x1580 <input_highscore+0x1f0>
		if(serial_input_available()) {
			
			set_display_attribute(FG_CYAN);
			process_serial_in();
			
			if(serial_input == ENTER) {
    157a:	80 91 9c 02 	lds	r24, 0x029C	; 0x80029c <serial_input>
    157e:	96 cf       	rjmp	.-212    	; 0x14ac <input_highscore+0x11c>
	move_cursor(INPUT_NAME_X, INPUT_NAME_Y);
	clear_to_end_of_line();
	move_cursor(INPUT_NAME_X, INPUT_NAME_Y-1);
	clear_to_end_of_line();
	set_display_attribute(FG_GREEN);
}
    1580:	df 91       	pop	r29
    1582:	cf 91       	pop	r28
    1584:	1f 91       	pop	r17
    1586:	ff 90       	pop	r15
    1588:	ef 90       	pop	r14
    158a:	df 90       	pop	r13
    158c:	cf 90       	pop	r12
    158e:	af 90       	pop	r10
    1590:	9f 90       	pop	r9
    1592:	8f 90       	pop	r8
    1594:	7f 90       	pop	r7
    1596:	6f 90       	pop	r6
    1598:	5f 90       	pop	r5
    159a:	4f 90       	pop	r4
    159c:	08 95       	ret

0000159e <init_highscore>:

// Initialises the hardware for high score use. If the hardware has not already
// been initialised before then space will be allocated and readied for use in the
// future.
void init_highscore(void) {
	uint32_t temp = eeprom_read_dword(&signiture);
    159e:	8b e4       	ldi	r24, 0x4B	; 75
    15a0:	90 e0       	ldi	r25, 0x00	; 0
    15a2:	0e 94 e6 1d 	call	0x3bcc	; 0x3bcc <eeprom_read_dword>
	if(temp != SIGNITURE) {
    15a6:	6c 3c       	cpi	r22, 0xCC	; 204
    15a8:	7d 49       	sbci	r23, 0x9D	; 157
    15aa:	83 4a       	sbci	r24, 0xA3	; 163
    15ac:	92 40       	sbci	r25, 0x02	; 2
    15ae:	09 f4       	brne	.+2      	; 0x15b2 <init_highscore+0x14>
    15b0:	53 c0       	rjmp	.+166    	; 0x1658 <init_highscore+0xba>
		// EEPROM not initalised for highscores
		// sets the signiture for the EEPROM memory
		eeprom_update_dword(&signiture, (uint32_t)SIGNITURE);
    15b2:	4c ec       	ldi	r20, 0xCC	; 204
    15b4:	5d e9       	ldi	r21, 0x9D	; 157
    15b6:	63 ea       	ldi	r22, 0xA3	; 163
    15b8:	72 e0       	ldi	r23, 0x02	; 2
    15ba:	8b e4       	ldi	r24, 0x4B	; 75
    15bc:	90 e0       	ldi	r25, 0x00	; 0
    15be:	0e 94 0e 1e 	call	0x3c1c	; 0x3c1c <eeprom_update_dword>
		// set all names to "NO NAME"
		eeprom_update_block((const void*)NO_NAME, (void*)rank1_name, MAX_NAME_SIZE);
    15c2:	4b e0       	ldi	r20, 0x0B	; 11
    15c4:	50 e0       	ldi	r21, 0x00	; 0
    15c6:	60 e4       	ldi	r22, 0x40	; 64
    15c8:	70 e0       	ldi	r23, 0x00	; 0
    15ca:	8e e9       	ldi	r24, 0x9E	; 158
    15cc:	91 e0       	ldi	r25, 0x01	; 1
    15ce:	0e 94 ec 1d 	call	0x3bd8	; 0x3bd8 <eeprom_update_block>
		eeprom_update_block((const void*)NO_NAME, (void*)rank2_name, MAX_NAME_SIZE);
    15d2:	4b e0       	ldi	r20, 0x0B	; 11
    15d4:	50 e0       	ldi	r21, 0x00	; 0
    15d6:	65 e3       	ldi	r22, 0x35	; 53
    15d8:	70 e0       	ldi	r23, 0x00	; 0
    15da:	8e e9       	ldi	r24, 0x9E	; 158
    15dc:	91 e0       	ldi	r25, 0x01	; 1
    15de:	0e 94 ec 1d 	call	0x3bd8	; 0x3bd8 <eeprom_update_block>
		eeprom_update_block((const void*)NO_NAME, (void*)rank3_name, MAX_NAME_SIZE);
    15e2:	4b e0       	ldi	r20, 0x0B	; 11
    15e4:	50 e0       	ldi	r21, 0x00	; 0
    15e6:	6a e2       	ldi	r22, 0x2A	; 42
    15e8:	70 e0       	ldi	r23, 0x00	; 0
    15ea:	8e e9       	ldi	r24, 0x9E	; 158
    15ec:	91 e0       	ldi	r25, 0x01	; 1
    15ee:	0e 94 ec 1d 	call	0x3bd8	; 0x3bd8 <eeprom_update_block>
		eeprom_update_block((const void*)NO_NAME, (void*)rank4_name, MAX_NAME_SIZE);
    15f2:	4b e0       	ldi	r20, 0x0B	; 11
    15f4:	50 e0       	ldi	r21, 0x00	; 0
    15f6:	6f e1       	ldi	r22, 0x1F	; 31
    15f8:	70 e0       	ldi	r23, 0x00	; 0
    15fa:	8e e9       	ldi	r24, 0x9E	; 158
    15fc:	91 e0       	ldi	r25, 0x01	; 1
    15fe:	0e 94 ec 1d 	call	0x3bd8	; 0x3bd8 <eeprom_update_block>
		eeprom_update_block((const void*)NO_NAME, (void*)rank5_name, MAX_NAME_SIZE);
    1602:	4b e0       	ldi	r20, 0x0B	; 11
    1604:	50 e0       	ldi	r21, 0x00	; 0
    1606:	64 e1       	ldi	r22, 0x14	; 20
    1608:	70 e0       	ldi	r23, 0x00	; 0
    160a:	8e e9       	ldi	r24, 0x9E	; 158
    160c:	91 e0       	ldi	r25, 0x01	; 1
    160e:	0e 94 ec 1d 	call	0x3bd8	; 0x3bd8 <eeprom_update_block>
		// set all highscores to 0
		eeprom_update_dword(&rank1_score, (uint32_t)NO_SCORE);
    1612:	40 e0       	ldi	r20, 0x00	; 0
    1614:	50 e0       	ldi	r21, 0x00	; 0
    1616:	ba 01       	movw	r22, r20
    1618:	80 e1       	ldi	r24, 0x10	; 16
    161a:	90 e0       	ldi	r25, 0x00	; 0
    161c:	0e 94 0e 1e 	call	0x3c1c	; 0x3c1c <eeprom_update_dword>
		eeprom_update_dword(&rank2_score, (uint32_t)NO_SCORE);
    1620:	40 e0       	ldi	r20, 0x00	; 0
    1622:	50 e0       	ldi	r21, 0x00	; 0
    1624:	ba 01       	movw	r22, r20
    1626:	8c e0       	ldi	r24, 0x0C	; 12
    1628:	90 e0       	ldi	r25, 0x00	; 0
    162a:	0e 94 0e 1e 	call	0x3c1c	; 0x3c1c <eeprom_update_dword>
		eeprom_update_dword(&rank3_score, (uint32_t)NO_SCORE);
    162e:	40 e0       	ldi	r20, 0x00	; 0
    1630:	50 e0       	ldi	r21, 0x00	; 0
    1632:	ba 01       	movw	r22, r20
    1634:	88 e0       	ldi	r24, 0x08	; 8
    1636:	90 e0       	ldi	r25, 0x00	; 0
    1638:	0e 94 0e 1e 	call	0x3c1c	; 0x3c1c <eeprom_update_dword>
		eeprom_update_dword(&rank4_score, (uint32_t)NO_SCORE);
    163c:	40 e0       	ldi	r20, 0x00	; 0
    163e:	50 e0       	ldi	r21, 0x00	; 0
    1640:	ba 01       	movw	r22, r20
    1642:	84 e0       	ldi	r24, 0x04	; 4
    1644:	90 e0       	ldi	r25, 0x00	; 0
    1646:	0e 94 0e 1e 	call	0x3c1c	; 0x3c1c <eeprom_update_dword>
		eeprom_update_dword(&rank5_score, (uint32_t)NO_SCORE);
    164a:	40 e0       	ldi	r20, 0x00	; 0
    164c:	50 e0       	ldi	r21, 0x00	; 0
    164e:	ba 01       	movw	r22, r20
    1650:	80 e0       	ldi	r24, 0x00	; 0
    1652:	90 e0       	ldi	r25, 0x00	; 0
    1654:	0e 94 0e 1e 	call	0x3c1c	; 0x3c1c <eeprom_update_dword>
    1658:	08 95       	ret

0000165a <draw_highscore_screen>:
}

// Draws the highscore screen to the terminal and collects all highscores from
// memory and displayes it. If the game_over flag has been set and a highscore
// achieved input will be requested by the user for the new highscore.
void draw_highscore_screen(void) {
    165a:	4f 92       	push	r4
    165c:	5f 92       	push	r5
    165e:	6f 92       	push	r6
    1660:	7f 92       	push	r7
    1662:	8f 92       	push	r8
    1664:	9f 92       	push	r9
    1666:	af 92       	push	r10
    1668:	bf 92       	push	r11
    166a:	cf 92       	push	r12
    166c:	df 92       	push	r13
    166e:	ef 92       	push	r14
    1670:	ff 92       	push	r15
    1672:	cf 93       	push	r28
    1674:	df 93       	push	r29
    1676:	cd b7       	in	r28, 0x3d	; 61
    1678:	de b7       	in	r29, 0x3e	; 62
    167a:	ef 97       	sbiw	r28, 0x3f	; 63
    167c:	0f b6       	in	r0, 0x3f	; 63
    167e:	f8 94       	cli
    1680:	de bf       	out	0x3e, r29	; 62
    1682:	0f be       	out	0x3f, r0	; 63
    1684:	cd bf       	out	0x3d, r28	; 61
/////////////////////////////// Private (Helper) Functions /////////////////////

// Draws the border for the highscore screen
static void terminal_draw_border(void) {
	// Top horizontal border line
	set_display_attribute(FG_MAGENTA);
    1686:	83 e2       	ldi	r24, 0x23	; 35
    1688:	0e 94 cf 17 	call	0x2f9e	; 0x2f9e <set_display_attribute>
	draw_horizontal_line(START_POS_Y, START_POS_X, END_POS_X);
    168c:	49 e3       	ldi	r20, 0x39	; 57
    168e:	67 e1       	ldi	r22, 0x17	; 23
    1690:	85 e0       	ldi	r24, 0x05	; 5
    1692:	0e 94 ee 17 	call	0x2fdc	; 0x2fdc <draw_horizontal_line>
	// Bottom horizontal border line
	set_display_attribute(FG_MAGENTA);
    1696:	83 e2       	ldi	r24, 0x23	; 35
    1698:	0e 94 cf 17 	call	0x2f9e	; 0x2f9e <set_display_attribute>
	draw_horizontal_line(END_POS_Y, START_POS_X, END_POS_X);
    169c:	49 e3       	ldi	r20, 0x39	; 57
    169e:	67 e1       	ldi	r22, 0x17	; 23
    16a0:	87 e1       	ldi	r24, 0x17	; 23
    16a2:	0e 94 ee 17 	call	0x2fdc	; 0x2fdc <draw_horizontal_line>
	// Left vertical border line
	set_display_attribute(FG_MAGENTA);
    16a6:	83 e2       	ldi	r24, 0x23	; 35
    16a8:	0e 94 cf 17 	call	0x2f9e	; 0x2f9e <set_display_attribute>
	draw_vertical_line(START_POS_X, START_POS_Y, END_POS_Y);
    16ac:	47 e1       	ldi	r20, 0x17	; 23
    16ae:	65 e0       	ldi	r22, 0x05	; 5
    16b0:	87 e1       	ldi	r24, 0x17	; 23
    16b2:	0e 94 0b 18 	call	0x3016	; 0x3016 <draw_vertical_line>
	// Right vertical border line
	set_display_attribute(FG_MAGENTA);
    16b6:	83 e2       	ldi	r24, 0x23	; 35
    16b8:	0e 94 cf 17 	call	0x2f9e	; 0x2f9e <set_display_attribute>
	draw_vertical_line(END_POS_X, START_POS_Y, END_POS_Y);
    16bc:	47 e1       	ldi	r20, 0x17	; 23
    16be:	65 e0       	ldi	r22, 0x05	; 5
    16c0:	89 e3       	ldi	r24, 0x39	; 57
    16c2:	0e 94 0b 18 	call	0x3016	; 0x3016 <draw_vertical_line>
	set_display_attribute(FG_GREEN);
    16c6:	80 e2       	ldi	r24, 0x20	; 32
    16c8:	0e 94 cf 17 	call	0x2f9e	; 0x2f9e <set_display_attribute>
	uint8_t temp_rank1_name[MAX_NAME_SIZE];
	uint8_t temp_rank2_name[MAX_NAME_SIZE];
	uint8_t temp_rank3_name[MAX_NAME_SIZE];
	uint8_t temp_rank4_name[MAX_NAME_SIZE];
	uint8_t temp_rank5_name[MAX_NAME_SIZE];
	eeprom_read_block((void*)temp_rank1_name,(const void*)rank1_name,MAX_NAME_SIZE);
    16cc:	4b e0       	ldi	r20, 0x0B	; 11
    16ce:	50 e0       	ldi	r21, 0x00	; 0
    16d0:	60 e4       	ldi	r22, 0x40	; 64
    16d2:	70 e0       	ldi	r23, 0x00	; 0
    16d4:	ce 01       	movw	r24, r28
    16d6:	01 96       	adiw	r24, 0x01	; 1
    16d8:	0e 94 d6 1d 	call	0x3bac	; 0x3bac <eeprom_read_block>
	eeprom_read_block((void*)temp_rank2_name,(const void*)rank2_name,MAX_NAME_SIZE);
    16dc:	4b e0       	ldi	r20, 0x0B	; 11
    16de:	50 e0       	ldi	r21, 0x00	; 0
    16e0:	65 e3       	ldi	r22, 0x35	; 53
    16e2:	70 e0       	ldi	r23, 0x00	; 0
    16e4:	ce 01       	movw	r24, r28
    16e6:	0c 96       	adiw	r24, 0x0c	; 12
    16e8:	0e 94 d6 1d 	call	0x3bac	; 0x3bac <eeprom_read_block>
	eeprom_read_block((void*)temp_rank3_name,(const void*)rank3_name,MAX_NAME_SIZE);
    16ec:	4b e0       	ldi	r20, 0x0B	; 11
    16ee:	50 e0       	ldi	r21, 0x00	; 0
    16f0:	6a e2       	ldi	r22, 0x2A	; 42
    16f2:	70 e0       	ldi	r23, 0x00	; 0
    16f4:	ce 01       	movw	r24, r28
    16f6:	47 96       	adiw	r24, 0x17	; 23
    16f8:	0e 94 d6 1d 	call	0x3bac	; 0x3bac <eeprom_read_block>
	eeprom_read_block((void*)temp_rank4_name,(const void*)rank4_name,MAX_NAME_SIZE);
    16fc:	4b e0       	ldi	r20, 0x0B	; 11
    16fe:	50 e0       	ldi	r21, 0x00	; 0
    1700:	6f e1       	ldi	r22, 0x1F	; 31
    1702:	70 e0       	ldi	r23, 0x00	; 0
    1704:	ce 01       	movw	r24, r28
    1706:	82 96       	adiw	r24, 0x22	; 34
    1708:	0e 94 d6 1d 	call	0x3bac	; 0x3bac <eeprom_read_block>
	eeprom_read_block((void*)temp_rank5_name,(const void*)rank5_name,MAX_NAME_SIZE);
    170c:	4b e0       	ldi	r20, 0x0B	; 11
    170e:	50 e0       	ldi	r21, 0x00	; 0
    1710:	64 e1       	ldi	r22, 0x14	; 20
    1712:	70 e0       	ldi	r23, 0x00	; 0
    1714:	ce 01       	movw	r24, r28
    1716:	8d 96       	adiw	r24, 0x2d	; 45
    1718:	0e 94 d6 1d 	call	0x3bac	; 0x3bac <eeprom_read_block>

	uint32_t temp_rank1_score = eeprom_read_dword(&rank1_score);
    171c:	80 e1       	ldi	r24, 0x10	; 16
    171e:	90 e0       	ldi	r25, 0x00	; 0
    1720:	0e 94 e6 1d 	call	0x3bcc	; 0x3bcc <eeprom_read_dword>
    1724:	6b 01       	movw	r12, r22
    1726:	7c 01       	movw	r14, r24
	uint32_t temp_rank2_score = eeprom_read_dword(&rank2_score);
    1728:	8c e0       	ldi	r24, 0x0C	; 12
    172a:	90 e0       	ldi	r25, 0x00	; 0
    172c:	0e 94 e6 1d 	call	0x3bcc	; 0x3bcc <eeprom_read_dword>
    1730:	4b 01       	movw	r8, r22
    1732:	5c 01       	movw	r10, r24
	uint32_t temp_rank3_score = eeprom_read_dword(&rank3_score);
    1734:	88 e0       	ldi	r24, 0x08	; 8
    1736:	90 e0       	ldi	r25, 0x00	; 0
    1738:	0e 94 e6 1d 	call	0x3bcc	; 0x3bcc <eeprom_read_dword>
    173c:	2b 01       	movw	r4, r22
    173e:	3c 01       	movw	r6, r24
	uint32_t temp_rank4_score = eeprom_read_dword(&rank4_score);
    1740:	84 e0       	ldi	r24, 0x04	; 4
    1742:	90 e0       	ldi	r25, 0x00	; 0
    1744:	0e 94 e6 1d 	call	0x3bcc	; 0x3bcc <eeprom_read_dword>
    1748:	68 af       	std	Y+56, r22	; 0x38
    174a:	79 af       	std	Y+57, r23	; 0x39
    174c:	8a af       	std	Y+58, r24	; 0x3a
    174e:	9b af       	std	Y+59, r25	; 0x3b
	uint32_t temp_rank5_score = eeprom_read_dword(&rank5_score);
    1750:	80 e0       	ldi	r24, 0x00	; 0
    1752:	90 e0       	ldi	r25, 0x00	; 0
    1754:	0e 94 e6 1d 	call	0x3bcc	; 0x3bcc <eeprom_read_dword>
    1758:	6c af       	std	Y+60, r22	; 0x3c
    175a:	7d af       	std	Y+61, r23	; 0x3d
    175c:	8e af       	std	Y+62, r24	; 0x3e
    175e:	9f af       	std	Y+63, r25	; 0x3f

	// draws the words that will always be displayed during a highscore screen
	move_cursor(START_POS_X +13 ,START_POS_Y+2);
    1760:	67 e0       	ldi	r22, 0x07	; 7
    1762:	70 e0       	ldi	r23, 0x00	; 0
    1764:	84 e2       	ldi	r24, 0x24	; 36
    1766:	90 e0       	ldi	r25, 0x00	; 0
    1768:	0e 94 9a 17 	call	0x2f34	; 0x2f34 <move_cursor>
	printf_P(PSTR("Highscore"));
    176c:	86 e2       	ldi	r24, 0x26	; 38
    176e:	91 e0       	ldi	r25, 0x01	; 1
    1770:	9f 93       	push	r25
    1772:	8f 93       	push	r24
    1774:	0e 94 18 1b 	call	0x3630	; 0x3630 <printf_P>

	move_cursor(RANK,CELL);
    1778:	69 e0       	ldi	r22, 0x09	; 9
    177a:	70 e0       	ldi	r23, 0x00	; 0
    177c:	8a e1       	ldi	r24, 0x1A	; 26
    177e:	90 e0       	ldi	r25, 0x00	; 0
    1780:	0e 94 9a 17 	call	0x2f34	; 0x2f34 <move_cursor>
	printf_P(PSTR(" Rank"));
    1784:	80 e2       	ldi	r24, 0x20	; 32
    1786:	91 e0       	ldi	r25, 0x01	; 1
    1788:	9f 93       	push	r25
    178a:	8f 93       	push	r24
    178c:	0e 94 18 1b 	call	0x3630	; 0x3630 <printf_P>
	move_cursor(SCORE,CELL);
    1790:	69 e0       	ldi	r22, 0x09	; 9
    1792:	70 e0       	ldi	r23, 0x00	; 0
    1794:	84 e2       	ldi	r24, 0x24	; 36
    1796:	90 e0       	ldi	r25, 0x00	; 0
    1798:	0e 94 9a 17 	call	0x2f34	; 0x2f34 <move_cursor>
	printf_P(PSTR("Score"));
    179c:	8a e1       	ldi	r24, 0x1A	; 26
    179e:	91 e0       	ldi	r25, 0x01	; 1
    17a0:	9f 93       	push	r25
    17a2:	8f 93       	push	r24
    17a4:	0e 94 18 1b 	call	0x3630	; 0x3630 <printf_P>
	move_cursor(NAME,CELL);
    17a8:	69 e0       	ldi	r22, 0x09	; 9
    17aa:	70 e0       	ldi	r23, 0x00	; 0
    17ac:	8d e2       	ldi	r24, 0x2D	; 45
    17ae:	90 e0       	ldi	r25, 0x00	; 0
    17b0:	0e 94 9a 17 	call	0x2f34	; 0x2f34 <move_cursor>
	printf_P(PSTR("   Name"));
    17b4:	82 e1       	ldi	r24, 0x12	; 18
    17b6:	91 e0       	ldi	r25, 0x01	; 1
    17b8:	9f 93       	push	r25
    17ba:	8f 93       	push	r24
    17bc:	0e 94 18 1b 	call	0x3630	; 0x3630 <printf_P>

	set_display_attribute(FG_YELLOW);
    17c0:	81 e2       	ldi	r24, 0x21	; 33
    17c2:	0e 94 cf 17 	call	0x2f9e	; 0x2f9e <set_display_attribute>
	move_cursor(RANK,RANK1);
    17c6:	6b e0       	ldi	r22, 0x0B	; 11
    17c8:	70 e0       	ldi	r23, 0x00	; 0
    17ca:	8a e1       	ldi	r24, 0x1A	; 26
    17cc:	90 e0       	ldi	r25, 0x00	; 0
    17ce:	0e 94 9a 17 	call	0x2f34	; 0x2f34 <move_cursor>
	printf_P(PSTR("  1  "));
    17d2:	8c e0       	ldi	r24, 0x0C	; 12
    17d4:	91 e0       	ldi	r25, 0x01	; 1
    17d6:	9f 93       	push	r25
    17d8:	8f 93       	push	r24
    17da:	0e 94 18 1b 	call	0x3630	; 0x3630 <printf_P>
	move_cursor(RANK,RANK2);
    17de:	6d e0       	ldi	r22, 0x0D	; 13
    17e0:	70 e0       	ldi	r23, 0x00	; 0
    17e2:	8a e1       	ldi	r24, 0x1A	; 26
    17e4:	90 e0       	ldi	r25, 0x00	; 0
    17e6:	0e 94 9a 17 	call	0x2f34	; 0x2f34 <move_cursor>
	printf_P(PSTR("  2 "));
    17ea:	87 e0       	ldi	r24, 0x07	; 7
    17ec:	91 e0       	ldi	r25, 0x01	; 1
    17ee:	9f 93       	push	r25
    17f0:	8f 93       	push	r24
    17f2:	0e 94 18 1b 	call	0x3630	; 0x3630 <printf_P>
	move_cursor(RANK,RANK3);
    17f6:	6f e0       	ldi	r22, 0x0F	; 15
    17f8:	70 e0       	ldi	r23, 0x00	; 0
    17fa:	8a e1       	ldi	r24, 0x1A	; 26
    17fc:	90 e0       	ldi	r25, 0x00	; 0
    17fe:	0e 94 9a 17 	call	0x2f34	; 0x2f34 <move_cursor>
	printf_P(PSTR("  3 "));
    1802:	82 e0       	ldi	r24, 0x02	; 2
    1804:	91 e0       	ldi	r25, 0x01	; 1
    1806:	9f 93       	push	r25
    1808:	8f 93       	push	r24
    180a:	0e 94 18 1b 	call	0x3630	; 0x3630 <printf_P>
	move_cursor(RANK,RANK4);
    180e:	61 e1       	ldi	r22, 0x11	; 17
    1810:	70 e0       	ldi	r23, 0x00	; 0
    1812:	8a e1       	ldi	r24, 0x1A	; 26
    1814:	90 e0       	ldi	r25, 0x00	; 0
    1816:	0e 94 9a 17 	call	0x2f34	; 0x2f34 <move_cursor>
	printf_P(PSTR("  4  "));
    181a:	8c ef       	ldi	r24, 0xFC	; 252
    181c:	90 e0       	ldi	r25, 0x00	; 0
    181e:	9f 93       	push	r25
    1820:	8f 93       	push	r24
    1822:	0e 94 18 1b 	call	0x3630	; 0x3630 <printf_P>
	move_cursor(RANK,RANK5);
    1826:	63 e1       	ldi	r22, 0x13	; 19
    1828:	70 e0       	ldi	r23, 0x00	; 0
    182a:	8a e1       	ldi	r24, 0x1A	; 26
    182c:	90 e0       	ldi	r25, 0x00	; 0
    182e:	0e 94 9a 17 	call	0x2f34	; 0x2f34 <move_cursor>
	printf_P(PSTR("  5 "));
    1832:	87 ef       	ldi	r24, 0xF7	; 247
    1834:	90 e0       	ldi	r25, 0x00	; 0
    1836:	9f 93       	push	r25
    1838:	8f 93       	push	r24
    183a:	0e 94 18 1b 	call	0x3630	; 0x3630 <printf_P>

	// Checks memory for current highscores if no highscore exists the space
	// will be left blank.
	if(temp_rank1_score != NO_SCORE) {
    183e:	0f b6       	in	r0, 0x3f	; 63
    1840:	f8 94       	cli
    1842:	de bf       	out	0x3e, r29	; 62
    1844:	0f be       	out	0x3f, r0	; 63
    1846:	cd bf       	out	0x3d, r28	; 61
    1848:	c1 14       	cp	r12, r1
    184a:	d1 04       	cpc	r13, r1
    184c:	e1 04       	cpc	r14, r1
    184e:	f1 04       	cpc	r15, r1
    1850:	59 f1       	breq	.+86     	; 0x18a8 <draw_highscore_screen+0x24e>
		set_display_attribute(FG_RED);
    1852:	8f e1       	ldi	r24, 0x1F	; 31
    1854:	0e 94 cf 17 	call	0x2f9e	; 0x2f9e <set_display_attribute>
		move_cursor(SCORE,RANK1);
    1858:	6b e0       	ldi	r22, 0x0B	; 11
    185a:	70 e0       	ldi	r23, 0x00	; 0
    185c:	84 e2       	ldi	r24, 0x24	; 36
    185e:	90 e0       	ldi	r25, 0x00	; 0
    1860:	0e 94 9a 17 	call	0x2f34	; 0x2f34 <move_cursor>
		printf_P(PSTR(" %u"), temp_rank1_score);
    1864:	ff 92       	push	r15
    1866:	ef 92       	push	r14
    1868:	df 92       	push	r13
    186a:	cf 92       	push	r12
    186c:	83 ef       	ldi	r24, 0xF3	; 243
    186e:	90 e0       	ldi	r25, 0x00	; 0
    1870:	9f 93       	push	r25
    1872:	8f 93       	push	r24
    1874:	0e 94 18 1b 	call	0x3630	; 0x3630 <printf_P>

		set_display_attribute(FG_CYAN);
    1878:	84 e2       	ldi	r24, 0x24	; 36
    187a:	0e 94 cf 17 	call	0x2f9e	; 0x2f9e <set_display_attribute>
		move_cursor(NAME,RANK1);
    187e:	6b e0       	ldi	r22, 0x0B	; 11
    1880:	70 e0       	ldi	r23, 0x00	; 0
    1882:	8d e2       	ldi	r24, 0x2D	; 45
    1884:	90 e0       	ldi	r25, 0x00	; 0
    1886:	0e 94 9a 17 	call	0x2f34	; 0x2f34 <move_cursor>
		printf_P(PSTR("%s"), temp_rank1_name);
    188a:	ce 01       	movw	r24, r28
    188c:	01 96       	adiw	r24, 0x01	; 1
    188e:	9f 93       	push	r25
    1890:	8f 93       	push	r24
    1892:	80 ef       	ldi	r24, 0xF0	; 240
    1894:	90 e0       	ldi	r25, 0x00	; 0
    1896:	9f 93       	push	r25
    1898:	8f 93       	push	r24
    189a:	0e 94 18 1b 	call	0x3630	; 0x3630 <printf_P>
    189e:	0f b6       	in	r0, 0x3f	; 63
    18a0:	f8 94       	cli
    18a2:	de bf       	out	0x3e, r29	; 62
    18a4:	0f be       	out	0x3f, r0	; 63
    18a6:	cd bf       	out	0x3d, r28	; 61
	}
	if(temp_rank2_score != NO_SCORE) {
    18a8:	81 14       	cp	r8, r1
    18aa:	91 04       	cpc	r9, r1
    18ac:	a1 04       	cpc	r10, r1
    18ae:	b1 04       	cpc	r11, r1
    18b0:	59 f1       	breq	.+86     	; 0x1908 <draw_highscore_screen+0x2ae>
		set_display_attribute(FG_RED);
    18b2:	8f e1       	ldi	r24, 0x1F	; 31
    18b4:	0e 94 cf 17 	call	0x2f9e	; 0x2f9e <set_display_attribute>
		move_cursor(SCORE,RANK2);
    18b8:	6d e0       	ldi	r22, 0x0D	; 13
    18ba:	70 e0       	ldi	r23, 0x00	; 0
    18bc:	84 e2       	ldi	r24, 0x24	; 36
    18be:	90 e0       	ldi	r25, 0x00	; 0
    18c0:	0e 94 9a 17 	call	0x2f34	; 0x2f34 <move_cursor>
		printf_P(PSTR(" %u"), temp_rank2_score);
    18c4:	bf 92       	push	r11
    18c6:	af 92       	push	r10
    18c8:	9f 92       	push	r9
    18ca:	8f 92       	push	r8
    18cc:	8c ee       	ldi	r24, 0xEC	; 236
    18ce:	90 e0       	ldi	r25, 0x00	; 0
    18d0:	9f 93       	push	r25
    18d2:	8f 93       	push	r24
    18d4:	0e 94 18 1b 	call	0x3630	; 0x3630 <printf_P>

		set_display_attribute(FG_CYAN);
    18d8:	84 e2       	ldi	r24, 0x24	; 36
    18da:	0e 94 cf 17 	call	0x2f9e	; 0x2f9e <set_display_attribute>
		move_cursor(NAME,RANK2);
    18de:	6d e0       	ldi	r22, 0x0D	; 13
    18e0:	70 e0       	ldi	r23, 0x00	; 0
    18e2:	8d e2       	ldi	r24, 0x2D	; 45
    18e4:	90 e0       	ldi	r25, 0x00	; 0
    18e6:	0e 94 9a 17 	call	0x2f34	; 0x2f34 <move_cursor>
		printf_P(PSTR("%s"), temp_rank2_name);
    18ea:	ce 01       	movw	r24, r28
    18ec:	0c 96       	adiw	r24, 0x0c	; 12
    18ee:	9f 93       	push	r25
    18f0:	8f 93       	push	r24
    18f2:	89 ee       	ldi	r24, 0xE9	; 233
    18f4:	90 e0       	ldi	r25, 0x00	; 0
    18f6:	9f 93       	push	r25
    18f8:	8f 93       	push	r24
    18fa:	0e 94 18 1b 	call	0x3630	; 0x3630 <printf_P>
    18fe:	0f b6       	in	r0, 0x3f	; 63
    1900:	f8 94       	cli
    1902:	de bf       	out	0x3e, r29	; 62
    1904:	0f be       	out	0x3f, r0	; 63
    1906:	cd bf       	out	0x3d, r28	; 61
	}
	if(temp_rank3_score != NO_SCORE) {
    1908:	41 14       	cp	r4, r1
    190a:	51 04       	cpc	r5, r1
    190c:	61 04       	cpc	r6, r1
    190e:	71 04       	cpc	r7, r1
    1910:	59 f1       	breq	.+86     	; 0x1968 <draw_highscore_screen+0x30e>
		set_display_attribute(FG_RED);
    1912:	8f e1       	ldi	r24, 0x1F	; 31
    1914:	0e 94 cf 17 	call	0x2f9e	; 0x2f9e <set_display_attribute>
		move_cursor(SCORE,RANK3);
    1918:	6f e0       	ldi	r22, 0x0F	; 15
    191a:	70 e0       	ldi	r23, 0x00	; 0
    191c:	84 e2       	ldi	r24, 0x24	; 36
    191e:	90 e0       	ldi	r25, 0x00	; 0
    1920:	0e 94 9a 17 	call	0x2f34	; 0x2f34 <move_cursor>
		printf_P(PSTR(" %u"), temp_rank3_score);
    1924:	7f 92       	push	r7
    1926:	6f 92       	push	r6
    1928:	5f 92       	push	r5
    192a:	4f 92       	push	r4
    192c:	85 ee       	ldi	r24, 0xE5	; 229
    192e:	90 e0       	ldi	r25, 0x00	; 0
    1930:	9f 93       	push	r25
    1932:	8f 93       	push	r24
    1934:	0e 94 18 1b 	call	0x3630	; 0x3630 <printf_P>
		set_display_attribute(FG_CYAN);
    1938:	84 e2       	ldi	r24, 0x24	; 36
    193a:	0e 94 cf 17 	call	0x2f9e	; 0x2f9e <set_display_attribute>
		move_cursor(NAME,RANK3);
    193e:	6f e0       	ldi	r22, 0x0F	; 15
    1940:	70 e0       	ldi	r23, 0x00	; 0
    1942:	8d e2       	ldi	r24, 0x2D	; 45
    1944:	90 e0       	ldi	r25, 0x00	; 0
    1946:	0e 94 9a 17 	call	0x2f34	; 0x2f34 <move_cursor>
		printf_P(PSTR("%s"), temp_rank3_name);
    194a:	ce 01       	movw	r24, r28
    194c:	47 96       	adiw	r24, 0x17	; 23
    194e:	9f 93       	push	r25
    1950:	8f 93       	push	r24
    1952:	82 ee       	ldi	r24, 0xE2	; 226
    1954:	90 e0       	ldi	r25, 0x00	; 0
    1956:	9f 93       	push	r25
    1958:	8f 93       	push	r24
    195a:	0e 94 18 1b 	call	0x3630	; 0x3630 <printf_P>
    195e:	0f b6       	in	r0, 0x3f	; 63
    1960:	f8 94       	cli
    1962:	de bf       	out	0x3e, r29	; 62
    1964:	0f be       	out	0x3f, r0	; 63
    1966:	cd bf       	out	0x3d, r28	; 61
	}
	if(temp_rank4_score != NO_SCORE) {
    1968:	28 ad       	ldd	r18, Y+56	; 0x38
    196a:	39 ad       	ldd	r19, Y+57	; 0x39
    196c:	4a ad       	ldd	r20, Y+58	; 0x3a
    196e:	5b ad       	ldd	r21, Y+59	; 0x3b
    1970:	23 2b       	or	r18, r19
    1972:	24 2b       	or	r18, r20
    1974:	25 2b       	or	r18, r21
    1976:	79 f1       	breq	.+94     	; 0x19d6 <draw_highscore_screen+0x37c>
		set_display_attribute(FG_RED);
    1978:	8f e1       	ldi	r24, 0x1F	; 31
    197a:	0e 94 cf 17 	call	0x2f9e	; 0x2f9e <set_display_attribute>
		move_cursor(SCORE,RANK4);
    197e:	61 e1       	ldi	r22, 0x11	; 17
    1980:	70 e0       	ldi	r23, 0x00	; 0
    1982:	84 e2       	ldi	r24, 0x24	; 36
    1984:	90 e0       	ldi	r25, 0x00	; 0
    1986:	0e 94 9a 17 	call	0x2f34	; 0x2f34 <move_cursor>
		printf_P(PSTR(" %u"), temp_rank4_score);
    198a:	3b ad       	ldd	r19, Y+59	; 0x3b
    198c:	3f 93       	push	r19
    198e:	4a ad       	ldd	r20, Y+58	; 0x3a
    1990:	4f 93       	push	r20
    1992:	59 ad       	ldd	r21, Y+57	; 0x39
    1994:	5f 93       	push	r21
    1996:	88 ad       	ldd	r24, Y+56	; 0x38
    1998:	8f 93       	push	r24
    199a:	8e ed       	ldi	r24, 0xDE	; 222
    199c:	90 e0       	ldi	r25, 0x00	; 0
    199e:	9f 93       	push	r25
    19a0:	8f 93       	push	r24
    19a2:	0e 94 18 1b 	call	0x3630	; 0x3630 <printf_P>
		set_display_attribute(FG_CYAN);
    19a6:	84 e2       	ldi	r24, 0x24	; 36
    19a8:	0e 94 cf 17 	call	0x2f9e	; 0x2f9e <set_display_attribute>
		move_cursor(NAME,RANK4);
    19ac:	61 e1       	ldi	r22, 0x11	; 17
    19ae:	70 e0       	ldi	r23, 0x00	; 0
    19b0:	8d e2       	ldi	r24, 0x2D	; 45
    19b2:	90 e0       	ldi	r25, 0x00	; 0
    19b4:	0e 94 9a 17 	call	0x2f34	; 0x2f34 <move_cursor>
		printf_P(PSTR("%s"), temp_rank4_name);
    19b8:	ce 01       	movw	r24, r28
    19ba:	82 96       	adiw	r24, 0x22	; 34
    19bc:	9f 93       	push	r25
    19be:	8f 93       	push	r24
    19c0:	8b ed       	ldi	r24, 0xDB	; 219
    19c2:	90 e0       	ldi	r25, 0x00	; 0
    19c4:	9f 93       	push	r25
    19c6:	8f 93       	push	r24
    19c8:	0e 94 18 1b 	call	0x3630	; 0x3630 <printf_P>
    19cc:	0f b6       	in	r0, 0x3f	; 63
    19ce:	f8 94       	cli
    19d0:	de bf       	out	0x3e, r29	; 62
    19d2:	0f be       	out	0x3f, r0	; 63
    19d4:	cd bf       	out	0x3d, r28	; 61
	}
	if(temp_rank5_score != NO_SCORE) {
    19d6:	2c ad       	ldd	r18, Y+60	; 0x3c
    19d8:	3d ad       	ldd	r19, Y+61	; 0x3d
    19da:	4e ad       	ldd	r20, Y+62	; 0x3e
    19dc:	5f ad       	ldd	r21, Y+63	; 0x3f
    19de:	23 2b       	or	r18, r19
    19e0:	24 2b       	or	r18, r20
    19e2:	25 2b       	or	r18, r21
    19e4:	79 f1       	breq	.+94     	; 0x1a44 <draw_highscore_screen+0x3ea>
		set_display_attribute(FG_RED);
    19e6:	8f e1       	ldi	r24, 0x1F	; 31
    19e8:	0e 94 cf 17 	call	0x2f9e	; 0x2f9e <set_display_attribute>
		move_cursor(SCORE,RANK5);
    19ec:	63 e1       	ldi	r22, 0x13	; 19
    19ee:	70 e0       	ldi	r23, 0x00	; 0
    19f0:	84 e2       	ldi	r24, 0x24	; 36
    19f2:	90 e0       	ldi	r25, 0x00	; 0
    19f4:	0e 94 9a 17 	call	0x2f34	; 0x2f34 <move_cursor>
		printf_P(PSTR(" %u"), temp_rank5_score);
    19f8:	3f ad       	ldd	r19, Y+63	; 0x3f
    19fa:	3f 93       	push	r19
    19fc:	4e ad       	ldd	r20, Y+62	; 0x3e
    19fe:	4f 93       	push	r20
    1a00:	5d ad       	ldd	r21, Y+61	; 0x3d
    1a02:	5f 93       	push	r21
    1a04:	8c ad       	ldd	r24, Y+60	; 0x3c
    1a06:	8f 93       	push	r24
    1a08:	87 ed       	ldi	r24, 0xD7	; 215
    1a0a:	90 e0       	ldi	r25, 0x00	; 0
    1a0c:	9f 93       	push	r25
    1a0e:	8f 93       	push	r24
    1a10:	0e 94 18 1b 	call	0x3630	; 0x3630 <printf_P>
		set_display_attribute(FG_CYAN);
    1a14:	84 e2       	ldi	r24, 0x24	; 36
    1a16:	0e 94 cf 17 	call	0x2f9e	; 0x2f9e <set_display_attribute>
		move_cursor(NAME,RANK5);
    1a1a:	63 e1       	ldi	r22, 0x13	; 19
    1a1c:	70 e0       	ldi	r23, 0x00	; 0
    1a1e:	8d e2       	ldi	r24, 0x2D	; 45
    1a20:	90 e0       	ldi	r25, 0x00	; 0
    1a22:	0e 94 9a 17 	call	0x2f34	; 0x2f34 <move_cursor>
		printf_P(PSTR("%s"), temp_rank5_name);
    1a26:	ce 01       	movw	r24, r28
    1a28:	8d 96       	adiw	r24, 0x2d	; 45
    1a2a:	9f 93       	push	r25
    1a2c:	8f 93       	push	r24
    1a2e:	84 ed       	ldi	r24, 0xD4	; 212
    1a30:	90 e0       	ldi	r25, 0x00	; 0
    1a32:	9f 93       	push	r25
    1a34:	8f 93       	push	r24
    1a36:	0e 94 18 1b 	call	0x3630	; 0x3630 <printf_P>
    1a3a:	0f b6       	in	r0, 0x3f	; 63
    1a3c:	f8 94       	cli
    1a3e:	de bf       	out	0x3e, r29	; 62
    1a40:	0f be       	out	0x3f, r0	; 63
    1a42:	cd bf       	out	0x3d, r28	; 61
	}
	set_display_attribute(FG_GREEN);
    1a44:	80 e2       	ldi	r24, 0x20	; 32
    1a46:	0e 94 cf 17 	call	0x2f9e	; 0x2f9e <set_display_attribute>

	// Checks if a highscore has been achieved and adds it to memory and
	// displays it.
	if(gameover_flag == TRUE) {
    1a4a:	80 91 8f 02 	lds	r24, 0x028F	; 0x80028f <gameover_flag>
    1a4e:	81 30       	cpi	r24, 0x01	; 1
    1a50:	09 f0       	breq	.+2      	; 0x1a54 <draw_highscore_screen+0x3fa>
    1a52:	b5 c0       	rjmp	.+362    	; 0x1bbe <draw_highscore_screen+0x564>
		if(get_score() > temp_rank1_score) {
    1a54:	0e 94 44 15 	call	0x2a88	; 0x2a88 <get_score>
    1a58:	c6 16       	cp	r12, r22
    1a5a:	d7 06       	cpc	r13, r23
    1a5c:	e8 06       	cpc	r14, r24
    1a5e:	f9 06       	cpc	r15, r25
    1a60:	d8 f4       	brcc	.+54     	; 0x1a98 <draw_highscore_screen+0x43e>
			input_highscore();
    1a62:	0e 94 c8 09 	call	0x1390	; 0x1390 <input_highscore>
			eeprom_update_dword(&rank1_score, (uint32_t)get_score());
    1a66:	0e 94 44 15 	call	0x2a88	; 0x2a88 <get_score>
    1a6a:	ab 01       	movw	r20, r22
    1a6c:	bc 01       	movw	r22, r24
    1a6e:	80 e1       	ldi	r24, 0x10	; 16
    1a70:	90 e0       	ldi	r25, 0x00	; 0
    1a72:	0e 94 0e 1e 	call	0x3c1c	; 0x3c1c <eeprom_update_dword>
			eeprom_update_block((const void*)name_input,&rank1_name,MAX_NAME_SIZE);
    1a76:	4b e0       	ldi	r20, 0x0B	; 11
    1a78:	50 e0       	ldi	r21, 0x00	; 0
    1a7a:	60 e4       	ldi	r22, 0x40	; 64
    1a7c:	70 e0       	ldi	r23, 0x00	; 0
    1a7e:	80 e9       	ldi	r24, 0x90	; 144
    1a80:	92 e0       	ldi	r25, 0x02	; 2
    1a82:	0e 94 ec 1d 	call	0x3bd8	; 0x3bd8 <eeprom_update_block>
			move_cursor(RANK,RANK1);
    1a86:	6b e0       	ldi	r22, 0x0B	; 11
    1a88:	70 e0       	ldi	r23, 0x00	; 0
    1a8a:	8a e1       	ldi	r24, 0x1A	; 26
    1a8c:	90 e0       	ldi	r25, 0x00	; 0
    1a8e:	0e 94 9a 17 	call	0x2f34	; 0x2f34 <move_cursor>
			clear_to_end_of_line();
    1a92:	0e 94 c6 17 	call	0x2f8c	; 0x2f8c <clear_to_end_of_line>
    1a96:	8f c0       	rjmp	.+286    	; 0x1bb6 <draw_highscore_screen+0x55c>
		}
		else if(get_score() > temp_rank2_score) {
    1a98:	0e 94 44 15 	call	0x2a88	; 0x2a88 <get_score>
    1a9c:	86 16       	cp	r8, r22
    1a9e:	97 06       	cpc	r9, r23
    1aa0:	a8 06       	cpc	r10, r24
    1aa2:	b9 06       	cpc	r11, r25
    1aa4:	d8 f4       	brcc	.+54     	; 0x1adc <draw_highscore_screen+0x482>
			input_highscore();
    1aa6:	0e 94 c8 09 	call	0x1390	; 0x1390 <input_highscore>
			eeprom_update_dword(&rank2_score, (uint32_t)get_score());
    1aaa:	0e 94 44 15 	call	0x2a88	; 0x2a88 <get_score>
    1aae:	ab 01       	movw	r20, r22
    1ab0:	bc 01       	movw	r22, r24
    1ab2:	8c e0       	ldi	r24, 0x0C	; 12
    1ab4:	90 e0       	ldi	r25, 0x00	; 0
    1ab6:	0e 94 0e 1e 	call	0x3c1c	; 0x3c1c <eeprom_update_dword>
			eeprom_update_block((const void*)name_input,&rank2_name,MAX_NAME_SIZE);
    1aba:	4b e0       	ldi	r20, 0x0B	; 11
    1abc:	50 e0       	ldi	r21, 0x00	; 0
    1abe:	65 e3       	ldi	r22, 0x35	; 53
    1ac0:	70 e0       	ldi	r23, 0x00	; 0
    1ac2:	80 e9       	ldi	r24, 0x90	; 144
    1ac4:	92 e0       	ldi	r25, 0x02	; 2
    1ac6:	0e 94 ec 1d 	call	0x3bd8	; 0x3bd8 <eeprom_update_block>
			move_cursor(RANK,RANK2);
    1aca:	6d e0       	ldi	r22, 0x0D	; 13
    1acc:	70 e0       	ldi	r23, 0x00	; 0
    1ace:	8a e1       	ldi	r24, 0x1A	; 26
    1ad0:	90 e0       	ldi	r25, 0x00	; 0
    1ad2:	0e 94 9a 17 	call	0x2f34	; 0x2f34 <move_cursor>
			clear_to_end_of_line();
    1ad6:	0e 94 c6 17 	call	0x2f8c	; 0x2f8c <clear_to_end_of_line>
    1ada:	6d c0       	rjmp	.+218    	; 0x1bb6 <draw_highscore_screen+0x55c>
		}
		else if(get_score() > temp_rank3_score) {
    1adc:	0e 94 44 15 	call	0x2a88	; 0x2a88 <get_score>
    1ae0:	46 16       	cp	r4, r22
    1ae2:	57 06       	cpc	r5, r23
    1ae4:	68 06       	cpc	r6, r24
    1ae6:	79 06       	cpc	r7, r25
    1ae8:	d8 f4       	brcc	.+54     	; 0x1b20 <draw_highscore_screen+0x4c6>
			input_highscore();
    1aea:	0e 94 c8 09 	call	0x1390	; 0x1390 <input_highscore>
			eeprom_update_dword(&rank3_score, (uint32_t)get_score());
    1aee:	0e 94 44 15 	call	0x2a88	; 0x2a88 <get_score>
    1af2:	ab 01       	movw	r20, r22
    1af4:	bc 01       	movw	r22, r24
    1af6:	88 e0       	ldi	r24, 0x08	; 8
    1af8:	90 e0       	ldi	r25, 0x00	; 0
    1afa:	0e 94 0e 1e 	call	0x3c1c	; 0x3c1c <eeprom_update_dword>
			eeprom_update_block((const void*)name_input,&rank3_name,MAX_NAME_SIZE);
    1afe:	4b e0       	ldi	r20, 0x0B	; 11
    1b00:	50 e0       	ldi	r21, 0x00	; 0
    1b02:	6a e2       	ldi	r22, 0x2A	; 42
    1b04:	70 e0       	ldi	r23, 0x00	; 0
    1b06:	80 e9       	ldi	r24, 0x90	; 144
    1b08:	92 e0       	ldi	r25, 0x02	; 2
    1b0a:	0e 94 ec 1d 	call	0x3bd8	; 0x3bd8 <eeprom_update_block>
			move_cursor(RANK,RANK3);
    1b0e:	6f e0       	ldi	r22, 0x0F	; 15
    1b10:	70 e0       	ldi	r23, 0x00	; 0
    1b12:	8a e1       	ldi	r24, 0x1A	; 26
    1b14:	90 e0       	ldi	r25, 0x00	; 0
    1b16:	0e 94 9a 17 	call	0x2f34	; 0x2f34 <move_cursor>
			clear_to_end_of_line();
    1b1a:	0e 94 c6 17 	call	0x2f8c	; 0x2f8c <clear_to_end_of_line>
    1b1e:	4b c0       	rjmp	.+150    	; 0x1bb6 <draw_highscore_screen+0x55c>
		}
		else if(get_score() > temp_rank4_score) {
    1b20:	0e 94 44 15 	call	0x2a88	; 0x2a88 <get_score>
    1b24:	28 ad       	ldd	r18, Y+56	; 0x38
    1b26:	39 ad       	ldd	r19, Y+57	; 0x39
    1b28:	4a ad       	ldd	r20, Y+58	; 0x3a
    1b2a:	5b ad       	ldd	r21, Y+59	; 0x3b
    1b2c:	26 17       	cp	r18, r22
    1b2e:	37 07       	cpc	r19, r23
    1b30:	48 07       	cpc	r20, r24
    1b32:	59 07       	cpc	r21, r25
    1b34:	d8 f4       	brcc	.+54     	; 0x1b6c <draw_highscore_screen+0x512>
			input_highscore();
    1b36:	0e 94 c8 09 	call	0x1390	; 0x1390 <input_highscore>
			eeprom_update_dword(&rank4_score, (uint32_t)get_score());
    1b3a:	0e 94 44 15 	call	0x2a88	; 0x2a88 <get_score>
    1b3e:	ab 01       	movw	r20, r22
    1b40:	bc 01       	movw	r22, r24
    1b42:	84 e0       	ldi	r24, 0x04	; 4
    1b44:	90 e0       	ldi	r25, 0x00	; 0
    1b46:	0e 94 0e 1e 	call	0x3c1c	; 0x3c1c <eeprom_update_dword>
			eeprom_update_block((const void*)name_input,&rank4_name,MAX_NAME_SIZE);
    1b4a:	4b e0       	ldi	r20, 0x0B	; 11
    1b4c:	50 e0       	ldi	r21, 0x00	; 0
    1b4e:	6f e1       	ldi	r22, 0x1F	; 31
    1b50:	70 e0       	ldi	r23, 0x00	; 0
    1b52:	80 e9       	ldi	r24, 0x90	; 144
    1b54:	92 e0       	ldi	r25, 0x02	; 2
    1b56:	0e 94 ec 1d 	call	0x3bd8	; 0x3bd8 <eeprom_update_block>
			move_cursor(RANK,RANK4);
    1b5a:	61 e1       	ldi	r22, 0x11	; 17
    1b5c:	70 e0       	ldi	r23, 0x00	; 0
    1b5e:	8a e1       	ldi	r24, 0x1A	; 26
    1b60:	90 e0       	ldi	r25, 0x00	; 0
    1b62:	0e 94 9a 17 	call	0x2f34	; 0x2f34 <move_cursor>
			clear_to_end_of_line();
    1b66:	0e 94 c6 17 	call	0x2f8c	; 0x2f8c <clear_to_end_of_line>
    1b6a:	25 c0       	rjmp	.+74     	; 0x1bb6 <draw_highscore_screen+0x55c>
		}
		else if(get_score() > temp_rank5_score) {
    1b6c:	0e 94 44 15 	call	0x2a88	; 0x2a88 <get_score>
    1b70:	2c ad       	ldd	r18, Y+60	; 0x3c
    1b72:	3d ad       	ldd	r19, Y+61	; 0x3d
    1b74:	4e ad       	ldd	r20, Y+62	; 0x3e
    1b76:	5f ad       	ldd	r21, Y+63	; 0x3f
    1b78:	26 17       	cp	r18, r22
    1b7a:	37 07       	cpc	r19, r23
    1b7c:	48 07       	cpc	r20, r24
    1b7e:	59 07       	cpc	r21, r25
    1b80:	d0 f4       	brcc	.+52     	; 0x1bb6 <draw_highscore_screen+0x55c>
			input_highscore();
    1b82:	0e 94 c8 09 	call	0x1390	; 0x1390 <input_highscore>
			eeprom_update_dword(&rank5_score, (uint32_t)get_score());
    1b86:	0e 94 44 15 	call	0x2a88	; 0x2a88 <get_score>
    1b8a:	ab 01       	movw	r20, r22
    1b8c:	bc 01       	movw	r22, r24
    1b8e:	80 e0       	ldi	r24, 0x00	; 0
    1b90:	90 e0       	ldi	r25, 0x00	; 0
    1b92:	0e 94 0e 1e 	call	0x3c1c	; 0x3c1c <eeprom_update_dword>
			eeprom_update_block((const void*)name_input,&rank5_name,MAX_NAME_SIZE);
    1b96:	4b e0       	ldi	r20, 0x0B	; 11
    1b98:	50 e0       	ldi	r21, 0x00	; 0
    1b9a:	64 e1       	ldi	r22, 0x14	; 20
    1b9c:	70 e0       	ldi	r23, 0x00	; 0
    1b9e:	80 e9       	ldi	r24, 0x90	; 144
    1ba0:	92 e0       	ldi	r25, 0x02	; 2
    1ba2:	0e 94 ec 1d 	call	0x3bd8	; 0x3bd8 <eeprom_update_block>
			move_cursor(RANK,RANK5);
    1ba6:	63 e1       	ldi	r22, 0x13	; 19
    1ba8:	70 e0       	ldi	r23, 0x00	; 0
    1baa:	8a e1       	ldi	r24, 0x1A	; 26
    1bac:	90 e0       	ldi	r25, 0x00	; 0
    1bae:	0e 94 9a 17 	call	0x2f34	; 0x2f34 <move_cursor>
			clear_to_end_of_line();
    1bb2:	0e 94 c6 17 	call	0x2f8c	; 0x2f8c <clear_to_end_of_line>
		}
		gameover_flag = FALSE;
    1bb6:	10 92 8f 02 	sts	0x028F, r1	; 0x80028f <gameover_flag>
		draw_highscore_screen();
    1bba:	0e 94 2d 0b 	call	0x165a	; 0x165a <draw_highscore_screen>
	}
}
    1bbe:	ef 96       	adiw	r28, 0x3f	; 63
    1bc0:	0f b6       	in	r0, 0x3f	; 63
    1bc2:	f8 94       	cli
    1bc4:	de bf       	out	0x3e, r29	; 62
    1bc6:	0f be       	out	0x3f, r0	; 63
    1bc8:	cd bf       	out	0x3d, r28	; 61
    1bca:	df 91       	pop	r29
    1bcc:	cf 91       	pop	r28
    1bce:	ff 90       	pop	r15
    1bd0:	ef 90       	pop	r14
    1bd2:	df 90       	pop	r13
    1bd4:	cf 90       	pop	r12
    1bd6:	bf 90       	pop	r11
    1bd8:	af 90       	pop	r10
    1bda:	9f 90       	pop	r9
    1bdc:	8f 90       	pop	r8
    1bde:	7f 90       	pop	r7
    1be0:	6f 90       	pop	r6
    1be2:	5f 90       	pop	r5
    1be4:	4f 90       	pop	r4
    1be6:	08 95       	ret

00001be8 <draw_gameover_screen>:

// Draws stats to the game over screen and sets the gameover_flag.
// Also calls draw_highscore_screen()
void draw_gameover_screen(void) {
	gameover_flag = TRUE;
    1be8:	81 e0       	ldi	r24, 0x01	; 1
    1bea:	80 93 8f 02 	sts	0x028F, r24	; 0x80028f <gameover_flag>
	move_cursor(1,START_POS_Y+4);
    1bee:	69 e0       	ldi	r22, 0x09	; 9
    1bf0:	70 e0       	ldi	r23, 0x00	; 0
    1bf2:	81 e0       	ldi	r24, 0x01	; 1
    1bf4:	90 e0       	ldi	r25, 0x00	; 0
    1bf6:	0e 94 9a 17 	call	0x2f34	; 0x2f34 <move_cursor>
	printf_P(PSTR("Score: %u"), get_score());
    1bfa:	0e 94 44 15 	call	0x2a88	; 0x2a88 <get_score>
    1bfe:	9f 93       	push	r25
    1c00:	8f 93       	push	r24
    1c02:	7f 93       	push	r23
    1c04:	6f 93       	push	r22
    1c06:	86 ea       	ldi	r24, 0xA6	; 166
    1c08:	90 e0       	ldi	r25, 0x00	; 0
    1c0a:	9f 93       	push	r25
    1c0c:	8f 93       	push	r24
    1c0e:	0e 94 18 1b 	call	0x3630	; 0x3630 <printf_P>
	move_cursor(1,START_POS_Y+6);
    1c12:	6b e0       	ldi	r22, 0x0B	; 11
    1c14:	70 e0       	ldi	r23, 0x00	; 0
    1c16:	81 e0       	ldi	r24, 0x01	; 1
    1c18:	90 e0       	ldi	r25, 0x00	; 0
    1c1a:	0e 94 9a 17 	call	0x2f34	; 0x2f34 <move_cursor>
	printf_P(PSTR("level: %u"), get_level());
    1c1e:	0e 94 c8 10 	call	0x2190	; 0x2190 <get_level>
    1c22:	1f 92       	push	r1
    1c24:	8f 93       	push	r24
    1c26:	8c e9       	ldi	r24, 0x9C	; 156
    1c28:	90 e0       	ldi	r25, 0x00	; 0
    1c2a:	9f 93       	push	r25
    1c2c:	8f 93       	push	r24
    1c2e:	0e 94 18 1b 	call	0x3630	; 0x3630 <printf_P>
	draw_highscore_screen();
    1c32:	0e 94 2d 0b 	call	0x165a	; 0x165a <draw_highscore_screen>
}
    1c36:	8d b7       	in	r24, 0x3d	; 61
    1c38:	9e b7       	in	r25, 0x3e	; 62
    1c3a:	0a 96       	adiw	r24, 0x0a	; 10
    1c3c:	0f b6       	in	r0, 0x3f	; 63
    1c3e:	f8 94       	cli
    1c40:	9e bf       	out	0x3e, r25	; 62
    1c42:	0f be       	out	0x3f, r0	; 63
    1c44:	8d bf       	out	0x3d, r24	; 61
    1c46:	08 95       	ret

00001c48 <get_joystick_x>:
	joystick_last_moved = get_current_time();
}

// Converts an input on the ADC and returns the value of the X axis
static uint16_t get_joystick_x(void) {
	ADMUX &= ~1;
    1c48:	ec e7       	ldi	r30, 0x7C	; 124
    1c4a:	f0 e0       	ldi	r31, 0x00	; 0
    1c4c:	80 81       	ld	r24, Z
    1c4e:	8e 7f       	andi	r24, 0xFE	; 254
    1c50:	80 83       	st	Z, r24
	ADCSRA |= (1<<ADSC);
    1c52:	ea e7       	ldi	r30, 0x7A	; 122
    1c54:	f0 e0       	ldi	r31, 0x00	; 0
    1c56:	80 81       	ld	r24, Z
    1c58:	80 64       	ori	r24, 0x40	; 64
    1c5a:	80 83       	st	Z, r24
	while(ADCSRA & (1<<ADSC)) {
    1c5c:	80 81       	ld	r24, Z
    1c5e:	86 fd       	sbrc	r24, 6
    1c60:	fd cf       	rjmp	.-6      	; 0x1c5c <get_joystick_x+0x14>
		; /* Wait until conversion finished */
	}
	uint16_t value = ADC; // read the value
    1c62:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
    1c66:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
	return value;
}
    1c6a:	08 95       	ret

00001c6c <get_joystick_y>:

// Converts an input on the ADC and returns the value of the Y axis
static uint16_t get_joystick_y(void) {
	ADMUX |= 1;
    1c6c:	ec e7       	ldi	r30, 0x7C	; 124
    1c6e:	f0 e0       	ldi	r31, 0x00	; 0
    1c70:	80 81       	ld	r24, Z
    1c72:	81 60       	ori	r24, 0x01	; 1
    1c74:	80 83       	st	Z, r24
	ADCSRA |= (1<<ADSC);
    1c76:	ea e7       	ldi	r30, 0x7A	; 122
    1c78:	f0 e0       	ldi	r31, 0x00	; 0
    1c7a:	80 81       	ld	r24, Z
    1c7c:	80 64       	ori	r24, 0x40	; 64
    1c7e:	80 83       	st	Z, r24
	while(ADCSRA & (1<<ADSC)) {
    1c80:	80 81       	ld	r24, Z
    1c82:	86 fd       	sbrc	r24, 6
    1c84:	fd cf       	rjmp	.-6      	; 0x1c80 <get_joystick_y+0x14>
		; /* Wait until conversion finished */
	}
	uint16_t value = ADC; // read the value
    1c86:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
    1c8a:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
	return value;
}
    1c8e:	08 95       	ret

00001c90 <joystick_move_helper>:

/////////////////////////////// Private (Helper) Functions /////////////////////

// Simple helper function
static void joystick_move_helper(uint8_t move) {
	joystick_queue[queue_length] = move;
    1c90:	e0 91 9d 02 	lds	r30, 0x029D	; 0x80029d <queue_length>
    1c94:	f0 e0       	ldi	r31, 0x00	; 0
    1c96:	e2 56       	subi	r30, 0x62	; 98
    1c98:	fd 4f       	sbci	r31, 0xFD	; 253
    1c9a:	80 83       	st	Z, r24
	queue_length++;
    1c9c:	80 91 9d 02 	lds	r24, 0x029D	; 0x80029d <queue_length>
    1ca0:	8f 5f       	subi	r24, 0xFF	; 255
    1ca2:	80 93 9d 02 	sts	0x029D, r24	; 0x80029d <queue_length>
	joystick_last_moved = get_current_time();
    1ca6:	0e 94 51 18 	call	0x30a2	; 0x30a2 <get_current_time>
    1caa:	60 93 a6 02 	sts	0x02A6, r22	; 0x8002a6 <joystick_last_moved>
    1cae:	70 93 a7 02 	sts	0x02A7, r23	; 0x8002a7 <joystick_last_moved+0x1>
    1cb2:	80 93 a8 02 	sts	0x02A8, r24	; 0x8002a8 <joystick_last_moved+0x2>
    1cb6:	90 93 a9 02 	sts	0x02A9, r25	; 0x8002a9 <joystick_last_moved+0x3>
    1cba:	08 95       	ret

00001cbc <joystick_move>:
	joystick_last_moved = get_current_time();
}

// If the joystick has been moved past a certain point and the rest time has
// past a move will be queued and the rest time will be reset.
void joystick_move(void) {
    1cbc:	4f 92       	push	r4
    1cbe:	5f 92       	push	r5
    1cc0:	6f 92       	push	r6
    1cc2:	7f 92       	push	r7
    1cc4:	8f 92       	push	r8
    1cc6:	9f 92       	push	r9
    1cc8:	af 92       	push	r10
    1cca:	bf 92       	push	r11
    1ccc:	cf 92       	push	r12
    1cce:	df 92       	push	r13
    1cd0:	ef 92       	push	r14
    1cd2:	ff 92       	push	r15
    1cd4:	cf 93       	push	r28
    1cd6:	df 93       	push	r29
	if((get_current_time() >= (joystick_last_moved + REPEAT_MOVE)) &&
    1cd8:	0e 94 51 18 	call	0x30a2	; 0x30a2 <get_current_time>
    1cdc:	c0 90 a6 02 	lds	r12, 0x02A6	; 0x8002a6 <joystick_last_moved>
    1ce0:	d0 90 a7 02 	lds	r13, 0x02A7	; 0x8002a7 <joystick_last_moved+0x1>
    1ce4:	e0 90 a8 02 	lds	r14, 0x02A8	; 0x8002a8 <joystick_last_moved+0x2>
    1ce8:	f0 90 a9 02 	lds	r15, 0x02A9	; 0x8002a9 <joystick_last_moved+0x3>
    1cec:	2a ef       	ldi	r18, 0xFA	; 250
    1cee:	c2 0e       	add	r12, r18
    1cf0:	d1 1c       	adc	r13, r1
    1cf2:	e1 1c       	adc	r14, r1
    1cf4:	f1 1c       	adc	r15, r1
    1cf6:	6c 15       	cp	r22, r12
    1cf8:	7d 05       	cpc	r23, r13
    1cfa:	8e 05       	cpc	r24, r14
    1cfc:	9f 05       	cpc	r25, r15
    1cfe:	08 f4       	brcc	.+2      	; 0x1d02 <joystick_move+0x46>
    1d00:	65 c1       	rjmp	.+714    	; 0x1fcc <joystick_move+0x310>
	(queue_length <= MAX_QUEUE_SIZE)) {
    1d02:	80 91 9d 02 	lds	r24, 0x029D	; 0x80029d <queue_length>
}

// If the joystick has been moved past a certain point and the rest time has
// past a move will be queued and the rest time will be reset.
void joystick_move(void) {
	if((get_current_time() >= (joystick_last_moved + REPEAT_MOVE)) &&
    1d06:	89 30       	cpi	r24, 0x09	; 9
    1d08:	08 f0       	brcs	.+2      	; 0x1d0c <joystick_move+0x50>
    1d0a:	60 c1       	rjmp	.+704    	; 0x1fcc <joystick_move+0x310>
	(queue_length <= MAX_QUEUE_SIZE)) {

		if((get_joystick_y() >= JOYSTICK_Y_REST*MOVE_JOYSTICK_DIAGONAL) &&
    1d0c:	0e 94 36 0e 	call	0x1c6c	; 0x1c6c <get_joystick_y>
    1d10:	ec 01       	movw	r28, r24
    1d12:	60 91 aa 02 	lds	r22, 0x02AA	; 0x8002aa <JOYSTICK_Y_REST>
    1d16:	70 91 ab 02 	lds	r23, 0x02AB	; 0x8002ab <JOYSTICK_Y_REST+0x1>
    1d1a:	80 e0       	ldi	r24, 0x00	; 0
    1d1c:	90 e0       	ldi	r25, 0x00	; 0
    1d1e:	0e 94 36 19 	call	0x326c	; 0x326c <__floatunsisf>
    1d22:	6b 01       	movw	r12, r22
    1d24:	7c 01       	movw	r14, r24
    1d26:	2d ec       	ldi	r18, 0xCD	; 205
    1d28:	3c ec       	ldi	r19, 0xCC	; 204
    1d2a:	4c e8       	ldi	r20, 0x8C	; 140
    1d2c:	5f e3       	ldi	r21, 0x3F	; 63
    1d2e:	0e 94 ed 19 	call	0x33da	; 0x33da <__mulsf3>
    1d32:	4b 01       	movw	r8, r22
    1d34:	5c 01       	movw	r10, r24
    1d36:	be 01       	movw	r22, r28
    1d38:	80 e0       	ldi	r24, 0x00	; 0
    1d3a:	90 e0       	ldi	r25, 0x00	; 0
    1d3c:	0e 94 36 19 	call	0x326c	; 0x326c <__floatunsisf>
    1d40:	a5 01       	movw	r20, r10
    1d42:	94 01       	movw	r18, r8
    1d44:	0e 94 e8 19 	call	0x33d0	; 0x33d0 <__gesf2>
    1d48:	88 23       	and	r24, r24
    1d4a:	1c f1       	brlt	.+70     	; 0x1d92 <joystick_move+0xd6>
		(get_joystick_x() >= JOYSTICK_X_REST*MOVE_JOYSTICK_DIAGONAL)){
    1d4c:	0e 94 24 0e 	call	0x1c48	; 0x1c48 <get_joystick_x>
// past a move will be queued and the rest time will be reset.
void joystick_move(void) {
	if((get_current_time() >= (joystick_last_moved + REPEAT_MOVE)) &&
	(queue_length <= MAX_QUEUE_SIZE)) {

		if((get_joystick_y() >= JOYSTICK_Y_REST*MOVE_JOYSTICK_DIAGONAL) &&
    1d50:	bc 01       	movw	r22, r24
    1d52:	80 e0       	ldi	r24, 0x00	; 0
    1d54:	90 e0       	ldi	r25, 0x00	; 0
    1d56:	0e 94 36 19 	call	0x326c	; 0x326c <__floatunsisf>
    1d5a:	2b 01       	movw	r4, r22
    1d5c:	3c 01       	movw	r6, r24
    1d5e:	60 91 ac 02 	lds	r22, 0x02AC	; 0x8002ac <JOYSTICK_X_REST>
    1d62:	70 91 ad 02 	lds	r23, 0x02AD	; 0x8002ad <JOYSTICK_X_REST+0x1>
    1d66:	80 e0       	ldi	r24, 0x00	; 0
    1d68:	90 e0       	ldi	r25, 0x00	; 0
    1d6a:	0e 94 36 19 	call	0x326c	; 0x326c <__floatunsisf>
    1d6e:	2d ec       	ldi	r18, 0xCD	; 205
    1d70:	3c ec       	ldi	r19, 0xCC	; 204
    1d72:	4c e8       	ldi	r20, 0x8C	; 140
    1d74:	5f e3       	ldi	r21, 0x3F	; 63
    1d76:	0e 94 ed 19 	call	0x33da	; 0x33da <__mulsf3>
    1d7a:	9b 01       	movw	r18, r22
    1d7c:	ac 01       	movw	r20, r24
    1d7e:	c3 01       	movw	r24, r6
    1d80:	b2 01       	movw	r22, r4
    1d82:	0e 94 e8 19 	call	0x33d0	; 0x33d0 <__gesf2>
    1d86:	88 23       	and	r24, r24
    1d88:	24 f0       	brlt	.+8      	; 0x1d92 <joystick_move+0xd6>
		(get_joystick_x() >= JOYSTICK_X_REST*MOVE_JOYSTICK_DIAGONAL)){
				joystick_move_helper(MOVE_UP_LEFT);
    1d8a:	85 e0       	ldi	r24, 0x05	; 5
    1d8c:	0e 94 48 0e 	call	0x1c90	; 0x1c90 <joystick_move_helper>
    1d90:	1d c1       	rjmp	.+570    	; 0x1fcc <joystick_move+0x310>
			}
		else if((get_joystick_y() >= JOYSTICK_Y_REST*MOVE_JOYSTICK_DIAGONAL) &&
    1d92:	0e 94 36 0e 	call	0x1c6c	; 0x1c6c <get_joystick_y>
    1d96:	bc 01       	movw	r22, r24
    1d98:	80 e0       	ldi	r24, 0x00	; 0
    1d9a:	90 e0       	ldi	r25, 0x00	; 0
    1d9c:	0e 94 36 19 	call	0x326c	; 0x326c <__floatunsisf>
    1da0:	9b 01       	movw	r18, r22
    1da2:	ac 01       	movw	r20, r24
    1da4:	c5 01       	movw	r24, r10
    1da6:	b4 01       	movw	r22, r8
    1da8:	0e 94 90 18 	call	0x3120	; 0x3120 <__cmpsf2>
    1dac:	18 16       	cp	r1, r24
    1dae:	1c f1       	brlt	.+70     	; 0x1df6 <joystick_move+0x13a>
		(get_joystick_x() <= JOYSTICK_X_REST/MOVE_JOYSTICK_DIAGONAL)) {
    1db0:	0e 94 24 0e 	call	0x1c48	; 0x1c48 <get_joystick_x>

		if((get_joystick_y() >= JOYSTICK_Y_REST*MOVE_JOYSTICK_DIAGONAL) &&
		(get_joystick_x() >= JOYSTICK_X_REST*MOVE_JOYSTICK_DIAGONAL)){
				joystick_move_helper(MOVE_UP_LEFT);
			}
		else if((get_joystick_y() >= JOYSTICK_Y_REST*MOVE_JOYSTICK_DIAGONAL) &&
    1db4:	bc 01       	movw	r22, r24
    1db6:	80 e0       	ldi	r24, 0x00	; 0
    1db8:	90 e0       	ldi	r25, 0x00	; 0
    1dba:	0e 94 36 19 	call	0x326c	; 0x326c <__floatunsisf>
    1dbe:	4b 01       	movw	r8, r22
    1dc0:	5c 01       	movw	r10, r24
    1dc2:	60 91 ac 02 	lds	r22, 0x02AC	; 0x8002ac <JOYSTICK_X_REST>
    1dc6:	70 91 ad 02 	lds	r23, 0x02AD	; 0x8002ad <JOYSTICK_X_REST+0x1>
    1dca:	80 e0       	ldi	r24, 0x00	; 0
    1dcc:	90 e0       	ldi	r25, 0x00	; 0
    1dce:	0e 94 36 19 	call	0x326c	; 0x326c <__floatunsisf>
    1dd2:	2d ec       	ldi	r18, 0xCD	; 205
    1dd4:	3c ec       	ldi	r19, 0xCC	; 204
    1dd6:	4c e8       	ldi	r20, 0x8C	; 140
    1dd8:	5f e3       	ldi	r21, 0x3F	; 63
    1dda:	0e 94 95 18 	call	0x312a	; 0x312a <__divsf3>
    1dde:	9b 01       	movw	r18, r22
    1de0:	ac 01       	movw	r20, r24
    1de2:	c5 01       	movw	r24, r10
    1de4:	b4 01       	movw	r22, r8
    1de6:	0e 94 90 18 	call	0x3120	; 0x3120 <__cmpsf2>
    1dea:	18 16       	cp	r1, r24
    1dec:	24 f0       	brlt	.+8      	; 0x1df6 <joystick_move+0x13a>
		(get_joystick_x() <= JOYSTICK_X_REST/MOVE_JOYSTICK_DIAGONAL)) {
			joystick_move_helper(MOVE_UP_RIGHT);
    1dee:	86 e0       	ldi	r24, 0x06	; 6
    1df0:	0e 94 48 0e 	call	0x1c90	; 0x1c90 <joystick_move_helper>
    1df4:	eb c0       	rjmp	.+470    	; 0x1fcc <joystick_move+0x310>
		}
		else if((get_joystick_y() <= JOYSTICK_Y_REST/MOVE_JOYSTICK_DIAGONAL) &&
    1df6:	0e 94 36 0e 	call	0x1c6c	; 0x1c6c <get_joystick_y>
    1dfa:	ec 01       	movw	r28, r24
    1dfc:	2d ec       	ldi	r18, 0xCD	; 205
    1dfe:	3c ec       	ldi	r19, 0xCC	; 204
    1e00:	4c e8       	ldi	r20, 0x8C	; 140
    1e02:	5f e3       	ldi	r21, 0x3F	; 63
    1e04:	c7 01       	movw	r24, r14
    1e06:	b6 01       	movw	r22, r12
    1e08:	0e 94 95 18 	call	0x312a	; 0x312a <__divsf3>
    1e0c:	4b 01       	movw	r8, r22
    1e0e:	5c 01       	movw	r10, r24
    1e10:	be 01       	movw	r22, r28
    1e12:	80 e0       	ldi	r24, 0x00	; 0
    1e14:	90 e0       	ldi	r25, 0x00	; 0
    1e16:	0e 94 36 19 	call	0x326c	; 0x326c <__floatunsisf>
    1e1a:	a5 01       	movw	r20, r10
    1e1c:	94 01       	movw	r18, r8
    1e1e:	0e 94 90 18 	call	0x3120	; 0x3120 <__cmpsf2>
    1e22:	18 16       	cp	r1, r24
    1e24:	1c f1       	brlt	.+70     	; 0x1e6c <joystick_move+0x1b0>
		(get_joystick_x() >= JOYSTICK_X_REST*MOVE_JOYSTICK_DIAGONAL)) {
    1e26:	0e 94 24 0e 	call	0x1c48	; 0x1c48 <get_joystick_x>
			}
		else if((get_joystick_y() >= JOYSTICK_Y_REST*MOVE_JOYSTICK_DIAGONAL) &&
		(get_joystick_x() <= JOYSTICK_X_REST/MOVE_JOYSTICK_DIAGONAL)) {
			joystick_move_helper(MOVE_UP_RIGHT);
		}
		else if((get_joystick_y() <= JOYSTICK_Y_REST/MOVE_JOYSTICK_DIAGONAL) &&
    1e2a:	bc 01       	movw	r22, r24
    1e2c:	80 e0       	ldi	r24, 0x00	; 0
    1e2e:	90 e0       	ldi	r25, 0x00	; 0
    1e30:	0e 94 36 19 	call	0x326c	; 0x326c <__floatunsisf>
    1e34:	2b 01       	movw	r4, r22
    1e36:	3c 01       	movw	r6, r24
    1e38:	60 91 ac 02 	lds	r22, 0x02AC	; 0x8002ac <JOYSTICK_X_REST>
    1e3c:	70 91 ad 02 	lds	r23, 0x02AD	; 0x8002ad <JOYSTICK_X_REST+0x1>
    1e40:	80 e0       	ldi	r24, 0x00	; 0
    1e42:	90 e0       	ldi	r25, 0x00	; 0
    1e44:	0e 94 36 19 	call	0x326c	; 0x326c <__floatunsisf>
    1e48:	2d ec       	ldi	r18, 0xCD	; 205
    1e4a:	3c ec       	ldi	r19, 0xCC	; 204
    1e4c:	4c e8       	ldi	r20, 0x8C	; 140
    1e4e:	5f e3       	ldi	r21, 0x3F	; 63
    1e50:	0e 94 ed 19 	call	0x33da	; 0x33da <__mulsf3>
    1e54:	9b 01       	movw	r18, r22
    1e56:	ac 01       	movw	r20, r24
    1e58:	c3 01       	movw	r24, r6
    1e5a:	b2 01       	movw	r22, r4
    1e5c:	0e 94 e8 19 	call	0x33d0	; 0x33d0 <__gesf2>
    1e60:	88 23       	and	r24, r24
    1e62:	24 f0       	brlt	.+8      	; 0x1e6c <joystick_move+0x1b0>
		(get_joystick_x() >= JOYSTICK_X_REST*MOVE_JOYSTICK_DIAGONAL)) {
			joystick_move_helper(MOVE_DOWN_LEFT);
    1e64:	87 e0       	ldi	r24, 0x07	; 7
    1e66:	0e 94 48 0e 	call	0x1c90	; 0x1c90 <joystick_move_helper>
    1e6a:	b0 c0       	rjmp	.+352    	; 0x1fcc <joystick_move+0x310>
		}
		else if((get_joystick_y() <= JOYSTICK_Y_REST/MOVE_JOYSTICK_DIAGONAL) &&
    1e6c:	0e 94 36 0e 	call	0x1c6c	; 0x1c6c <get_joystick_y>
    1e70:	bc 01       	movw	r22, r24
    1e72:	80 e0       	ldi	r24, 0x00	; 0
    1e74:	90 e0       	ldi	r25, 0x00	; 0
    1e76:	0e 94 36 19 	call	0x326c	; 0x326c <__floatunsisf>
    1e7a:	9b 01       	movw	r18, r22
    1e7c:	ac 01       	movw	r20, r24
    1e7e:	c5 01       	movw	r24, r10
    1e80:	b4 01       	movw	r22, r8
    1e82:	0e 94 e8 19 	call	0x33d0	; 0x33d0 <__gesf2>
    1e86:	88 23       	and	r24, r24
    1e88:	1c f1       	brlt	.+70     	; 0x1ed0 <joystick_move+0x214>
		(get_joystick_x() <= JOYSTICK_X_REST/MOVE_JOYSTICK_DIAGONAL)) {
    1e8a:	0e 94 24 0e 	call	0x1c48	; 0x1c48 <get_joystick_x>
		}
		else if((get_joystick_y() <= JOYSTICK_Y_REST/MOVE_JOYSTICK_DIAGONAL) &&
		(get_joystick_x() >= JOYSTICK_X_REST*MOVE_JOYSTICK_DIAGONAL)) {
			joystick_move_helper(MOVE_DOWN_LEFT);
		}
		else if((get_joystick_y() <= JOYSTICK_Y_REST/MOVE_JOYSTICK_DIAGONAL) &&
    1e8e:	bc 01       	movw	r22, r24
    1e90:	80 e0       	ldi	r24, 0x00	; 0
    1e92:	90 e0       	ldi	r25, 0x00	; 0
    1e94:	0e 94 36 19 	call	0x326c	; 0x326c <__floatunsisf>
    1e98:	4b 01       	movw	r8, r22
    1e9a:	5c 01       	movw	r10, r24
    1e9c:	60 91 ac 02 	lds	r22, 0x02AC	; 0x8002ac <JOYSTICK_X_REST>
    1ea0:	70 91 ad 02 	lds	r23, 0x02AD	; 0x8002ad <JOYSTICK_X_REST+0x1>
    1ea4:	80 e0       	ldi	r24, 0x00	; 0
    1ea6:	90 e0       	ldi	r25, 0x00	; 0
    1ea8:	0e 94 36 19 	call	0x326c	; 0x326c <__floatunsisf>
    1eac:	2d ec       	ldi	r18, 0xCD	; 205
    1eae:	3c ec       	ldi	r19, 0xCC	; 204
    1eb0:	4c e8       	ldi	r20, 0x8C	; 140
    1eb2:	5f e3       	ldi	r21, 0x3F	; 63
    1eb4:	0e 94 95 18 	call	0x312a	; 0x312a <__divsf3>
    1eb8:	9b 01       	movw	r18, r22
    1eba:	ac 01       	movw	r20, r24
    1ebc:	c5 01       	movw	r24, r10
    1ebe:	b4 01       	movw	r22, r8
    1ec0:	0e 94 90 18 	call	0x3120	; 0x3120 <__cmpsf2>
    1ec4:	18 16       	cp	r1, r24
    1ec6:	24 f0       	brlt	.+8      	; 0x1ed0 <joystick_move+0x214>
		(get_joystick_x() <= JOYSTICK_X_REST/MOVE_JOYSTICK_DIAGONAL)) {
			joystick_move_helper(MOVE_DOWN_RIGHT);
    1ec8:	88 e0       	ldi	r24, 0x08	; 8
    1eca:	0e 94 48 0e 	call	0x1c90	; 0x1c90 <joystick_move_helper>
    1ece:	7e c0       	rjmp	.+252    	; 0x1fcc <joystick_move+0x310>
		}
		else if(get_joystick_y() >= JOYSTICK_Y_REST*MOVE_JOYSTICK) {
    1ed0:	0e 94 36 0e 	call	0x1c6c	; 0x1c6c <get_joystick_y>
    1ed4:	bc 01       	movw	r22, r24
    1ed6:	80 e0       	ldi	r24, 0x00	; 0
    1ed8:	90 e0       	ldi	r25, 0x00	; 0
    1eda:	0e 94 36 19 	call	0x326c	; 0x326c <__floatunsisf>
    1ede:	4b 01       	movw	r8, r22
    1ee0:	5c 01       	movw	r10, r24
    1ee2:	26 e6       	ldi	r18, 0x66	; 102
    1ee4:	36 e6       	ldi	r19, 0x66	; 102
    1ee6:	46 ea       	ldi	r20, 0xA6	; 166
    1ee8:	5f e3       	ldi	r21, 0x3F	; 63
    1eea:	c7 01       	movw	r24, r14
    1eec:	b6 01       	movw	r22, r12
    1eee:	0e 94 ed 19 	call	0x33da	; 0x33da <__mulsf3>
    1ef2:	9b 01       	movw	r18, r22
    1ef4:	ac 01       	movw	r20, r24
    1ef6:	c5 01       	movw	r24, r10
    1ef8:	b4 01       	movw	r22, r8
    1efa:	0e 94 e8 19 	call	0x33d0	; 0x33d0 <__gesf2>
    1efe:	88 23       	and	r24, r24
    1f00:	24 f0       	brlt	.+8      	; 0x1f0a <joystick_move+0x24e>
			joystick_move_helper(MOVE_UP);
    1f02:	81 e0       	ldi	r24, 0x01	; 1
    1f04:	0e 94 48 0e 	call	0x1c90	; 0x1c90 <joystick_move_helper>
    1f08:	61 c0       	rjmp	.+194    	; 0x1fcc <joystick_move+0x310>
		}
		else if(get_joystick_x() >= JOYSTICK_X_REST*MOVE_JOYSTICK) {
    1f0a:	0e 94 24 0e 	call	0x1c48	; 0x1c48 <get_joystick_x>
    1f0e:	ec 01       	movw	r28, r24
    1f10:	60 91 ac 02 	lds	r22, 0x02AC	; 0x8002ac <JOYSTICK_X_REST>
    1f14:	70 91 ad 02 	lds	r23, 0x02AD	; 0x8002ad <JOYSTICK_X_REST+0x1>
    1f18:	80 e0       	ldi	r24, 0x00	; 0
    1f1a:	90 e0       	ldi	r25, 0x00	; 0
    1f1c:	0e 94 36 19 	call	0x326c	; 0x326c <__floatunsisf>
    1f20:	4b 01       	movw	r8, r22
    1f22:	5c 01       	movw	r10, r24
    1f24:	be 01       	movw	r22, r28
    1f26:	80 e0       	ldi	r24, 0x00	; 0
    1f28:	90 e0       	ldi	r25, 0x00	; 0
    1f2a:	0e 94 36 19 	call	0x326c	; 0x326c <__floatunsisf>
    1f2e:	2b 01       	movw	r4, r22
    1f30:	3c 01       	movw	r6, r24
    1f32:	26 e6       	ldi	r18, 0x66	; 102
    1f34:	36 e6       	ldi	r19, 0x66	; 102
    1f36:	46 ea       	ldi	r20, 0xA6	; 166
    1f38:	5f e3       	ldi	r21, 0x3F	; 63
    1f3a:	c5 01       	movw	r24, r10
    1f3c:	b4 01       	movw	r22, r8
    1f3e:	0e 94 ed 19 	call	0x33da	; 0x33da <__mulsf3>
    1f42:	9b 01       	movw	r18, r22
    1f44:	ac 01       	movw	r20, r24
    1f46:	c3 01       	movw	r24, r6
    1f48:	b2 01       	movw	r22, r4
    1f4a:	0e 94 e8 19 	call	0x33d0	; 0x33d0 <__gesf2>
    1f4e:	88 23       	and	r24, r24
    1f50:	24 f0       	brlt	.+8      	; 0x1f5a <joystick_move+0x29e>
			joystick_move_helper(MOVE_LEFT);
    1f52:	82 e0       	ldi	r24, 0x02	; 2
    1f54:	0e 94 48 0e 	call	0x1c90	; 0x1c90 <joystick_move_helper>
    1f58:	39 c0       	rjmp	.+114    	; 0x1fcc <joystick_move+0x310>
		}
		else if(get_joystick_x() <= JOYSTICK_X_REST/MOVE_JOYSTICK) {
    1f5a:	0e 94 24 0e 	call	0x1c48	; 0x1c48 <get_joystick_x>
    1f5e:	bc 01       	movw	r22, r24
    1f60:	80 e0       	ldi	r24, 0x00	; 0
    1f62:	90 e0       	ldi	r25, 0x00	; 0
    1f64:	0e 94 36 19 	call	0x326c	; 0x326c <__floatunsisf>
    1f68:	2b 01       	movw	r4, r22
    1f6a:	3c 01       	movw	r6, r24
    1f6c:	26 e6       	ldi	r18, 0x66	; 102
    1f6e:	36 e6       	ldi	r19, 0x66	; 102
    1f70:	46 ea       	ldi	r20, 0xA6	; 166
    1f72:	5f e3       	ldi	r21, 0x3F	; 63
    1f74:	c5 01       	movw	r24, r10
    1f76:	b4 01       	movw	r22, r8
    1f78:	0e 94 95 18 	call	0x312a	; 0x312a <__divsf3>
    1f7c:	9b 01       	movw	r18, r22
    1f7e:	ac 01       	movw	r20, r24
    1f80:	c3 01       	movw	r24, r6
    1f82:	b2 01       	movw	r22, r4
    1f84:	0e 94 90 18 	call	0x3120	; 0x3120 <__cmpsf2>
    1f88:	18 16       	cp	r1, r24
    1f8a:	24 f0       	brlt	.+8      	; 0x1f94 <joystick_move+0x2d8>
			joystick_move_helper(MOVE_RIGHT);
    1f8c:	83 e0       	ldi	r24, 0x03	; 3
    1f8e:	0e 94 48 0e 	call	0x1c90	; 0x1c90 <joystick_move_helper>
    1f92:	1c c0       	rjmp	.+56     	; 0x1fcc <joystick_move+0x310>
		}
		else if(get_joystick_y() <= JOYSTICK_Y_REST/MOVE_JOYSTICK) {
    1f94:	0e 94 36 0e 	call	0x1c6c	; 0x1c6c <get_joystick_y>
    1f98:	bc 01       	movw	r22, r24
    1f9a:	80 e0       	ldi	r24, 0x00	; 0
    1f9c:	90 e0       	ldi	r25, 0x00	; 0
    1f9e:	0e 94 36 19 	call	0x326c	; 0x326c <__floatunsisf>
    1fa2:	4b 01       	movw	r8, r22
    1fa4:	5c 01       	movw	r10, r24
    1fa6:	26 e6       	ldi	r18, 0x66	; 102
    1fa8:	36 e6       	ldi	r19, 0x66	; 102
    1faa:	46 ea       	ldi	r20, 0xA6	; 166
    1fac:	5f e3       	ldi	r21, 0x3F	; 63
    1fae:	c7 01       	movw	r24, r14
    1fb0:	b6 01       	movw	r22, r12
    1fb2:	0e 94 95 18 	call	0x312a	; 0x312a <__divsf3>
    1fb6:	9b 01       	movw	r18, r22
    1fb8:	ac 01       	movw	r20, r24
    1fba:	c5 01       	movw	r24, r10
    1fbc:	b4 01       	movw	r22, r8
    1fbe:	0e 94 90 18 	call	0x3120	; 0x3120 <__cmpsf2>
    1fc2:	18 16       	cp	r1, r24
    1fc4:	1c f0       	brlt	.+6      	; 0x1fcc <joystick_move+0x310>
			joystick_move_helper(MOVE_DOWN);
    1fc6:	84 e0       	ldi	r24, 0x04	; 4
    1fc8:	0e 94 48 0e 	call	0x1c90	; 0x1c90 <joystick_move_helper>
		}
	}
}
    1fcc:	df 91       	pop	r29
    1fce:	cf 91       	pop	r28
    1fd0:	ff 90       	pop	r15
    1fd2:	ef 90       	pop	r14
    1fd4:	df 90       	pop	r13
    1fd6:	cf 90       	pop	r12
    1fd8:	bf 90       	pop	r11
    1fda:	af 90       	pop	r10
    1fdc:	9f 90       	pop	r9
    1fde:	8f 90       	pop	r8
    1fe0:	7f 90       	pop	r7
    1fe2:	6f 90       	pop	r6
    1fe4:	5f 90       	pop	r5
    1fe6:	4f 90       	pop	r4
    1fe8:	08 95       	ret

00001fea <get_joystick_move>:

// Pulls a joystick move out of the queue and returns the value.
// If no move is in the queue return 0
uint8_t get_joystick_move(void) {
	uint8_t retur_value;
	if(queue_length > 0) {
    1fea:	80 91 9d 02 	lds	r24, 0x029D	; 0x80029d <queue_length>
    1fee:	88 23       	and	r24, r24
    1ff0:	39 f0       	breq	.+14     	; 0x2000 <get_joystick_move+0x16>
		retur_value = joystick_queue[0];
    1ff2:	80 91 9e 02 	lds	r24, 0x029E	; 0x80029e <joystick_queue>
		queue_length--;
    1ff6:	90 91 9d 02 	lds	r25, 0x029D	; 0x80029d <queue_length>
    1ffa:	91 50       	subi	r25, 0x01	; 1
    1ffc:	90 93 9d 02 	sts	0x029D, r25	; 0x80029d <queue_length>
		return retur_value;
	} else {
		return 0;
	}
}
    2000:	08 95       	ret

00002002 <clear_joystick_queue>:

// Clears the entire joystick queue
void clear_joystick_queue(void) {
    2002:	80 e0       	ldi	r24, 0x00	; 0
    2004:	90 e0       	ldi	r25, 0x00	; 0
	for(uint8_t i = 0; i < MAX_QUEUE_SIZE; i++) {
		joystick_queue[i] = 0;
    2006:	fc 01       	movw	r30, r24
    2008:	e2 56       	subi	r30, 0x62	; 98
    200a:	fd 4f       	sbci	r31, 0xFD	; 253
    200c:	10 82       	st	Z, r1
		queue_length = 0;
    200e:	10 92 9d 02 	sts	0x029D, r1	; 0x80029d <queue_length>
    2012:	01 96       	adiw	r24, 0x01	; 1
	}
}

// Clears the entire joystick queue
void clear_joystick_queue(void) {
	for(uint8_t i = 0; i < MAX_QUEUE_SIZE; i++) {
    2014:	88 30       	cpi	r24, 0x08	; 8
    2016:	91 05       	cpc	r25, r1
    2018:	b1 f7       	brne	.-20     	; 0x2006 <clear_joystick_queue+0x4>
		joystick_queue[i] = 0;
		queue_length = 0;
	}
}
    201a:	08 95       	ret

0000201c <init_joystick>:
/////////////////////////////// Public Functions ///////////////////////////////

// Initialises the joystick hardware for use in the game
void init_joystick(void) {
	// Set up ADC - AVCC reference, right adjust
	ADMUX = (1<<REFS0);
    201c:	80 e4       	ldi	r24, 0x40	; 64
    201e:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>

	// Turn on the ADC (but don't start a conversion yet). Choose a clock
	// divider of 64. (The ADC clock must be somewhere
	// between 50kHz and 200kHz. We will divide our 8MHz clock by 64
	// to give us 125kHz.)
	ADCSRA = (1<<ADEN)|(1<<ADPS2)|(1<<ADPS1);
    2022:	86 e8       	ldi	r24, 0x86	; 134
    2024:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>

	JOYSTICK_X_REST = get_joystick_x();
    2028:	0e 94 24 0e 	call	0x1c48	; 0x1c48 <get_joystick_x>
    202c:	90 93 ad 02 	sts	0x02AD, r25	; 0x8002ad <JOYSTICK_X_REST+0x1>
    2030:	80 93 ac 02 	sts	0x02AC, r24	; 0x8002ac <JOYSTICK_X_REST>
	JOYSTICK_Y_REST = get_joystick_y();
    2034:	0e 94 36 0e 	call	0x1c6c	; 0x1c6c <get_joystick_y>
    2038:	90 93 ab 02 	sts	0x02AB, r25	; 0x8002ab <JOYSTICK_Y_REST+0x1>
    203c:	80 93 aa 02 	sts	0x02AA, r24	; 0x8002aa <JOYSTICK_Y_REST>

	clear_joystick_queue();
    2040:	0e 94 01 10 	call	0x2002	; 0x2002 <clear_joystick_queue>

	joystick_last_moved = get_current_time();
    2044:	0e 94 51 18 	call	0x30a2	; 0x30a2 <get_current_time>
    2048:	60 93 a6 02 	sts	0x02A6, r22	; 0x8002a6 <joystick_last_moved>
    204c:	70 93 a7 02 	sts	0x02A7, r23	; 0x8002a7 <joystick_last_moved+0x1>
    2050:	80 93 a8 02 	sts	0x02A8, r24	; 0x8002a8 <joystick_last_moved+0x2>
    2054:	90 93 a9 02 	sts	0x02A9, r25	; 0x8002a9 <joystick_last_moved+0x3>
    2058:	08 95       	ret

0000205a <ledmatrix_setup>:
	(void)spi_send_byte(0x08);
}

void ledmatrix_shift_display_down(void) {
	(void)spi_send_byte(CMD_SHIFT_DISPLAY);
	(void)spi_send_byte(0x04);
    205a:	80 e8       	ldi	r24, 0x80	; 128
    205c:	0e 94 6c 17 	call	0x2ed8	; 0x2ed8 <spi_setup_master>
    2060:	08 95       	ret

00002062 <ledmatrix_update_pixel>:
    2062:	1f 93       	push	r17
    2064:	cf 93       	push	r28
    2066:	df 93       	push	r29
    2068:	80 31       	cpi	r24, 0x10	; 16
    206a:	b0 f4       	brcc	.+44     	; 0x2098 <ledmatrix_update_pixel+0x36>
    206c:	68 30       	cpi	r22, 0x08	; 8
    206e:	a0 f4       	brcc	.+40     	; 0x2098 <ledmatrix_update_pixel+0x36>
    2070:	14 2f       	mov	r17, r20
    2072:	c6 2f       	mov	r28, r22
    2074:	d8 2f       	mov	r29, r24
    2076:	81 e0       	ldi	r24, 0x01	; 1
    2078:	0e 94 94 17 	call	0x2f28	; 0x2f28 <spi_send_byte>
    207c:	6c 2f       	mov	r22, r28
    207e:	67 70       	andi	r22, 0x07	; 7
    2080:	80 e1       	ldi	r24, 0x10	; 16
    2082:	68 9f       	mul	r22, r24
    2084:	90 01       	movw	r18, r0
    2086:	11 24       	eor	r1, r1
    2088:	8d 2f       	mov	r24, r29
    208a:	8f 70       	andi	r24, 0x0F	; 15
    208c:	82 2b       	or	r24, r18
    208e:	0e 94 94 17 	call	0x2f28	; 0x2f28 <spi_send_byte>
    2092:	81 2f       	mov	r24, r17
    2094:	0e 94 94 17 	call	0x2f28	; 0x2f28 <spi_send_byte>
    2098:	df 91       	pop	r29
    209a:	cf 91       	pop	r28
    209c:	1f 91       	pop	r17
    209e:	08 95       	ret

000020a0 <ledmatrix_update_row>:
    20a0:	0f 93       	push	r16
    20a2:	1f 93       	push	r17
    20a4:	cf 93       	push	r28
    20a6:	df 93       	push	r29
    20a8:	88 30       	cpi	r24, 0x08	; 8
    20aa:	90 f4       	brcc	.+36     	; 0x20d0 <ledmatrix_update_row+0x30>
    20ac:	8b 01       	movw	r16, r22
    20ae:	c8 2f       	mov	r28, r24
    20b0:	82 e0       	ldi	r24, 0x02	; 2
    20b2:	0e 94 94 17 	call	0x2f28	; 0x2f28 <spi_send_byte>
    20b6:	8c 2f       	mov	r24, r28
    20b8:	87 70       	andi	r24, 0x07	; 7
    20ba:	0e 94 94 17 	call	0x2f28	; 0x2f28 <spi_send_byte>
    20be:	e8 01       	movw	r28, r16
    20c0:	00 5f       	subi	r16, 0xF0	; 240
    20c2:	1f 4f       	sbci	r17, 0xFF	; 255
    20c4:	89 91       	ld	r24, Y+
    20c6:	0e 94 94 17 	call	0x2f28	; 0x2f28 <spi_send_byte>
    20ca:	c0 17       	cp	r28, r16
    20cc:	d1 07       	cpc	r29, r17
    20ce:	d1 f7       	brne	.-12     	; 0x20c4 <ledmatrix_update_row+0x24>
    20d0:	df 91       	pop	r29
    20d2:	cf 91       	pop	r28
    20d4:	1f 91       	pop	r17
    20d6:	0f 91       	pop	r16
    20d8:	08 95       	ret

000020da <ledmatrix_update_column>:
    20da:	0f 93       	push	r16
    20dc:	1f 93       	push	r17
    20de:	cf 93       	push	r28
    20e0:	df 93       	push	r29
    20e2:	80 31       	cpi	r24, 0x10	; 16
    20e4:	90 f4       	brcc	.+36     	; 0x210a <ledmatrix_update_column+0x30>
    20e6:	8b 01       	movw	r16, r22
    20e8:	c8 2f       	mov	r28, r24
    20ea:	83 e0       	ldi	r24, 0x03	; 3
    20ec:	0e 94 94 17 	call	0x2f28	; 0x2f28 <spi_send_byte>
    20f0:	8c 2f       	mov	r24, r28
    20f2:	8f 70       	andi	r24, 0x0F	; 15
    20f4:	0e 94 94 17 	call	0x2f28	; 0x2f28 <spi_send_byte>
    20f8:	e8 01       	movw	r28, r16
    20fa:	08 5f       	subi	r16, 0xF8	; 248
    20fc:	1f 4f       	sbci	r17, 0xFF	; 255
    20fe:	89 91       	ld	r24, Y+
    2100:	0e 94 94 17 	call	0x2f28	; 0x2f28 <spi_send_byte>
    2104:	c0 17       	cp	r28, r16
    2106:	d1 07       	cpc	r29, r17
    2108:	d1 f7       	brne	.-12     	; 0x20fe <ledmatrix_update_column+0x24>
    210a:	df 91       	pop	r29
    210c:	cf 91       	pop	r28
    210e:	1f 91       	pop	r17
    2110:	0f 91       	pop	r16
    2112:	08 95       	ret

00002114 <ledmatrix_shift_display_left>:
    2114:	84 e0       	ldi	r24, 0x04	; 4
    2116:	0e 94 94 17 	call	0x2f28	; 0x2f28 <spi_send_byte>
    211a:	82 e0       	ldi	r24, 0x02	; 2
    211c:	0e 94 94 17 	call	0x2f28	; 0x2f28 <spi_send_byte>
    2120:	08 95       	ret

00002122 <ledmatrix_clear>:
}

void ledmatrix_clear(void) {
	(void)spi_send_byte(CMD_CLEAR_SCREEN);
    2122:	8f e0       	ldi	r24, 0x0F	; 15
    2124:	0e 94 94 17 	call	0x2f28	; 0x2f28 <spi_send_byte>
    2128:	08 95       	ret

0000212a <level_v_updater>:
	level++;
}

// A helper function that updates the terminal display in regards to levels
static void level_v_updater(void) {
	move_cursor(30, 1);
    212a:	61 e0       	ldi	r22, 0x01	; 1
    212c:	70 e0       	ldi	r23, 0x00	; 0
    212e:	8e e1       	ldi	r24, 0x1E	; 30
    2130:	90 e0       	ldi	r25, 0x00	; 0
    2132:	0e 94 9a 17 	call	0x2f34	; 0x2f34 <move_cursor>
	printf_P(PSTR("Level: %u"), get_level());
    2136:	80 91 e5 02 	lds	r24, 0x02E5	; 0x8002e5 <level>
    213a:	1f 92       	push	r1
    213c:	8f 93       	push	r24
    213e:	80 e3       	ldi	r24, 0x30	; 48
    2140:	91 e0       	ldi	r25, 0x01	; 1
    2142:	9f 93       	push	r25
    2144:	8f 93       	push	r24
    2146:	0e 94 18 1b 	call	0x3630	; 0x3630 <printf_P>
    214a:	0f 90       	pop	r0
    214c:	0f 90       	pop	r0
    214e:	0f 90       	pop	r0
    2150:	0f 90       	pop	r0
    2152:	08 95       	ret

00002154 <init_level>:

/////////////////////////////// Public Functions ///////////////////////////////

// Initialises the game for use with levels
void init_level(void) {
	pattern = PATTERN_1;
    2154:	10 92 e4 02 	sts	0x02E4, r1	; 0x8002e4 <pattern>
	level = 1;
    2158:	81 e0       	ldi	r24, 0x01	; 1
    215a:	80 93 e5 02 	sts	0x02E5, r24	; 0x8002e5 <level>
	level_v_updater();
    215e:	0e 94 95 10 	call	0x212a	; 0x212a <level_v_updater>
	for(uint8_t i = 0; i < ROWS; i++) {
		row_speed[i] = initial_row_speed[i];
    2162:	ee ea       	ldi	r30, 0xAE	; 174
    2164:	f2 e0       	ldi	r31, 0x02	; 2
    2166:	88 ee       	ldi	r24, 0xE8	; 232
    2168:	93 e0       	ldi	r25, 0x03	; 3
    216a:	91 83       	std	Z+1, r25	; 0x01
    216c:	80 83       	st	Z, r24
    216e:	84 e1       	ldi	r24, 0x14	; 20
    2170:	95 e0       	ldi	r25, 0x05	; 5
    2172:	93 83       	std	Z+3, r25	; 0x03
    2174:	82 83       	std	Z+2, r24	; 0x02
    2176:	81 e6       	ldi	r24, 0x61	; 97
    2178:	93 e0       	ldi	r25, 0x03	; 3
    217a:	95 83       	std	Z+5, r25	; 0x05
    217c:	84 83       	std	Z+4, r24	; 0x04
    217e:	89 ec       	ldi	r24, 0xC9	; 201
    2180:	94 e0       	ldi	r25, 0x04	; 4
    2182:	97 83       	std	Z+7, r25	; 0x07
    2184:	86 83       	std	Z+6, r24	; 0x06
    2186:	8e e7       	ldi	r24, 0x7E	; 126
    2188:	94 e0       	ldi	r25, 0x04	; 4
    218a:	91 87       	std	Z+9, r25	; 0x09
    218c:	80 87       	std	Z+8, r24	; 0x08
    218e:	08 95       	ret

00002190 <get_level>:

// Returns the current level
uint8_t get_level(void) {
	uint8_t return_value = level;
	return return_value;
}
    2190:	80 91 e5 02 	lds	r24, 0x02E5	; 0x8002e5 <level>
    2194:	08 95       	ret

00002196 <get_lane_data>:

// Returns the lane data for the particular lane requested.
// Depending on the level different patterns will be provided.
uint64_t get_lane_data(uint8_t lane) {
	uint64_t return_value = lane_data_list[pattern][lane];
    2196:	20 91 e4 02 	lds	r18, 0x02E4	; 0x8002e4 <pattern>
    219a:	30 e0       	ldi	r19, 0x00	; 0
    219c:	f9 01       	movw	r30, r18
    219e:	ee 0f       	add	r30, r30
    21a0:	ff 1f       	adc	r31, r31
    21a2:	2e 0f       	add	r18, r30
    21a4:	3f 1f       	adc	r19, r31
    21a6:	28 0f       	add	r18, r24
    21a8:	31 1d       	adc	r19, r1
    21aa:	f9 01       	movw	r30, r18
    21ac:	ee 0f       	add	r30, r30
    21ae:	ff 1f       	adc	r31, r31
    21b0:	ee 0f       	add	r30, r30
    21b2:	ff 1f       	adc	r31, r31
    21b4:	ee 0f       	add	r30, r30
    21b6:	ff 1f       	adc	r31, r31
    21b8:	e2 53       	subi	r30, 0x32	; 50
    21ba:	fe 4f       	sbci	r31, 0xFE	; 254
	return return_value;
    21bc:	20 81       	ld	r18, Z
    21be:	31 81       	ldd	r19, Z+1	; 0x01
    21c0:	42 81       	ldd	r20, Z+2	; 0x02
    21c2:	53 81       	ldd	r21, Z+3	; 0x03
    21c4:	64 81       	ldd	r22, Z+4	; 0x04
    21c6:	75 81       	ldd	r23, Z+5	; 0x05
}
    21c8:	86 81       	ldd	r24, Z+6	; 0x06
    21ca:	97 81       	ldd	r25, Z+7	; 0x07
    21cc:	08 95       	ret

000021ce <get_log_data>:

// Returns the log data for the particular channel requested.
// Depending on the level different patterns will be provided.
uint32_t get_log_data(uint8_t channel) {
	uint32_t return_value = log_data_list[pattern][channel];
    21ce:	20 91 e4 02 	lds	r18, 0x02E4	; 0x8002e4 <pattern>
    21d2:	30 e0       	ldi	r19, 0x00	; 0
    21d4:	22 0f       	add	r18, r18
    21d6:	33 1f       	adc	r19, r19
    21d8:	f9 01       	movw	r30, r18
    21da:	e8 0f       	add	r30, r24
    21dc:	f1 1d       	adc	r31, r1
    21de:	ee 0f       	add	r30, r30
    21e0:	ff 1f       	adc	r31, r31
    21e2:	ee 0f       	add	r30, r30
    21e4:	ff 1f       	adc	r31, r31
    21e6:	ea 55       	subi	r30, 0x5A	; 90
    21e8:	fe 4f       	sbci	r31, 0xFE	; 254
	return return_value;
    21ea:	60 81       	ld	r22, Z
    21ec:	71 81       	ldd	r23, Z+1	; 0x01
    21ee:	82 81       	ldd	r24, Z+2	; 0x02
    21f0:	93 81       	ldd	r25, Z+3	; 0x03
}
    21f2:	08 95       	ret

000021f4 <get_lane_colours>:

// Returns the colours for the vehicles in the particlar lane requested.
// Depending on the level different colours will be provided.
PixelColour get_lane_colours(uint8_t lane) {
	PixelColour return_value = vehicle_colour_list[pattern][lane];
    21f4:	20 91 e4 02 	lds	r18, 0x02E4	; 0x8002e4 <pattern>
    21f8:	30 e0       	ldi	r19, 0x00	; 0
    21fa:	a9 01       	movw	r20, r18
    21fc:	44 0f       	add	r20, r20
    21fe:	55 1f       	adc	r21, r21
    2200:	24 0f       	add	r18, r20
    2202:	35 1f       	adc	r19, r21
    2204:	26 59       	subi	r18, 0x96	; 150
    2206:	3e 4f       	sbci	r19, 0xFE	; 254
    2208:	f9 01       	movw	r30, r18
    220a:	e8 0f       	add	r30, r24
    220c:	f1 1d       	adc	r31, r1
	return return_value;
}
    220e:	80 81       	ld	r24, Z
    2210:	08 95       	ret

00002212 <get_row_speed>:

// Returns the movement speed for the row requested.
// Depending on the level differant speeds will be provided
uint16_t get_row_speed(uint8_t row) {
	uint16_t return_value = row_speed[row];
    2212:	e8 2f       	mov	r30, r24
    2214:	f0 e0       	ldi	r31, 0x00	; 0
    2216:	ee 0f       	add	r30, r30
    2218:	ff 1f       	adc	r31, r31
    221a:	e2 55       	subi	r30, 0x52	; 82
    221c:	fd 4f       	sbci	r31, 0xFD	; 253
	return return_value;
}
    221e:	80 81       	ld	r24, Z
    2220:	91 81       	ldd	r25, Z+1	; 0x01
    2222:	08 95       	ret

00002224 <level_updater>:

// Controls the logic for the end of a level and start of a new level
void level_updater(void) {
    2224:	ff 92       	push	r15
    2226:	0f 93       	push	r16
    2228:	1f 93       	push	r17
    222a:	cf 93       	push	r28
    222c:	df 93       	push	r29
	pause_countdown(TRUE);
    222e:	81 e0       	ldi	r24, 0x01	; 1
    2230:	0e 94 ab 04 	call	0x956	; 0x956 <pause_countdown>
	for(uint8_t i = 0; i < 32; i++) {
		play_audio(NO_TRACK);
    2234:	8f ef       	ldi	r24, 0xFF	; 255
    2236:	9f ef       	ldi	r25, 0xFF	; 255
    2238:	0e 94 54 02 	call	0x4a8	; 0x4a8 <play_audio>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    223c:	2f e7       	ldi	r18, 0x7F	; 127
    223e:	88 e3       	ldi	r24, 0x38	; 56
    2240:	91 e0       	ldi	r25, 0x01	; 1
    2242:	21 50       	subi	r18, 0x01	; 1
    2244:	80 40       	sbci	r24, 0x00	; 0
    2246:	90 40       	sbci	r25, 0x00	; 0
    2248:	e1 f7       	brne	.-8      	; 0x2242 <level_updater+0x1e>
    224a:	00 c0       	rjmp	.+0      	; 0x224c <level_updater+0x28>
    224c:	00 00       	nop
}

// Controls the logic for the end of a level and start of a new level
void level_updater(void) {
	pause_countdown(TRUE);
	for(uint8_t i = 0; i < 32; i++) {
    224e:	c0 e0       	ldi	r28, 0x00	; 0
    2250:	10 c0       	rjmp	.+32     	; 0x2272 <level_updater+0x4e>
		play_audio(NO_TRACK);
    2252:	8f ef       	ldi	r24, 0xFF	; 255
    2254:	9f ef       	ldi	r25, 0xFF	; 255
    2256:	0e 94 54 02 	call	0x4a8	; 0x4a8 <play_audio>
    225a:	2f e7       	ldi	r18, 0x7F	; 127
    225c:	88 e3       	ldi	r24, 0x38	; 56
    225e:	91 e0       	ldi	r25, 0x01	; 1
    2260:	21 50       	subi	r18, 0x01	; 1
    2262:	80 40       	sbci	r24, 0x00	; 0
    2264:	90 40       	sbci	r25, 0x00	; 0
    2266:	e1 f7       	brne	.-8      	; 0x2260 <level_updater+0x3c>
    2268:	00 c0       	rjmp	.+0      	; 0x226a <level_updater+0x46>
    226a:	00 00       	nop
		_delay_ms(50);
		if(i%2) {
    226c:	c0 fd       	sbrc	r28, 0
			ledmatrix_shift_display_left();
    226e:	0e 94 8a 10 	call	0x2114	; 0x2114 <ledmatrix_shift_display_left>
}

// Controls the logic for the end of a level and start of a new level
void level_updater(void) {
	pause_countdown(TRUE);
	for(uint8_t i = 0; i < 32; i++) {
    2272:	cf 5f       	subi	r28, 0xFF	; 255
    2274:	c0 32       	cpi	r28, 0x20	; 32
    2276:	69 f7       	brne	.-38     	; 0x2252 <level_updater+0x2e>

/////////////////////////////// Private (Helper) Functions /////////////////////

// A helper function that controls most of the end of level features
static void levelup(void) {
	if(level > 1) {
    2278:	f0 90 e5 02 	lds	r15, 0x02E5	; 0x8002e5 <level>
    227c:	21 e0       	ldi	r18, 0x01	; 1
    227e:	2f 15       	cp	r18, r15
    2280:	b8 f4       	brcc	.+46     	; 0x22b0 <level_updater+0x8c>
    2282:	ce ea       	ldi	r28, 0xAE	; 174
    2284:	d2 e0       	ldi	r29, 0x02	; 2
    2286:	08 eb       	ldi	r16, 0xB8	; 184
    2288:	12 e0       	ldi	r17, 0x02	; 2
		// reduce time for scroll speeds
		for(uint8_t i = 0; i < 5; i++) {
			uint16_t temp = row_speed[i];
			temp /= SPEED_INCREAS;
    228a:	68 81       	ld	r22, Y
    228c:	79 81       	ldd	r23, Y+1	; 0x01
    228e:	80 e0       	ldi	r24, 0x00	; 0
    2290:	90 e0       	ldi	r25, 0x00	; 0
    2292:	0e 94 36 19 	call	0x326c	; 0x326c <__floatunsisf>
    2296:	26 e6       	ldi	r18, 0x66	; 102
    2298:	36 e6       	ldi	r19, 0x66	; 102
    229a:	46 ea       	ldi	r20, 0xA6	; 166
    229c:	5f e3       	ldi	r21, 0x3F	; 63
    229e:	0e 94 95 18 	call	0x312a	; 0x312a <__divsf3>
			row_speed[i] = temp;
    22a2:	0e 94 07 19 	call	0x320e	; 0x320e <__fixunssfsi>
    22a6:	69 93       	st	Y+, r22
    22a8:	79 93       	st	Y+, r23

// A helper function that controls most of the end of level features
static void levelup(void) {
	if(level > 1) {
		// reduce time for scroll speeds
		for(uint8_t i = 0; i < 5; i++) {
    22aa:	c0 17       	cp	r28, r16
    22ac:	d1 07       	cpc	r29, r17
    22ae:	69 f7       	brne	.-38     	; 0x228a <level_updater+0x66>
			uint16_t temp = row_speed[i];
			temp /= SPEED_INCREAS;
			row_speed[i] = temp;
		}
	}
	if(pattern == PATTERN_5) {
    22b0:	80 91 e4 02 	lds	r24, 0x02E4	; 0x8002e4 <pattern>
    22b4:	84 30       	cpi	r24, 0x04	; 4
    22b6:	19 f4       	brne	.+6      	; 0x22be <level_updater+0x9a>
		pattern = PATTERN_1;
    22b8:	10 92 e4 02 	sts	0x02E4, r1	; 0x8002e4 <pattern>
    22bc:	03 c0       	rjmp	.+6      	; 0x22c4 <level_updater+0xa0>
		} else {
		pattern++;
    22be:	8f 5f       	subi	r24, 0xFF	; 255
    22c0:	80 93 e4 02 	sts	0x02E4, r24	; 0x8002e4 <pattern>
	}
	level++;
    22c4:	f3 94       	inc	r15
    22c6:	f0 92 e5 02 	sts	0x02E5, r15	; 0x8002e5 <level>
		if(i%2) {
			ledmatrix_shift_display_left();
		}
	};
	levelup();
	level_v_updater();
    22ca:	0e 94 95 10 	call	0x212a	; 0x212a <level_v_updater>
}
    22ce:	df 91       	pop	r29
    22d0:	cf 91       	pop	r28
    22d2:	1f 91       	pop	r17
    22d4:	0f 91       	pop	r16
    22d6:	ff 90       	pop	r15
    22d8:	08 95       	ret

000022da <life_v_updater>:
/////////////////////////////// Private (Helper) Functions /////////////////////

// Helper function for updating the terminal view and LEDs.
static void life_v_updater(void) {
	//Uses LEDs to show current lives
	uint8_t temp = PORTA & 0b10000011;
    22da:	82 b1       	in	r24, 0x02	; 2
	PORTA = temp | led_lives[lives];
    22dc:	e0 91 b8 02 	lds	r30, 0x02B8	; 0x8002b8 <lives>
    22e0:	f0 e0       	ldi	r31, 0x00	; 0
    22e2:	ea 5b       	subi	r30, 0xBA	; 186
    22e4:	fd 4f       	sbci	r31, 0xFD	; 253
    22e6:	83 78       	andi	r24, 0x83	; 131
    22e8:	90 81       	ld	r25, Z
    22ea:	89 2b       	or	r24, r25
    22ec:	82 b9       	out	0x02, r24	; 2
	move_cursor(15, 1);
    22ee:	61 e0       	ldi	r22, 0x01	; 1
    22f0:	70 e0       	ldi	r23, 0x00	; 0
    22f2:	8f e0       	ldi	r24, 0x0F	; 15
    22f4:	90 e0       	ldi	r25, 0x00	; 0
    22f6:	0e 94 9a 17 	call	0x2f34	; 0x2f34 <move_cursor>
	printf_P(PSTR("Lives: %u"), lives);
    22fa:	80 91 b8 02 	lds	r24, 0x02B8	; 0x8002b8 <lives>
    22fe:	1f 92       	push	r1
    2300:	8f 93       	push	r24
    2302:	8a e3       	ldi	r24, 0x3A	; 58
    2304:	91 e0       	ldi	r25, 0x01	; 1
    2306:	9f 93       	push	r25
    2308:	8f 93       	push	r24
    230a:	0e 94 18 1b 	call	0x3630	; 0x3630 <printf_P>
    230e:	0f 90       	pop	r0
    2310:	0f 90       	pop	r0
    2312:	0f 90       	pop	r0
    2314:	0f 90       	pop	r0
    2316:	08 95       	ret

00002318 <init_lives>:

// Sets the leds on PORTA to outputs and initilises lives to 3 then updates the
// terminal display.
void init_lives(void) {
	//Set output ports for life LEDs
	DDRA |= (1<<DDRA2) | (1<<DDRA3) | (1<<DDRA4) | (1<<DDRA5) | (1<<DDRA6);
    2318:	81 b1       	in	r24, 0x01	; 1
    231a:	8c 67       	ori	r24, 0x7C	; 124
    231c:	81 b9       	out	0x01, r24	; 1

	lives = 3;
    231e:	83 e0       	ldi	r24, 0x03	; 3
    2320:	80 93 b8 02 	sts	0x02B8, r24	; 0x8002b8 <lives>
	life_v_updater();
    2324:	0e 94 6d 11 	call	0x22da	; 0x22da <life_v_updater>
    2328:	08 95       	ret

0000232a <add_life>:
}

// Adds a life if the player does not have max lives
void add_life(void) {
	if(lives != MAX_LIVES) {
    232a:	80 91 b8 02 	lds	r24, 0x02B8	; 0x8002b8 <lives>
    232e:	85 30       	cpi	r24, 0x05	; 5
    2330:	29 f0       	breq	.+10     	; 0x233c <add_life+0x12>
		lives++;
    2332:	8f 5f       	subi	r24, 0xFF	; 255
    2334:	80 93 b8 02 	sts	0x02B8, r24	; 0x8002b8 <lives>
		life_v_updater();
    2338:	0e 94 6d 11 	call	0x22da	; 0x22da <life_v_updater>
    233c:	08 95       	ret

0000233e <get_lives>:

// returns the number of lives
uint8_t get_lives(void) {
	uint8_t return_value = lives;
	return return_value;
}
    233e:	80 91 b8 02 	lds	r24, 0x02B8	; 0x8002b8 <lives>
    2342:	08 95       	ret

00002344 <remove_life>:

// Removes a life if the frog is dead and returns him to the start position.
// Also clears all input and updates the display.
void remove_life(void) {
	if(is_frog_dead()) {
    2344:	0e 94 82 07 	call	0xf04	; 0xf04 <is_frog_dead>
    2348:	88 23       	and	r24, r24
    234a:	e1 f0       	breq	.+56     	; 0x2384 <remove_life+0x40>
		pause_countdown(1);
    234c:	81 e0       	ldi	r24, 0x01	; 1
    234e:	0e 94 ab 04 	call	0x956	; 0x956 <pause_countdown>
		redraw_frog();
    2352:	0e 94 85 07 	call	0xf0a	; 0xf0a <redraw_frog>
		lives--;
    2356:	80 91 b8 02 	lds	r24, 0x02B8	; 0x8002b8 <lives>
    235a:	81 50       	subi	r24, 0x01	; 1
    235c:	80 93 b8 02 	sts	0x02B8, r24	; 0x8002b8 <lives>
		life_v_updater();
    2360:	0e 94 6d 11 	call	0x22da	; 0x22da <life_v_updater>
		if(get_lives() > 0) {
    2364:	80 91 b8 02 	lds	r24, 0x02B8	; 0x8002b8 <lives>
    2368:	88 23       	and	r24, r24
    236a:	61 f0       	breq	.+24     	; 0x2384 <remove_life+0x40>
			play_audio(FROG_DIED);
    236c:	82 e0       	ldi	r24, 0x02	; 2
    236e:	90 e0       	ldi	r25, 0x00	; 0
    2370:	0e 94 54 02 	call	0x4a8	; 0x4a8 <play_audio>
			put_frog_in_start_position();
    2374:	0e 94 99 07 	call	0xf32	; 0xf32 <put_frog_in_start_position>
			clear_button_queue();
    2378:	0e 94 d9 03 	call	0x7b2	; 0x7b2 <clear_button_queue>
			clear_serial_input_buffer();
    237c:	0e 94 d2 16 	call	0x2da4	; 0x2da4 <clear_serial_input_buffer>
			clear_joystick_queue();
    2380:	0e 94 01 10 	call	0x2002	; 0x2002 <clear_joystick_queue>
    2384:	08 95       	ret

00002386 <process_serial_in>:
		lmt_channel_1 = current_time;
	}
}

static void process_serial_in(void) {
	if(serial_input_available()) {
    2386:	0e 94 cb 16 	call	0x2d96	; 0x2d96 <serial_input_available>
    238a:	88 23       	and	r24, r24
    238c:	61 f1       	breq	.+88     	; 0x23e6 <process_serial_in+0x60>
		// Serial data was available - read the data from standard input
		serial_input = fgetc(stdin);
    238e:	80 91 ff 03 	lds	r24, 0x03FF	; 0x8003ff <__iob>
    2392:	90 91 00 04 	lds	r25, 0x0400	; 0x800400 <__iob+0x1>
    2396:	0e 94 da 1a 	call	0x35b4	; 0x35b4 <fgetc>
    239a:	80 93 bb 02 	sts	0x02BB, r24	; 0x8002bb <serial_input>
		// Check if the character is part of an escape sequence
		if(characters_into_escape_sequence == 0 && serial_input == ESCAPE_CHAR) {
    239e:	90 91 b9 02 	lds	r25, 0x02B9	; 0x8002b9 <characters_into_escape_sequence>
    23a2:	91 11       	cpse	r25, r1
    23a4:	09 c0       	rjmp	.+18     	; 0x23b8 <process_serial_in+0x32>
    23a6:	8b 31       	cpi	r24, 0x1B	; 27
    23a8:	e1 f4       	brne	.+56     	; 0x23e2 <process_serial_in+0x5c>
			// We've hit the first character in an escape sequence (escape)
			characters_into_escape_sequence++;
    23aa:	81 e0       	ldi	r24, 0x01	; 1
    23ac:	80 93 b9 02 	sts	0x02B9, r24	; 0x8002b9 <characters_into_escape_sequence>
			serial_input = -1; // Don't further process this character
    23b0:	8f ef       	ldi	r24, 0xFF	; 255
    23b2:	80 93 bb 02 	sts	0x02BB, r24	; 0x8002bb <serial_input>
    23b6:	08 95       	ret
			}
		else if(characters_into_escape_sequence == 1 && serial_input == '[') {
    23b8:	91 30       	cpi	r25, 0x01	; 1
    23ba:	49 f4       	brne	.+18     	; 0x23ce <process_serial_in+0x48>
    23bc:	8b 35       	cpi	r24, 0x5B	; 91
    23be:	89 f4       	brne	.+34     	; 0x23e2 <process_serial_in+0x5c>
			// We've hit the second character in an escape sequence
			characters_into_escape_sequence++;
    23c0:	82 e0       	ldi	r24, 0x02	; 2
    23c2:	80 93 b9 02 	sts	0x02B9, r24	; 0x8002b9 <characters_into_escape_sequence>
			serial_input = -1; // Don't further process this character
    23c6:	8f ef       	ldi	r24, 0xFF	; 255
    23c8:	80 93 bb 02 	sts	0x02BB, r24	; 0x8002bb <serial_input>
    23cc:	08 95       	ret
			}
		else if(characters_into_escape_sequence == 2) {
    23ce:	92 30       	cpi	r25, 0x02	; 2
    23d0:	41 f4       	brne	.+16     	; 0x23e2 <process_serial_in+0x5c>
			// Third (and last) character in the escape sequence
			escape_sequence_char = serial_input;
    23d2:	80 93 ba 02 	sts	0x02BA, r24	; 0x8002ba <escape_sequence_char>
			serial_input = -1;  // Don't further process this character - we
    23d6:	8f ef       	ldi	r24, 0xFF	; 255
    23d8:	80 93 bb 02 	sts	0x02BB, r24	; 0x8002bb <serial_input>
			// deal with it as part of the escape sequence
			characters_into_escape_sequence = 0;
    23dc:	10 92 b9 02 	sts	0x02B9, r1	; 0x8002b9 <characters_into_escape_sequence>
    23e0:	08 95       	ret
			}
		else {
			// Character was not part of an escape sequence (or we received
			// an invalid second character in the sequence). We'll process
			// the data in the serial_input variable.
			characters_into_escape_sequence = 0;
    23e2:	10 92 b9 02 	sts	0x02B9, r1	; 0x8002b9 <characters_into_escape_sequence>
    23e6:	08 95       	ret

000023e8 <initialise_hardware>:
		handle_game_over();
	}
}

void initialise_hardware(void) {
	ledmatrix_setup();
    23e8:	0e 94 2d 10 	call	0x205a	; 0x205a <ledmatrix_setup>
	init_button_interrupts();
    23ec:	0e 94 cb 03 	call	0x796	; 0x796 <init_button_interrupts>
	// Setup serial port for 19200 baud communication with no echo
	// of incoming characters
	init_serial_stdio(19200,0);
    23f0:	40 e0       	ldi	r20, 0x00	; 0
    23f2:	60 e0       	ldi	r22, 0x00	; 0
    23f4:	7b e4       	ldi	r23, 0x4B	; 75
    23f6:	80 e0       	ldi	r24, 0x00	; 0
    23f8:	90 e0       	ldi	r25, 0x00	; 0
    23fa:	0e 94 84 16 	call	0x2d08	; 0x2d08 <init_serial_stdio>
	init_timer0();
    23fe:	0e 94 37 18 	call	0x306e	; 0x306e <init_timer0>
	init_audio();
    2402:	0e 94 06 02 	call	0x40c	; 0x40c <init_audio>
	init_highscore();
    2406:	0e 94 cf 0a 	call	0x159e	; 0x159e <init_highscore>
	init_joystick();
    240a:	0e 94 0e 10 	call	0x201c	; 0x201c <init_joystick>

	// Turn on global interrupts
	sei();
    240e:	78 94       	sei
    2410:	08 95       	ret

00002412 <splash_screen>:
}

void splash_screen(void) {
	// Clear terminal screen and output a message
	clear_terminal();
    2412:	0e 94 bd 17 	call	0x2f7a	; 0x2f7a <clear_terminal>
	set_display_attribute(FG_GREEN);
    2416:	80 e2       	ldi	r24, 0x20	; 32
    2418:	0e 94 cf 17 	call	0x2f9e	; 0x2f9e <set_display_attribute>
	draw_highscore_screen();
    241c:	0e 94 2d 0b 	call	0x165a	; 0x165a <draw_highscore_screen>
	move_cursor(37,2);
    2420:	62 e0       	ldi	r22, 0x02	; 2
    2422:	70 e0       	ldi	r23, 0x00	; 0
    2424:	85 e2       	ldi	r24, 0x25	; 37
    2426:	90 e0       	ldi	r25, 0x00	; 0
    2428:	0e 94 9a 17 	call	0x2f34	; 0x2f34 <move_cursor>
	printf_P(PSTR("Frogger"));
    242c:	87 ea       	ldi	r24, 0xA7	; 167
    242e:	91 e0       	ldi	r25, 0x01	; 1
    2430:	9f 93       	push	r25
    2432:	8f 93       	push	r24
    2434:	0e 94 18 1b 	call	0x3630	; 0x3630 <printf_P>
	move_cursor(16,3);
    2438:	63 e0       	ldi	r22, 0x03	; 3
    243a:	70 e0       	ldi	r23, 0x00	; 0
    243c:	80 e1       	ldi	r24, 0x10	; 16
    243e:	90 e0       	ldi	r25, 0x00	; 0
    2440:	0e 94 9a 17 	call	0x2f34	; 0x2f34 <move_cursor>
	printf_P(PSTR("CSSE2010/7201 project by Michael Bossner S4427719"));
    2444:	85 e7       	ldi	r24, 0x75	; 117
    2446:	91 e0       	ldi	r25, 0x01	; 1
    2448:	9f 93       	push	r25
    244a:	8f 93       	push	r24
    244c:	0e 94 18 1b 	call	0x3630	; 0x3630 <printf_P>

	// Output the scrolling message to the LED matrix
	// and wait for a push button to be pushed.
	ledmatrix_clear();
    2450:	0e 94 91 10 	call	0x2122	; 0x2122 <ledmatrix_clear>
    2454:	0f 90       	pop	r0
    2456:	0f 90       	pop	r0
    2458:	0f 90       	pop	r0
    245a:	0f 90       	pop	r0
	while(1) {
		set_scrolling_display_text("FROGGER   S4427719", COLOUR_GREEN);
    245c:	60 ef       	ldi	r22, 0xF0	; 240
    245e:	8c e4       	ldi	r24, 0x4C	; 76
    2460:	92 e0       	ldi	r25, 0x02	; 2
    2462:	0e 94 4d 15 	call	0x2a9a	; 0x2a9a <set_scrolling_display_text>
		// Scroll the message until it has scrolled off the
		// display or a button is pushed
		while(scroll_display()) {
    2466:	0d c0       	rjmp	.+26     	; 0x2482 <splash_screen+0x70>
    2468:	2f e7       	ldi	r18, 0x7F	; 127
    246a:	89 ea       	ldi	r24, 0xA9	; 169
    246c:	93 e0       	ldi	r25, 0x03	; 3
    246e:	21 50       	subi	r18, 0x01	; 1
    2470:	80 40       	sbci	r24, 0x00	; 0
    2472:	90 40       	sbci	r25, 0x00	; 0
    2474:	e1 f7       	brne	.-8      	; 0x246e <splash_screen+0x5c>
    2476:	00 c0       	rjmp	.+0      	; 0x2478 <splash_screen+0x66>
    2478:	00 00       	nop
			_delay_ms(150);
			if(button_pushed() != NO_BUTTON_PUSHED) {
    247a:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <button_pushed>
    247e:	8f 3f       	cpi	r24, 0xFF	; 255
    2480:	29 f4       	brne	.+10     	; 0x248c <splash_screen+0x7a>
	ledmatrix_clear();
	while(1) {
		set_scrolling_display_text("FROGGER   S4427719", COLOUR_GREEN);
		// Scroll the message until it has scrolled off the
		// display or a button is pushed
		while(scroll_display()) {
    2482:	0e 94 5c 15 	call	0x2ab8	; 0x2ab8 <scroll_display>
    2486:	81 11       	cpse	r24, r1
    2488:	ef cf       	rjmp	.-34     	; 0x2468 <splash_screen+0x56>
    248a:	e8 cf       	rjmp	.-48     	; 0x245c <splash_screen+0x4a>
    248c:	08 95       	ret

0000248e <new_game>:
	}
}

void new_game(void) {
	// Clear the serial terminal
	clear_terminal();
    248e:	0e 94 bd 17 	call	0x2f7a	; 0x2f7a <clear_terminal>
	hide_cursor();
    2492:	0e 94 dc 17 	call	0x2fb8	; 0x2fb8 <hide_cursor>

	// Initialise the game and display
	initialise_game();
    2496:	0e 94 c4 07 	call	0xf88	; 0xf88 <initialise_game>

	// Initialise the score
	init_score();
    249a:	0e 94 22 15 	call	0x2a44	; 0x2a44 <init_score>
	init_lives();
    249e:	0e 94 8c 11 	call	0x2318	; 0x2318 <init_lives>
	init_level();
    24a2:	0e 94 aa 10 	call	0x2154	; 0x2154 <init_level>
	init_countdown();
    24a6:	0e 94 7f 04 	call	0x8fe	; 0x8fe <init_countdown>

	// Clear all button pushes or serial inputs if any are waiting
	clear_button_queue();
    24aa:	0e 94 d9 03 	call	0x7b2	; 0x7b2 <clear_button_queue>
	clear_serial_input_buffer();
    24ae:	0e 94 d2 16 	call	0x2da4	; 0x2da4 <clear_serial_input_buffer>
	clear_joystick_queue();
    24b2:	0e 94 01 10 	call	0x2002	; 0x2002 <clear_joystick_queue>
    24b6:	08 95       	ret

000024b8 <play_game>:
}

void play_game(void) {
    24b8:	cf 93       	push	r28
    24ba:	df 93       	push	r29
	// Get the current time and remember this as the last time the vehicles
	// and logs were moved.
	current_time = get_current_time();
    24bc:	0e 94 51 18 	call	0x30a2	; 0x30a2 <get_current_time>
    24c0:	60 93 d4 02 	sts	0x02D4, r22	; 0x8002d4 <current_time>
    24c4:	70 93 d5 02 	sts	0x02D5, r23	; 0x8002d5 <current_time+0x1>
    24c8:	80 93 d6 02 	sts	0x02D6, r24	; 0x8002d6 <current_time+0x2>
    24cc:	90 93 d7 02 	sts	0x02D7, r25	; 0x8002d7 <current_time+0x3>
	lmt_lane_0 = current_time; // lmt = last move time
    24d0:	60 93 d0 02 	sts	0x02D0, r22	; 0x8002d0 <lmt_lane_0>
    24d4:	70 93 d1 02 	sts	0x02D1, r23	; 0x8002d1 <lmt_lane_0+0x1>
    24d8:	80 93 d2 02 	sts	0x02D2, r24	; 0x8002d2 <lmt_lane_0+0x2>
    24dc:	90 93 d3 02 	sts	0x02D3, r25	; 0x8002d3 <lmt_lane_0+0x3>
	lmt_lane_1 = current_time;
    24e0:	60 93 cc 02 	sts	0x02CC, r22	; 0x8002cc <lmt_lane_1>
    24e4:	70 93 cd 02 	sts	0x02CD, r23	; 0x8002cd <lmt_lane_1+0x1>
    24e8:	80 93 ce 02 	sts	0x02CE, r24	; 0x8002ce <lmt_lane_1+0x2>
    24ec:	90 93 cf 02 	sts	0x02CF, r25	; 0x8002cf <lmt_lane_1+0x3>
	lmt_lane_2 = current_time;
    24f0:	60 93 c8 02 	sts	0x02C8, r22	; 0x8002c8 <lmt_lane_2>
    24f4:	70 93 c9 02 	sts	0x02C9, r23	; 0x8002c9 <lmt_lane_2+0x1>
    24f8:	80 93 ca 02 	sts	0x02CA, r24	; 0x8002ca <lmt_lane_2+0x2>
    24fc:	90 93 cb 02 	sts	0x02CB, r25	; 0x8002cb <lmt_lane_2+0x3>
	lmt_channel_0 = current_time;
    2500:	60 93 c4 02 	sts	0x02C4, r22	; 0x8002c4 <lmt_channel_0>
    2504:	70 93 c5 02 	sts	0x02C5, r23	; 0x8002c5 <lmt_channel_0+0x1>
    2508:	80 93 c6 02 	sts	0x02C6, r24	; 0x8002c6 <lmt_channel_0+0x2>
    250c:	90 93 c7 02 	sts	0x02C7, r25	; 0x8002c7 <lmt_channel_0+0x3>
	lmt_channel_1 = current_time;
    2510:	60 93 c0 02 	sts	0x02C0, r22	; 0x8002c0 <lmt_channel_1>
    2514:	70 93 c1 02 	sts	0x02C1, r23	; 0x8002c1 <lmt_channel_1+0x1>
    2518:	80 93 c2 02 	sts	0x02C2, r24	; 0x8002c2 <lmt_channel_1+0x2>
    251c:	90 93 c3 02 	sts	0x02C3, r25	; 0x8002c3 <lmt_channel_1+0x3>
	button_repeat_time = current_time;
    2520:	60 93 bc 02 	sts	0x02BC, r22	; 0x8002bc <button_repeat_time>
    2524:	70 93 bd 02 	sts	0x02BD, r23	; 0x8002bd <button_repeat_time+0x1>
    2528:	80 93 be 02 	sts	0x02BE, r24	; 0x8002be <button_repeat_time+0x2>
    252c:	90 93 bf 02 	sts	0x02BF, r25	; 0x8002bf <button_repeat_time+0x3>
		// variables will be set to a value other than -1 if input is available.
		// (We don't initalise button to -1 since button_pushed() will return -1
		// if no button pushes are waiting to be returned.)
		// Button pushes take priority over serial input. If there are both then
		// we'll retrieve the serial input the next time through this loop
		serial_input = -1;
    2530:	cf ef       	ldi	r28, 0xFF	; 255
	lmt_channel_0 = current_time;
	lmt_channel_1 = current_time;
	button_repeat_time = current_time;

	// We play the game while the frog is alive
	while(get_lives() > 0) {
    2532:	12 c2       	rjmp	.+1060   	; 0x2958 <play_game+0x4a0>
		if(!is_frog_dead() && frog_has_reached_riverbank()) {
    2534:	0e 94 82 07 	call	0xf04	; 0xf04 <is_frog_dead>
    2538:	81 11       	cpse	r24, r1
    253a:	19 c0       	rjmp	.+50     	; 0x256e <play_game+0xb6>
    253c:	0e 94 73 07 	call	0xee6	; 0xee6 <frog_has_reached_riverbank>
    2540:	88 23       	and	r24, r24
    2542:	a9 f0       	breq	.+42     	; 0x256e <play_game+0xb6>
			// Frog reached the other side successfully but the
			// riverbank isn't full, put a new frog at the start
			if(is_riverbank_full()) {
    2544:	0e 94 69 07 	call	0xed2	; 0xed2 <is_riverbank_full>
    2548:	88 23       	and	r24, r24
    254a:	59 f0       	breq	.+22     	; 0x2562 <play_game+0xaa>
				play_audio(FROG_LEVELUP);
    254c:	84 e0       	ldi	r24, 0x04	; 4
    254e:	90 e0       	ldi	r25, 0x00	; 0
    2550:	0e 94 54 02 	call	0x4a8	; 0x4a8 <play_audio>
				level_updater();
    2554:	0e 94 12 11 	call	0x2224	; 0x2224 <level_updater>
				initialise_game();
    2558:	0e 94 c4 07 	call	0xf88	; 0xf88 <initialise_game>
				add_life();
    255c:	0e 94 95 11 	call	0x232a	; 0x232a <add_life>
    2560:	06 c0       	rjmp	.+12     	; 0x256e <play_game+0xb6>
			} else {
				play_audio(FROG_MADE_IT);
    2562:	83 e0       	ldi	r24, 0x03	; 3
    2564:	90 e0       	ldi	r25, 0x00	; 0
    2566:	0e 94 54 02 	call	0x4a8	; 0x4a8 <play_audio>
				put_frog_in_start_position();
    256a:	0e 94 99 07 	call	0xf32	; 0xf32 <put_frog_in_start_position>
		// variables will be set to a value other than -1 if input is available.
		// (We don't initalise button to -1 since button_pushed() will return -1
		// if no button pushes are waiting to be returned.)
		// Button pushes take priority over serial input. If there are both then
		// we'll retrieve the serial input the next time through this loop
		serial_input = -1;
    256e:	c0 93 bb 02 	sts	0x02BB, r28	; 0x8002bb <serial_input>
		escape_sequence_char = -1;
    2572:	c0 93 ba 02 	sts	0x02BA, r28	; 0x8002ba <escape_sequence_char>

		joystick = get_joystick_move();
    2576:	0e 94 f5 0f 	call	0x1fea	; 0x1fea <get_joystick_move>
    257a:	80 93 79 01 	sts	0x0179, r24	; 0x800179 <joystick>
		if(!joystick) {
    257e:	81 11       	cpse	r24, r1
    2580:	4e c0       	rjmp	.+156    	; 0x261e <play_game+0x166>
			button = button_pushed();
    2582:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <button_pushed>
    2586:	80 93 7a 01 	sts	0x017A, r24	; 0x80017a <button>
			if(button != NO_BUTTON_PUSHED) {
    258a:	8f 3f       	cpi	r24, 0xFF	; 255
    258c:	81 f0       	breq	.+32     	; 0x25ae <play_game+0xf6>
				button_repeat_time = current_time;
    258e:	80 91 d4 02 	lds	r24, 0x02D4	; 0x8002d4 <current_time>
    2592:	90 91 d5 02 	lds	r25, 0x02D5	; 0x8002d5 <current_time+0x1>
    2596:	a0 91 d6 02 	lds	r26, 0x02D6	; 0x8002d6 <current_time+0x2>
    259a:	b0 91 d7 02 	lds	r27, 0x02D7	; 0x8002d7 <current_time+0x3>
    259e:	80 93 bc 02 	sts	0x02BC, r24	; 0x8002bc <button_repeat_time>
    25a2:	90 93 bd 02 	sts	0x02BD, r25	; 0x8002bd <button_repeat_time+0x1>
    25a6:	a0 93 be 02 	sts	0x02BE, r26	; 0x8002be <button_repeat_time+0x2>
    25aa:	b0 93 bf 02 	sts	0x02BF, r27	; 0x8002bf <button_repeat_time+0x3>
			}

			if(is_button_held() != NO_BUTTON_PUSHED &&
    25ae:	0e 94 10 04 	call	0x820	; 0x820 <is_button_held>
    25b2:	8f 3f       	cpi	r24, 0xFF	; 255
    25b4:	69 f1       	breq	.+90     	; 0x2610 <play_game+0x158>
    25b6:	80 91 bc 02 	lds	r24, 0x02BC	; 0x8002bc <button_repeat_time>
    25ba:	90 91 bd 02 	lds	r25, 0x02BD	; 0x8002bd <button_repeat_time+0x1>
    25be:	a0 91 be 02 	lds	r26, 0x02BE	; 0x8002be <button_repeat_time+0x2>
    25c2:	b0 91 bf 02 	lds	r27, 0x02BF	; 0x8002bf <button_repeat_time+0x3>
    25c6:	86 50       	subi	r24, 0x06	; 6
    25c8:	9f 4f       	sbci	r25, 0xFF	; 255
    25ca:	af 4f       	sbci	r26, 0xFF	; 255
    25cc:	bf 4f       	sbci	r27, 0xFF	; 255
    25ce:	40 91 d4 02 	lds	r20, 0x02D4	; 0x8002d4 <current_time>
    25d2:	50 91 d5 02 	lds	r21, 0x02D5	; 0x8002d5 <current_time+0x1>
    25d6:	60 91 d6 02 	lds	r22, 0x02D6	; 0x8002d6 <current_time+0x2>
    25da:	70 91 d7 02 	lds	r23, 0x02D7	; 0x8002d7 <current_time+0x3>
    25de:	48 17       	cp	r20, r24
    25e0:	59 07       	cpc	r21, r25
    25e2:	6a 07       	cpc	r22, r26
    25e4:	7b 07       	cpc	r23, r27
    25e6:	a0 f0       	brcs	.+40     	; 0x2610 <play_game+0x158>
					current_time >= button_repeat_time + BUTTON_REPEAT) {
						button = is_button_held();
    25e8:	0e 94 10 04 	call	0x820	; 0x820 <is_button_held>
    25ec:	80 93 7a 01 	sts	0x017A, r24	; 0x80017a <button>
						button_repeat_time = current_time;
    25f0:	80 91 d4 02 	lds	r24, 0x02D4	; 0x8002d4 <current_time>
    25f4:	90 91 d5 02 	lds	r25, 0x02D5	; 0x8002d5 <current_time+0x1>
    25f8:	a0 91 d6 02 	lds	r26, 0x02D6	; 0x8002d6 <current_time+0x2>
    25fc:	b0 91 d7 02 	lds	r27, 0x02D7	; 0x8002d7 <current_time+0x3>
    2600:	80 93 bc 02 	sts	0x02BC, r24	; 0x8002bc <button_repeat_time>
    2604:	90 93 bd 02 	sts	0x02BD, r25	; 0x8002bd <button_repeat_time+0x1>
    2608:	a0 93 be 02 	sts	0x02BE, r26	; 0x8002be <button_repeat_time+0x2>
    260c:	b0 93 bf 02 	sts	0x02BF, r27	; 0x8002bf <button_repeat_time+0x3>
			}

			if(button == NO_BUTTON_PUSHED) {
    2610:	80 91 7a 01 	lds	r24, 0x017A	; 0x80017a <button>
    2614:	8f 3f       	cpi	r24, 0xFF	; 255
    2616:	41 f5       	brne	.+80     	; 0x2668 <play_game+0x1b0>
				process_serial_in();
    2618:	0e 94 c3 11 	call	0x2386	; 0x2386 <process_serial_in>
    261c:	25 c0       	rjmp	.+74     	; 0x2668 <play_game+0x1b0>
			}
		}

		else if(joystick >= JOYSTICK_DIAGONAL_MOVE) {
    261e:	85 30       	cpi	r24, 0x05	; 5
    2620:	1c f1       	brlt	.+70     	; 0x2668 <play_game+0x1b0>
	// else - invalid input or we're part way through an escape sequence -
	// do nothing
}

static void process_diagonal_move(void) {
	if(joystick == MOVE_UP_LEFT) {
    2622:	85 30       	cpi	r24, 0x05	; 5
    2624:	39 f4       	brne	.+14     	; 0x2634 <play_game+0x17c>
		play_audio(FROG_JUMP);
    2626:	81 e0       	ldi	r24, 0x01	; 1
    2628:	90 e0       	ldi	r25, 0x00	; 0
    262a:	0e 94 54 02 	call	0x4a8	; 0x4a8 <play_audio>
		move_frog_up_left();
    262e:	0e 94 6a 08 	call	0x10d4	; 0x10d4 <move_frog_up_left>
    2632:	1a c0       	rjmp	.+52     	; 0x2668 <play_game+0x1b0>
	}
	else if(joystick == MOVE_UP_RIGHT) {
    2634:	86 30       	cpi	r24, 0x06	; 6
    2636:	39 f4       	brne	.+14     	; 0x2646 <play_game+0x18e>
		play_audio(FROG_JUMP);
    2638:	81 e0       	ldi	r24, 0x01	; 1
    263a:	90 e0       	ldi	r25, 0x00	; 0
    263c:	0e 94 54 02 	call	0x4a8	; 0x4a8 <play_audio>
		move_frog_up_right();
    2640:	0e 94 b1 08 	call	0x1162	; 0x1162 <move_frog_up_right>
    2644:	11 c0       	rjmp	.+34     	; 0x2668 <play_game+0x1b0>
	}
	else if(joystick == MOVE_DOWN_LEFT) {
    2646:	87 30       	cpi	r24, 0x07	; 7
    2648:	39 f4       	brne	.+14     	; 0x2658 <play_game+0x1a0>
		play_audio(FROG_JUMP);
    264a:	81 e0       	ldi	r24, 0x01	; 1
    264c:	90 e0       	ldi	r25, 0x00	; 0
    264e:	0e 94 54 02 	call	0x4a8	; 0x4a8 <play_audio>
		move_frog_down_left();
    2652:	0e 94 f8 08 	call	0x11f0	; 0x11f0 <move_frog_down_left>
    2656:	08 c0       	rjmp	.+16     	; 0x2668 <play_game+0x1b0>
	}
	else if(joystick == MOVE_DOWN_RIGHT) {
    2658:	88 30       	cpi	r24, 0x08	; 8
    265a:	31 f4       	brne	.+12     	; 0x2668 <play_game+0x1b0>
		play_audio(FROG_JUMP);
    265c:	81 e0       	ldi	r24, 0x01	; 1
    265e:	90 e0       	ldi	r25, 0x00	; 0
    2660:	0e 94 54 02 	call	0x4a8	; 0x4a8 <play_audio>
		move_frog_down_right();
    2664:	0e 94 1d 09 	call	0x123a	; 0x123a <move_frog_down_right>
	}
}

static void process_input(void) {
	// Process the input.
	if(button==3 || escape_sequence_char=='D' || serial_input=='A' ||
    2668:	90 91 7a 01 	lds	r25, 0x017A	; 0x80017a <button>
    266c:	93 30       	cpi	r25, 0x03	; 3
    266e:	69 f0       	breq	.+26     	; 0x268a <play_game+0x1d2>
    2670:	20 91 ba 02 	lds	r18, 0x02BA	; 0x8002ba <escape_sequence_char>
    2674:	24 34       	cpi	r18, 0x44	; 68
    2676:	49 f0       	breq	.+18     	; 0x268a <play_game+0x1d2>
    2678:	80 91 bb 02 	lds	r24, 0x02BB	; 0x8002bb <serial_input>
    267c:	8f 7d       	andi	r24, 0xDF	; 223
    267e:	81 34       	cpi	r24, 0x41	; 65
    2680:	21 f0       	breq	.+8      	; 0x268a <play_game+0x1d2>
	serial_input=='a' || joystick==MOVE_LEFT) {
    2682:	30 91 79 01 	lds	r19, 0x0179	; 0x800179 <joystick>
    2686:	32 30       	cpi	r19, 0x02	; 2
    2688:	39 f4       	brne	.+14     	; 0x2698 <play_game+0x1e0>
		// Attempt to move left
		play_audio(FROG_JUMP);
    268a:	81 e0       	ldi	r24, 0x01	; 1
    268c:	90 e0       	ldi	r25, 0x00	; 0
    268e:	0e 94 54 02 	call	0x4a8	; 0x4a8 <play_audio>
		move_frog_to_left();
    2692:	0e 94 30 08 	call	0x1060	; 0x1060 <move_frog_to_left>
    2696:	4d c0       	rjmp	.+154    	; 0x2732 <play_game+0x27a>
	} else if(button==2 || escape_sequence_char=='A' || serial_input=='W' ||
    2698:	92 30       	cpi	r25, 0x02	; 2
    269a:	31 f0       	breq	.+12     	; 0x26a8 <play_game+0x1f0>
    269c:	21 34       	cpi	r18, 0x41	; 65
    269e:	21 f0       	breq	.+8      	; 0x26a8 <play_game+0x1f0>
    26a0:	87 35       	cpi	r24, 0x57	; 87
    26a2:	11 f0       	breq	.+4      	; 0x26a8 <play_game+0x1f0>
	serial_input=='w' || joystick==MOVE_UP) {
    26a4:	31 30       	cpi	r19, 0x01	; 1
    26a6:	39 f4       	brne	.+14     	; 0x26b6 <play_game+0x1fe>
		// Attempt to move forward
		play_audio(FROG_JUMP);
    26a8:	81 e0       	ldi	r24, 0x01	; 1
    26aa:	90 e0       	ldi	r25, 0x00	; 0
    26ac:	0e 94 54 02 	call	0x4a8	; 0x4a8 <play_audio>
		move_frog_forward();
    26b0:	0e 94 dc 07 	call	0xfb8	; 0xfb8 <move_frog_forward>
    26b4:	3e c0       	rjmp	.+124    	; 0x2732 <play_game+0x27a>
	} else if(button==1 || escape_sequence_char=='B' || serial_input=='S' ||
    26b6:	91 30       	cpi	r25, 0x01	; 1
    26b8:	31 f0       	breq	.+12     	; 0x26c6 <play_game+0x20e>
    26ba:	22 34       	cpi	r18, 0x42	; 66
    26bc:	21 f0       	breq	.+8      	; 0x26c6 <play_game+0x20e>
    26be:	83 35       	cpi	r24, 0x53	; 83
    26c0:	11 f0       	breq	.+4      	; 0x26c6 <play_game+0x20e>
	serial_input=='s' || joystick==MOVE_DOWN) {
    26c2:	34 30       	cpi	r19, 0x04	; 4
    26c4:	39 f4       	brne	.+14     	; 0x26d4 <play_game+0x21c>
		// Attempt to move down
		play_audio(FROG_JUMP);
    26c6:	81 e0       	ldi	r24, 0x01	; 1
    26c8:	90 e0       	ldi	r25, 0x00	; 0
    26ca:	0e 94 54 02 	call	0x4a8	; 0x4a8 <play_audio>
		move_frog_backward();
    26ce:	0e 94 15 08 	call	0x102a	; 0x102a <move_frog_backward>
    26d2:	2f c0       	rjmp	.+94     	; 0x2732 <play_game+0x27a>
	} else if(button==0 || escape_sequence_char=='C' || serial_input=='D' ||
    26d4:	99 23       	and	r25, r25
    26d6:	31 f0       	breq	.+12     	; 0x26e4 <play_game+0x22c>
    26d8:	23 34       	cpi	r18, 0x43	; 67
    26da:	21 f0       	breq	.+8      	; 0x26e4 <play_game+0x22c>
    26dc:	84 34       	cpi	r24, 0x44	; 68
    26de:	11 f0       	breq	.+4      	; 0x26e4 <play_game+0x22c>
	serial_input=='d' || joystick==MOVE_RIGHT) {
    26e0:	33 30       	cpi	r19, 0x03	; 3
    26e2:	39 f4       	brne	.+14     	; 0x26f2 <play_game+0x23a>
		// Attempt to move right
		play_audio(FROG_JUMP);
    26e4:	81 e0       	ldi	r24, 0x01	; 1
    26e6:	90 e0       	ldi	r25, 0x00	; 0
    26e8:	0e 94 54 02 	call	0x4a8	; 0x4a8 <play_audio>
		move_frog_to_right();
    26ec:	0e 94 4d 08 	call	0x109a	; 0x109a <move_frog_to_right>
    26f0:	20 c0       	rjmp	.+64     	; 0x2732 <play_game+0x27a>
	} else if(serial_input == 'p' || serial_input == 'P') {
    26f2:	80 35       	cpi	r24, 0x50	; 80
    26f4:	f1 f4       	brne	.+60     	; 0x2732 <play_game+0x27a>
		pause_timer(1);
    26f6:	81 e0       	ldi	r24, 0x01	; 1
    26f8:	0e 94 5f 18 	call	0x30be	; 0x30be <pause_timer>
		pause_countdown(1);
    26fc:	81 e0       	ldi	r24, 0x01	; 1
    26fe:	0e 94 ab 04 	call	0x956	; 0x956 <pause_countdown>
		uint8_t temp = DDRD;
    2702:	da b1       	in	r29, 0x0a	; 10
		DDRD &= DDRD4_OFF;
    2704:	54 98       	cbi	0x0a, 4	; 10

		serial_input = -1;
    2706:	c0 93 bb 02 	sts	0x02BB, r28	; 0x8002bb <serial_input>
		while(1) {
			process_serial_in();
    270a:	0e 94 c3 11 	call	0x2386	; 0x2386 <process_serial_in>
			if(serial_input == 'p' || serial_input == 'P') {
    270e:	80 91 bb 02 	lds	r24, 0x02BB	; 0x8002bb <serial_input>
    2712:	8f 7d       	andi	r24, 0xDF	; 223
    2714:	80 35       	cpi	r24, 0x50	; 80
    2716:	c9 f7       	brne	.-14     	; 0x270a <play_game+0x252>
				break;
			}
		}
		pause_timer(0);
    2718:	80 e0       	ldi	r24, 0x00	; 0
    271a:	0e 94 5f 18 	call	0x30be	; 0x30be <pause_timer>
		pause_countdown(0);
    271e:	80 e0       	ldi	r24, 0x00	; 0
    2720:	0e 94 ab 04 	call	0x956	; 0x956 <pause_countdown>
		DDRD = temp;
    2724:	da b9       	out	0x0a, r29	; 10
		clear_button_queue();
    2726:	0e 94 d9 03 	call	0x7b2	; 0x7b2 <clear_button_queue>
		clear_serial_input_buffer();
    272a:	0e 94 d2 16 	call	0x2da4	; 0x2da4 <clear_serial_input_buffer>
		clear_joystick_queue();
    272e:	0e 94 01 10 	call	0x2002	; 0x2002 <clear_joystick_queue>
}

/////////////////////////////// Private (Helper) Functions /////////////////////

static void move_lanes(void) {
	current_time = get_current_time();
    2732:	0e 94 51 18 	call	0x30a2	; 0x30a2 <get_current_time>
    2736:	60 93 d4 02 	sts	0x02D4, r22	; 0x8002d4 <current_time>
    273a:	70 93 d5 02 	sts	0x02D5, r23	; 0x8002d5 <current_time+0x1>
    273e:	80 93 d6 02 	sts	0x02D6, r24	; 0x8002d6 <current_time+0x2>
    2742:	90 93 d7 02 	sts	0x02D7, r25	; 0x8002d7 <current_time+0x3>
	if(!is_frog_dead() && current_time >= lmt_lane_0 +
    2746:	0e 94 82 07 	call	0xf04	; 0xf04 <is_frog_dead>
    274a:	81 11       	cpse	r24, r1
    274c:	2f c0       	rjmp	.+94     	; 0x27ac <play_game+0x2f4>
	get_row_speed(FIRST_VEHICLE_ROW_SPEED)) {
    274e:	0e 94 09 11 	call	0x2212	; 0x2212 <get_row_speed>

/////////////////////////////// Private (Helper) Functions /////////////////////

static void move_lanes(void) {
	current_time = get_current_time();
	if(!is_frog_dead() && current_time >= lmt_lane_0 +
    2752:	40 91 d0 02 	lds	r20, 0x02D0	; 0x8002d0 <lmt_lane_0>
    2756:	50 91 d1 02 	lds	r21, 0x02D1	; 0x8002d1 <lmt_lane_0+0x1>
    275a:	60 91 d2 02 	lds	r22, 0x02D2	; 0x8002d2 <lmt_lane_0+0x2>
    275e:	70 91 d3 02 	lds	r23, 0x02D3	; 0x8002d3 <lmt_lane_0+0x3>
    2762:	48 0f       	add	r20, r24
    2764:	59 1f       	adc	r21, r25
    2766:	61 1d       	adc	r22, r1
    2768:	71 1d       	adc	r23, r1
    276a:	80 91 d4 02 	lds	r24, 0x02D4	; 0x8002d4 <current_time>
    276e:	90 91 d5 02 	lds	r25, 0x02D5	; 0x8002d5 <current_time+0x1>
    2772:	a0 91 d6 02 	lds	r26, 0x02D6	; 0x8002d6 <current_time+0x2>
    2776:	b0 91 d7 02 	lds	r27, 0x02D7	; 0x8002d7 <current_time+0x3>
    277a:	84 17       	cp	r24, r20
    277c:	95 07       	cpc	r25, r21
    277e:	a6 07       	cpc	r26, r22
    2780:	b7 07       	cpc	r27, r23
    2782:	a0 f0       	brcs	.+40     	; 0x27ac <play_game+0x2f4>
	get_row_speed(FIRST_VEHICLE_ROW_SPEED)) {
		scroll_vehicle_lane(0, 1);
    2784:	61 e0       	ldi	r22, 0x01	; 1
    2786:	80 e0       	ldi	r24, 0x00	; 0
    2788:	0e 94 42 09 	call	0x1284	; 0x1284 <scroll_vehicle_lane>
		lmt_lane_0 = current_time;
    278c:	80 91 d4 02 	lds	r24, 0x02D4	; 0x8002d4 <current_time>
    2790:	90 91 d5 02 	lds	r25, 0x02D5	; 0x8002d5 <current_time+0x1>
    2794:	a0 91 d6 02 	lds	r26, 0x02D6	; 0x8002d6 <current_time+0x2>
    2798:	b0 91 d7 02 	lds	r27, 0x02D7	; 0x8002d7 <current_time+0x3>
    279c:	80 93 d0 02 	sts	0x02D0, r24	; 0x8002d0 <lmt_lane_0>
    27a0:	90 93 d1 02 	sts	0x02D1, r25	; 0x8002d1 <lmt_lane_0+0x1>
    27a4:	a0 93 d2 02 	sts	0x02D2, r26	; 0x8002d2 <lmt_lane_0+0x2>
    27a8:	b0 93 d3 02 	sts	0x02D3, r27	; 0x8002d3 <lmt_lane_0+0x3>
	}
	if(!is_frog_dead() && current_time >= lmt_lane_1 +
    27ac:	0e 94 82 07 	call	0xf04	; 0xf04 <is_frog_dead>
    27b0:	81 11       	cpse	r24, r1
    27b2:	30 c0       	rjmp	.+96     	; 0x2814 <play_game+0x35c>
	get_row_speed(SECOND_VEHICLE_ROW_SPEED)) {
    27b4:	81 e0       	ldi	r24, 0x01	; 1
    27b6:	0e 94 09 11 	call	0x2212	; 0x2212 <get_row_speed>
	if(!is_frog_dead() && current_time >= lmt_lane_0 +
	get_row_speed(FIRST_VEHICLE_ROW_SPEED)) {
		scroll_vehicle_lane(0, 1);
		lmt_lane_0 = current_time;
	}
	if(!is_frog_dead() && current_time >= lmt_lane_1 +
    27ba:	40 91 cc 02 	lds	r20, 0x02CC	; 0x8002cc <lmt_lane_1>
    27be:	50 91 cd 02 	lds	r21, 0x02CD	; 0x8002cd <lmt_lane_1+0x1>
    27c2:	60 91 ce 02 	lds	r22, 0x02CE	; 0x8002ce <lmt_lane_1+0x2>
    27c6:	70 91 cf 02 	lds	r23, 0x02CF	; 0x8002cf <lmt_lane_1+0x3>
    27ca:	48 0f       	add	r20, r24
    27cc:	59 1f       	adc	r21, r25
    27ce:	61 1d       	adc	r22, r1
    27d0:	71 1d       	adc	r23, r1
    27d2:	80 91 d4 02 	lds	r24, 0x02D4	; 0x8002d4 <current_time>
    27d6:	90 91 d5 02 	lds	r25, 0x02D5	; 0x8002d5 <current_time+0x1>
    27da:	a0 91 d6 02 	lds	r26, 0x02D6	; 0x8002d6 <current_time+0x2>
    27de:	b0 91 d7 02 	lds	r27, 0x02D7	; 0x8002d7 <current_time+0x3>
    27e2:	84 17       	cp	r24, r20
    27e4:	95 07       	cpc	r25, r21
    27e6:	a6 07       	cpc	r26, r22
    27e8:	b7 07       	cpc	r27, r23
    27ea:	a0 f0       	brcs	.+40     	; 0x2814 <play_game+0x35c>
	get_row_speed(SECOND_VEHICLE_ROW_SPEED)) {
		scroll_vehicle_lane(1, -1);
    27ec:	6c 2f       	mov	r22, r28
    27ee:	81 e0       	ldi	r24, 0x01	; 1
    27f0:	0e 94 42 09 	call	0x1284	; 0x1284 <scroll_vehicle_lane>
		lmt_lane_1 = current_time;
    27f4:	80 91 d4 02 	lds	r24, 0x02D4	; 0x8002d4 <current_time>
    27f8:	90 91 d5 02 	lds	r25, 0x02D5	; 0x8002d5 <current_time+0x1>
    27fc:	a0 91 d6 02 	lds	r26, 0x02D6	; 0x8002d6 <current_time+0x2>
    2800:	b0 91 d7 02 	lds	r27, 0x02D7	; 0x8002d7 <current_time+0x3>
    2804:	80 93 cc 02 	sts	0x02CC, r24	; 0x8002cc <lmt_lane_1>
    2808:	90 93 cd 02 	sts	0x02CD, r25	; 0x8002cd <lmt_lane_1+0x1>
    280c:	a0 93 ce 02 	sts	0x02CE, r26	; 0x8002ce <lmt_lane_1+0x2>
    2810:	b0 93 cf 02 	sts	0x02CF, r27	; 0x8002cf <lmt_lane_1+0x3>
	}
	if(!is_frog_dead() && current_time >= lmt_lane_2 +
    2814:	0e 94 82 07 	call	0xf04	; 0xf04 <is_frog_dead>
    2818:	81 11       	cpse	r24, r1
    281a:	30 c0       	rjmp	.+96     	; 0x287c <play_game+0x3c4>
	get_row_speed(THIRD_VEHICLE_ROW_SPEED)) {
    281c:	82 e0       	ldi	r24, 0x02	; 2
    281e:	0e 94 09 11 	call	0x2212	; 0x2212 <get_row_speed>
	if(!is_frog_dead() && current_time >= lmt_lane_1 +
	get_row_speed(SECOND_VEHICLE_ROW_SPEED)) {
		scroll_vehicle_lane(1, -1);
		lmt_lane_1 = current_time;
	}
	if(!is_frog_dead() && current_time >= lmt_lane_2 +
    2822:	40 91 c8 02 	lds	r20, 0x02C8	; 0x8002c8 <lmt_lane_2>
    2826:	50 91 c9 02 	lds	r21, 0x02C9	; 0x8002c9 <lmt_lane_2+0x1>
    282a:	60 91 ca 02 	lds	r22, 0x02CA	; 0x8002ca <lmt_lane_2+0x2>
    282e:	70 91 cb 02 	lds	r23, 0x02CB	; 0x8002cb <lmt_lane_2+0x3>
    2832:	48 0f       	add	r20, r24
    2834:	59 1f       	adc	r21, r25
    2836:	61 1d       	adc	r22, r1
    2838:	71 1d       	adc	r23, r1
    283a:	80 91 d4 02 	lds	r24, 0x02D4	; 0x8002d4 <current_time>
    283e:	90 91 d5 02 	lds	r25, 0x02D5	; 0x8002d5 <current_time+0x1>
    2842:	a0 91 d6 02 	lds	r26, 0x02D6	; 0x8002d6 <current_time+0x2>
    2846:	b0 91 d7 02 	lds	r27, 0x02D7	; 0x8002d7 <current_time+0x3>
    284a:	84 17       	cp	r24, r20
    284c:	95 07       	cpc	r25, r21
    284e:	a6 07       	cpc	r26, r22
    2850:	b7 07       	cpc	r27, r23
    2852:	a0 f0       	brcs	.+40     	; 0x287c <play_game+0x3c4>
	get_row_speed(THIRD_VEHICLE_ROW_SPEED)) {
		scroll_vehicle_lane(2, 1);
    2854:	61 e0       	ldi	r22, 0x01	; 1
    2856:	82 e0       	ldi	r24, 0x02	; 2
    2858:	0e 94 42 09 	call	0x1284	; 0x1284 <scroll_vehicle_lane>
		lmt_lane_2 = current_time;
    285c:	80 91 d4 02 	lds	r24, 0x02D4	; 0x8002d4 <current_time>
    2860:	90 91 d5 02 	lds	r25, 0x02D5	; 0x8002d5 <current_time+0x1>
    2864:	a0 91 d6 02 	lds	r26, 0x02D6	; 0x8002d6 <current_time+0x2>
    2868:	b0 91 d7 02 	lds	r27, 0x02D7	; 0x8002d7 <current_time+0x3>
    286c:	80 93 c8 02 	sts	0x02C8, r24	; 0x8002c8 <lmt_lane_2>
    2870:	90 93 c9 02 	sts	0x02C9, r25	; 0x8002c9 <lmt_lane_2+0x1>
    2874:	a0 93 ca 02 	sts	0x02CA, r26	; 0x8002ca <lmt_lane_2+0x2>
    2878:	b0 93 cb 02 	sts	0x02CB, r27	; 0x8002cb <lmt_lane_2+0x3>
	}
	if(!is_frog_dead() && current_time >= lmt_channel_0 +
    287c:	0e 94 82 07 	call	0xf04	; 0xf04 <is_frog_dead>
    2880:	81 11       	cpse	r24, r1
    2882:	30 c0       	rjmp	.+96     	; 0x28e4 <play_game+0x42c>
	get_row_speed(FIRST_RIVER_ROW_SPEED)) {
    2884:	83 e0       	ldi	r24, 0x03	; 3
    2886:	0e 94 09 11 	call	0x2212	; 0x2212 <get_row_speed>
	if(!is_frog_dead() && current_time >= lmt_lane_2 +
	get_row_speed(THIRD_VEHICLE_ROW_SPEED)) {
		scroll_vehicle_lane(2, 1);
		lmt_lane_2 = current_time;
	}
	if(!is_frog_dead() && current_time >= lmt_channel_0 +
    288a:	40 91 c4 02 	lds	r20, 0x02C4	; 0x8002c4 <lmt_channel_0>
    288e:	50 91 c5 02 	lds	r21, 0x02C5	; 0x8002c5 <lmt_channel_0+0x1>
    2892:	60 91 c6 02 	lds	r22, 0x02C6	; 0x8002c6 <lmt_channel_0+0x2>
    2896:	70 91 c7 02 	lds	r23, 0x02C7	; 0x8002c7 <lmt_channel_0+0x3>
    289a:	48 0f       	add	r20, r24
    289c:	59 1f       	adc	r21, r25
    289e:	61 1d       	adc	r22, r1
    28a0:	71 1d       	adc	r23, r1
    28a2:	80 91 d4 02 	lds	r24, 0x02D4	; 0x8002d4 <current_time>
    28a6:	90 91 d5 02 	lds	r25, 0x02D5	; 0x8002d5 <current_time+0x1>
    28aa:	a0 91 d6 02 	lds	r26, 0x02D6	; 0x8002d6 <current_time+0x2>
    28ae:	b0 91 d7 02 	lds	r27, 0x02D7	; 0x8002d7 <current_time+0x3>
    28b2:	84 17       	cp	r24, r20
    28b4:	95 07       	cpc	r25, r21
    28b6:	a6 07       	cpc	r26, r22
    28b8:	b7 07       	cpc	r27, r23
    28ba:	a0 f0       	brcs	.+40     	; 0x28e4 <play_game+0x42c>
	get_row_speed(FIRST_RIVER_ROW_SPEED)) {
		scroll_river_channel(0, -1);
    28bc:	6c 2f       	mov	r22, r28
    28be:	80 e0       	ldi	r24, 0x00	; 0
    28c0:	0e 94 7b 09 	call	0x12f6	; 0x12f6 <scroll_river_channel>
		lmt_channel_0 = current_time;
    28c4:	80 91 d4 02 	lds	r24, 0x02D4	; 0x8002d4 <current_time>
    28c8:	90 91 d5 02 	lds	r25, 0x02D5	; 0x8002d5 <current_time+0x1>
    28cc:	a0 91 d6 02 	lds	r26, 0x02D6	; 0x8002d6 <current_time+0x2>
    28d0:	b0 91 d7 02 	lds	r27, 0x02D7	; 0x8002d7 <current_time+0x3>
    28d4:	80 93 c4 02 	sts	0x02C4, r24	; 0x8002c4 <lmt_channel_0>
    28d8:	90 93 c5 02 	sts	0x02C5, r25	; 0x8002c5 <lmt_channel_0+0x1>
    28dc:	a0 93 c6 02 	sts	0x02C6, r26	; 0x8002c6 <lmt_channel_0+0x2>
    28e0:	b0 93 c7 02 	sts	0x02C7, r27	; 0x8002c7 <lmt_channel_0+0x3>
	}
	if(!is_frog_dead() && current_time >= lmt_channel_1 +
    28e4:	0e 94 82 07 	call	0xf04	; 0xf04 <is_frog_dead>
    28e8:	81 11       	cpse	r24, r1
    28ea:	30 c0       	rjmp	.+96     	; 0x294c <play_game+0x494>
	get_row_speed(SECOND_RIVER_ROW_SPEED)) {
    28ec:	84 e0       	ldi	r24, 0x04	; 4
    28ee:	0e 94 09 11 	call	0x2212	; 0x2212 <get_row_speed>
	if(!is_frog_dead() && current_time >= lmt_channel_0 +
	get_row_speed(FIRST_RIVER_ROW_SPEED)) {
		scroll_river_channel(0, -1);
		lmt_channel_0 = current_time;
	}
	if(!is_frog_dead() && current_time >= lmt_channel_1 +
    28f2:	40 91 c0 02 	lds	r20, 0x02C0	; 0x8002c0 <lmt_channel_1>
    28f6:	50 91 c1 02 	lds	r21, 0x02C1	; 0x8002c1 <lmt_channel_1+0x1>
    28fa:	60 91 c2 02 	lds	r22, 0x02C2	; 0x8002c2 <lmt_channel_1+0x2>
    28fe:	70 91 c3 02 	lds	r23, 0x02C3	; 0x8002c3 <lmt_channel_1+0x3>
    2902:	48 0f       	add	r20, r24
    2904:	59 1f       	adc	r21, r25
    2906:	61 1d       	adc	r22, r1
    2908:	71 1d       	adc	r23, r1
    290a:	80 91 d4 02 	lds	r24, 0x02D4	; 0x8002d4 <current_time>
    290e:	90 91 d5 02 	lds	r25, 0x02D5	; 0x8002d5 <current_time+0x1>
    2912:	a0 91 d6 02 	lds	r26, 0x02D6	; 0x8002d6 <current_time+0x2>
    2916:	b0 91 d7 02 	lds	r27, 0x02D7	; 0x8002d7 <current_time+0x3>
    291a:	84 17       	cp	r24, r20
    291c:	95 07       	cpc	r25, r21
    291e:	a6 07       	cpc	r26, r22
    2920:	b7 07       	cpc	r27, r23
    2922:	a0 f0       	brcs	.+40     	; 0x294c <play_game+0x494>
	get_row_speed(SECOND_RIVER_ROW_SPEED)) {
		scroll_river_channel(1, 1);
    2924:	61 e0       	ldi	r22, 0x01	; 1
    2926:	81 e0       	ldi	r24, 0x01	; 1
    2928:	0e 94 7b 09 	call	0x12f6	; 0x12f6 <scroll_river_channel>
		lmt_channel_1 = current_time;
    292c:	80 91 d4 02 	lds	r24, 0x02D4	; 0x8002d4 <current_time>
    2930:	90 91 d5 02 	lds	r25, 0x02D5	; 0x8002d5 <current_time+0x1>
    2934:	a0 91 d6 02 	lds	r26, 0x02D6	; 0x8002d6 <current_time+0x2>
    2938:	b0 91 d7 02 	lds	r27, 0x02D7	; 0x8002d7 <current_time+0x3>
    293c:	80 93 c0 02 	sts	0x02C0, r24	; 0x8002c0 <lmt_channel_1>
    2940:	90 93 c1 02 	sts	0x02C1, r25	; 0x8002c1 <lmt_channel_1+0x1>
    2944:	a0 93 c2 02 	sts	0x02C2, r26	; 0x8002c2 <lmt_channel_1+0x2>
    2948:	b0 93 c3 02 	sts	0x02C3, r27	; 0x8002c3 <lmt_channel_1+0x3>
			process_diagonal_move();
		}
		
		process_input();
		move_lanes();
		remove_life();
    294c:	0e 94 a2 11 	call	0x2344	; 0x2344 <remove_life>
		play_audio(NO_TRACK);
    2950:	8f ef       	ldi	r24, 0xFF	; 255
    2952:	9f ef       	ldi	r25, 0xFF	; 255
    2954:	0e 94 54 02 	call	0x4a8	; 0x4a8 <play_audio>
	lmt_channel_0 = current_time;
	lmt_channel_1 = current_time;
	button_repeat_time = current_time;

	// We play the game while the frog is alive
	while(get_lives() > 0) {
    2958:	0e 94 9f 11 	call	0x233e	; 0x233e <get_lives>
    295c:	81 11       	cpse	r24, r1
    295e:	ea cd       	rjmp	.-1068   	; 0x2534 <play_game+0x7c>
		remove_life();
		play_audio(NO_TRACK);
	}
	// We get here if the frog is out of lives or the riverbank is full
	// The game is over.
}
    2960:	df 91       	pop	r29
    2962:	cf 91       	pop	r28
    2964:	08 95       	ret

00002966 <handle_game_over>:

void handle_game_over() {
	pause_countdown(TRUE);
    2966:	81 e0       	ldi	r24, 0x01	; 1
    2968:	0e 94 ab 04 	call	0x956	; 0x956 <pause_countdown>
	clear_terminal();
    296c:	0e 94 bd 17 	call	0x2f7a	; 0x2f7a <clear_terminal>

	// unused if statement as the player cannot win with infinite levels
	if(!is_frog_dead()) {
    2970:	0e 94 82 07 	call	0xf04	; 0xf04 <is_frog_dead>
    2974:	81 11       	cpse	r24, r1
    2976:	13 c0       	rjmp	.+38     	; 0x299e <handle_game_over+0x38>
		move_cursor(37,2);
    2978:	62 e0       	ldi	r22, 0x02	; 2
    297a:	70 e0       	ldi	r23, 0x00	; 0
    297c:	85 e2       	ldi	r24, 0x25	; 37
    297e:	90 e0       	ldi	r25, 0x00	; 0
    2980:	0e 94 9a 17 	call	0x2f34	; 0x2f34 <move_cursor>
		printf_P(PSTR("WINNER!!"));
    2984:	8c e6       	ldi	r24, 0x6C	; 108
    2986:	91 e0       	ldi	r25, 0x01	; 1
    2988:	9f 93       	push	r25
    298a:	8f 93       	push	r24
    298c:	0e 94 18 1b 	call	0x3630	; 0x3630 <printf_P>
		play_audio(WINNER);
    2990:	85 e0       	ldi	r24, 0x05	; 5
    2992:	90 e0       	ldi	r25, 0x00	; 0
    2994:	0e 94 54 02 	call	0x4a8	; 0x4a8 <play_audio>
    2998:	0f 90       	pop	r0
    299a:	0f 90       	pop	r0
    299c:	12 c0       	rjmp	.+36     	; 0x29c2 <handle_game_over+0x5c>
	} else {
		move_cursor(37,2);
    299e:	62 e0       	ldi	r22, 0x02	; 2
    29a0:	70 e0       	ldi	r23, 0x00	; 0
    29a2:	85 e2       	ldi	r24, 0x25	; 37
    29a4:	90 e0       	ldi	r25, 0x00	; 0
    29a6:	0e 94 9a 17 	call	0x2f34	; 0x2f34 <move_cursor>
		printf_P(PSTR("GAME OVER"));
    29aa:	82 e6       	ldi	r24, 0x62	; 98
    29ac:	91 e0       	ldi	r25, 0x01	; 1
    29ae:	9f 93       	push	r25
    29b0:	8f 93       	push	r24
    29b2:	0e 94 18 1b 	call	0x3630	; 0x3630 <printf_P>
		play_audio(GAME_OVER);
    29b6:	86 e0       	ldi	r24, 0x06	; 6
    29b8:	90 e0       	ldi	r25, 0x00	; 0
    29ba:	0e 94 54 02 	call	0x4a8	; 0x4a8 <play_audio>
    29be:	0f 90       	pop	r0
    29c0:	0f 90       	pop	r0
	}
	draw_gameover_screen();
    29c2:	0e 94 f4 0d 	call	0x1be8	; 0x1be8 <draw_gameover_screen>
	
	clear_button_queue();
    29c6:	0e 94 d9 03 	call	0x7b2	; 0x7b2 <clear_button_queue>
	move_cursor(26,3);
    29ca:	63 e0       	ldi	r22, 0x03	; 3
    29cc:	70 e0       	ldi	r23, 0x00	; 0
    29ce:	8a e1       	ldi	r24, 0x1A	; 26
    29d0:	90 e0       	ldi	r25, 0x00	; 0
    29d2:	0e 94 9a 17 	call	0x2f34	; 0x2f34 <move_cursor>
	printf_P(PSTR("Press a button to start again"));
    29d6:	84 e4       	ldi	r24, 0x44	; 68
    29d8:	91 e0       	ldi	r25, 0x01	; 1
    29da:	9f 93       	push	r25
    29dc:	8f 93       	push	r24
    29de:	0e 94 18 1b 	call	0x3630	; 0x3630 <printf_P>
	while(button_pushed() == NO_BUTTON_PUSHED) {
    29e2:	0f 90       	pop	r0
    29e4:	0f 90       	pop	r0
    29e6:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <button_pushed>
    29ea:	8f 3f       	cpi	r24, 0xFF	; 255
    29ec:	e1 f3       	breq	.-8      	; 0x29e6 <handle_game_over+0x80>
		; // wait
	}
}
    29ee:	08 95       	ret

000029f0 <main>:

/////////////////////////////// main //////////////////////////////////
int main(void) {
	// Setup hardware and call backs. This will turn on
	// interrupts.
	initialise_hardware();
    29f0:	0e 94 f4 11 	call	0x23e8	; 0x23e8 <initialise_hardware>

	// Show the splash screen message. Returns when display
	// is complete
	splash_screen();
    29f4:	0e 94 09 12 	call	0x2412	; 0x2412 <splash_screen>

	while(1) {
		new_game();
    29f8:	0e 94 47 12 	call	0x248e	; 0x248e <new_game>
		play_game();
    29fc:	0e 94 5c 12 	call	0x24b8	; 0x24b8 <play_game>
		handle_game_over();
    2a00:	0e 94 b3 14 	call	0x2966	; 0x2966 <handle_game_over>
    2a04:	f9 cf       	rjmp	.-14     	; 0x29f8 <main+0x8>

00002a06 <score_updater>:
uint32_t get_score(void) {
	return score;
}

void score_updater(void) {
	move_cursor(0, 1);
    2a06:	61 e0       	ldi	r22, 0x01	; 1
    2a08:	70 e0       	ldi	r23, 0x00	; 0
    2a0a:	80 e0       	ldi	r24, 0x00	; 0
    2a0c:	90 e0       	ldi	r25, 0x00	; 0
    2a0e:	0e 94 9a 17 	call	0x2f34	; 0x2f34 <move_cursor>
	printf_P(PSTR("Score: %4u"), score);
    2a12:	80 91 e9 02 	lds	r24, 0x02E9	; 0x8002e9 <score+0x3>
    2a16:	8f 93       	push	r24
    2a18:	80 91 e8 02 	lds	r24, 0x02E8	; 0x8002e8 <score+0x2>
    2a1c:	8f 93       	push	r24
    2a1e:	80 91 e7 02 	lds	r24, 0x02E7	; 0x8002e7 <score+0x1>
    2a22:	8f 93       	push	r24
    2a24:	80 91 e6 02 	lds	r24, 0x02E6	; 0x8002e6 <score>
    2a28:	8f 93       	push	r24
    2a2a:	8f ea       	ldi	r24, 0xAF	; 175
    2a2c:	91 e0       	ldi	r25, 0x01	; 1
    2a2e:	9f 93       	push	r25
    2a30:	8f 93       	push	r24
    2a32:	0e 94 18 1b 	call	0x3630	; 0x3630 <printf_P>
}
    2a36:	0f 90       	pop	r0
    2a38:	0f 90       	pop	r0
    2a3a:	0f 90       	pop	r0
    2a3c:	0f 90       	pop	r0
    2a3e:	0f 90       	pop	r0
    2a40:	0f 90       	pop	r0
    2a42:	08 95       	ret

00002a44 <init_score>:
uint32_t score;

static void score_updater(void);

void init_score(void) {
	score = 0;
    2a44:	10 92 e6 02 	sts	0x02E6, r1	; 0x8002e6 <score>
    2a48:	10 92 e7 02 	sts	0x02E7, r1	; 0x8002e7 <score+0x1>
    2a4c:	10 92 e8 02 	sts	0x02E8, r1	; 0x8002e8 <score+0x2>
    2a50:	10 92 e9 02 	sts	0x02E9, r1	; 0x8002e9 <score+0x3>
	score_updater();
    2a54:	0e 94 03 15 	call	0x2a06	; 0x2a06 <score_updater>
    2a58:	08 95       	ret

00002a5a <add_to_score>:
}

void add_to_score(uint16_t value) {
	score += value;
    2a5a:	40 91 e6 02 	lds	r20, 0x02E6	; 0x8002e6 <score>
    2a5e:	50 91 e7 02 	lds	r21, 0x02E7	; 0x8002e7 <score+0x1>
    2a62:	60 91 e8 02 	lds	r22, 0x02E8	; 0x8002e8 <score+0x2>
    2a66:	70 91 e9 02 	lds	r23, 0x02E9	; 0x8002e9 <score+0x3>
    2a6a:	48 0f       	add	r20, r24
    2a6c:	59 1f       	adc	r21, r25
    2a6e:	61 1d       	adc	r22, r1
    2a70:	71 1d       	adc	r23, r1
    2a72:	40 93 e6 02 	sts	0x02E6, r20	; 0x8002e6 <score>
    2a76:	50 93 e7 02 	sts	0x02E7, r21	; 0x8002e7 <score+0x1>
    2a7a:	60 93 e8 02 	sts	0x02E8, r22	; 0x8002e8 <score+0x2>
    2a7e:	70 93 e9 02 	sts	0x02E9, r23	; 0x8002e9 <score+0x3>
	score_updater();
    2a82:	0e 94 03 15 	call	0x2a06	; 0x2a06 <score_updater>
    2a86:	08 95       	ret

00002a88 <get_score>:
}

uint32_t get_score(void) {
	return score;
    2a88:	60 91 e6 02 	lds	r22, 0x02E6	; 0x8002e6 <score>
    2a8c:	70 91 e7 02 	lds	r23, 0x02E7	; 0x8002e7 <score+0x1>
    2a90:	80 91 e8 02 	lds	r24, 0x02E8	; 0x8002e8 <score+0x2>
    2a94:	90 91 e9 02 	lds	r25, 0x02E9	; 0x8002e9 <score+0x3>
}
    2a98:	08 95       	ret

00002a9a <set_scrolling_display_text>:
 * is called while the string is still being displayed.
 * We reset the pointers to ensure the next column to be displayed
 * comes from the first character of this string.
 */
void set_scrolling_display_text(char* string_to_display, PixelColour c) {
	colour = c;
    2a9a:	60 93 7b 01 	sts	0x017B, r22	; 0x80017b <colour>
	display_string = string_to_display;
    2a9e:	90 93 dc 02 	sts	0x02DC, r25	; 0x8002dc <display_string+0x1>
    2aa2:	80 93 db 02 	sts	0x02DB, r24	; 0x8002db <display_string>
	next_col_ptr = 0;
    2aa6:	10 92 de 02 	sts	0x02DE, r1	; 0x8002de <next_col_ptr+0x1>
    2aaa:	10 92 dd 02 	sts	0x02DD, r1	; 0x8002dd <next_col_ptr>
	next_char_to_display = 0;
    2aae:	10 92 da 02 	sts	0x02DA, r1	; 0x8002da <next_char_to_display+0x1>
    2ab2:	10 92 d9 02 	sts	0x02D9, r1	; 0x8002d9 <next_char_to_display>
    2ab6:	08 95       	ret

00002ab8 <scroll_display>:
/*
 * Scroll the display. Should be called whenever the display
 * is to be scrolled. 
 * Returns 1 if still scrolling display.
 */
uint8_t scroll_display(void) {
    2ab8:	0f 93       	push	r16
    2aba:	1f 93       	push	r17
    2abc:	cf 93       	push	r28
    2abe:	df 93       	push	r29
    2ac0:	cd b7       	in	r28, 0x3d	; 61
    2ac2:	de b7       	in	r29, 0x3e	; 62
    2ac4:	28 97       	sbiw	r28, 0x08	; 8
    2ac6:	0f b6       	in	r0, 0x3f	; 63
    2ac8:	f8 94       	cli
    2aca:	de bf       	out	0x3e, r29	; 62
    2acc:	0f be       	out	0x3f, r0	; 63
    2ace:	cd bf       	out	0x3d, r28	; 61
	 * column data corresponds to row 7 of the display
	 * etc.
	 */
	col_data = 0;

	if(next_col_ptr) {
    2ad0:	e0 91 dd 02 	lds	r30, 0x02DD	; 0x8002dd <next_col_ptr>
    2ad4:	f0 91 de 02 	lds	r31, 0x02DE	; 0x8002de <next_col_ptr+0x1>
    2ad8:	30 97       	sbiw	r30, 0x00	; 0
    2ada:	81 f0       	breq	.+32     	; 0x2afc <scroll_display+0x44>
		/* We're currently outputting a character and next_col_ptr
		 * points to the display data for the next column. We
		 * extract that data from program memory.
		 */
		col_data = pgm_read_byte(next_col_ptr);
    2adc:	14 91       	lpm	r17, Z

		if(col_data & 1) {
    2ade:	10 ff       	sbrs	r17, 0
    2ae0:	06 c0       	rjmp	.+12     	; 0x2aee <scroll_display+0x36>
			/* Least significant bit is set - this is the last
			 * column of this character
			 */
			next_col_ptr = 0;
    2ae2:	10 92 de 02 	sts	0x02DE, r1	; 0x8002de <next_col_ptr+0x1>
    2ae6:	10 92 dd 02 	sts	0x02DD, r1	; 0x8002dd <next_col_ptr>
uint8_t scroll_display(void) {
	static uint8_t shift_countdown = 0;
	uint8_t i;
	uint8_t col_data;
	char next_char;
	uint8_t finished = 0;
    2aea:	00 e0       	ldi	r16, 0x00	; 0
    2aec:	6b c0       	rjmp	.+214    	; 0x2bc4 <scroll_display+0x10c>
			next_col_ptr = 0;
		} else {
			/* This is not the last column of this character - make
			 * the pointer point to the data for the next column.
			 */
			next_col_ptr++;
    2aee:	31 96       	adiw	r30, 0x01	; 1
    2af0:	f0 93 de 02 	sts	0x02DE, r31	; 0x8002de <next_col_ptr+0x1>
    2af4:	e0 93 dd 02 	sts	0x02DD, r30	; 0x8002dd <next_col_ptr>
uint8_t scroll_display(void) {
	static uint8_t shift_countdown = 0;
	uint8_t i;
	uint8_t col_data;
	char next_char;
	uint8_t finished = 0;
    2af8:	00 e0       	ldi	r16, 0x00	; 0
    2afa:	64 c0       	rjmp	.+200    	; 0x2bc4 <scroll_display+0x10c>
			/* This is not the last column of this character - make
			 * the pointer point to the data for the next column.
			 */
			next_col_ptr++;
		}
	} else if(next_char_to_display) {
    2afc:	e0 91 d9 02 	lds	r30, 0x02D9	; 0x8002d9 <next_char_to_display>
    2b00:	f0 91 da 02 	lds	r31, 0x02DA	; 0x8002da <next_char_to_display+0x1>
    2b04:	30 97       	sbiw	r30, 0x00	; 0
    2b06:	09 f4       	brne	.+2      	; 0x2b0a <scroll_display+0x52>
    2b08:	49 c0       	rjmp	.+146    	; 0x2b9c <scroll_display+0xe4>
		 * the next character. We first get the next character to be 
		 * displayed and advance our next character pointer 
		 * (next_char_to_display) so that it points to the character 
		 * after.
		 */
		next_char = *(next_char_to_display++);
    2b0a:	cf 01       	movw	r24, r30
    2b0c:	01 96       	adiw	r24, 0x01	; 1
    2b0e:	90 93 da 02 	sts	0x02DA, r25	; 0x8002da <next_char_to_display+0x1>
    2b12:	80 93 d9 02 	sts	0x02D9, r24	; 0x8002d9 <next_char_to_display>
    2b16:	e0 81       	ld	r30, Z
		if(next_char == 0) {
    2b18:	e1 11       	cpse	r30, r1
    2b1a:	0a c0       	rjmp	.+20     	; 0x2b30 <scroll_display+0x78>
			/* We reached the null character at the end of the string.
			 * There is no next character, reset our pointer to 
			 * the next character and set our countdown until the 
			 * message disappears from the display.
			 */
			next_char_to_display = 0;
    2b1c:	10 92 da 02 	sts	0x02DA, r1	; 0x8002da <next_char_to_display+0x1>
    2b20:	10 92 d9 02 	sts	0x02D9, r1	; 0x8002d9 <next_char_to_display>
			shift_countdown = 16;
    2b24:	80 e1       	ldi	r24, 0x10	; 16
    2b26:	80 93 d8 02 	sts	0x02D8, r24	; 0x8002d8 <shift_countdown.1854>
uint8_t scroll_display(void) {
	static uint8_t shift_countdown = 0;
	uint8_t i;
	uint8_t col_data;
	char next_char;
	uint8_t finished = 0;
    2b2a:	00 e0       	ldi	r16, 0x00	; 0
	/* Data to be displayed in the next column - by 
	 * default we show a blank column. Bit 7 of this
	 * column data corresponds to row 7 of the display
	 * etc.
	 */
	col_data = 0;
    2b2c:	10 e0       	ldi	r17, 0x00	; 0
    2b2e:	4a c0       	rjmp	.+148    	; 0x2bc4 <scroll_display+0x10c>
			 * the next character and set our countdown until the 
			 * message disappears from the display.
			 */
			next_char_to_display = 0;
			shift_countdown = 16;
		} else if (next_char >= 'a' && next_char <= 'z') {
    2b30:	8f e9       	ldi	r24, 0x9F	; 159
    2b32:	8e 0f       	add	r24, r30
    2b34:	8a 31       	cpi	r24, 0x1A	; 26
    2b36:	70 f4       	brcc	.+28     	; 0x2b54 <scroll_display+0x9c>
			/* Character is a lower case letter - the next column to 
			 * be displayed will be the first column of the letter
			 * data for that letter
			 */
			next_col_ptr = (const uint8_t*)pgm_read_word(&letters[next_char - 'a']);
    2b38:	f0 e0       	ldi	r31, 0x00	; 0
    2b3a:	ee 0f       	add	r30, r30
    2b3c:	ff 1f       	adc	r31, r31
    2b3e:	e4 5f       	subi	r30, 0xF4	; 244
    2b40:	fe 4f       	sbci	r31, 0xFE	; 254
    2b42:	85 91       	lpm	r24, Z+
    2b44:	94 91       	lpm	r25, Z
    2b46:	90 93 de 02 	sts	0x02DE, r25	; 0x8002de <next_col_ptr+0x1>
    2b4a:	80 93 dd 02 	sts	0x02DD, r24	; 0x8002dd <next_col_ptr>
uint8_t scroll_display(void) {
	static uint8_t shift_countdown = 0;
	uint8_t i;
	uint8_t col_data;
	char next_char;
	uint8_t finished = 0;
    2b4e:	00 e0       	ldi	r16, 0x00	; 0
	/* Data to be displayed in the next column - by 
	 * default we show a blank column. Bit 7 of this
	 * column data corresponds to row 7 of the display
	 * etc.
	 */
	col_data = 0;
    2b50:	10 e0       	ldi	r17, 0x00	; 0
    2b52:	38 c0       	rjmp	.+112    	; 0x2bc4 <scroll_display+0x10c>
			/* Character is a lower case letter - the next column to 
			 * be displayed will be the first column of the letter
			 * data for that letter
			 */
			next_col_ptr = (const uint8_t*)pgm_read_word(&letters[next_char - 'a']);
		} else if (next_char >= 'A' && next_char <= 'Z') {
    2b54:	8f eb       	ldi	r24, 0xBF	; 191
    2b56:	8e 0f       	add	r24, r30
    2b58:	8a 31       	cpi	r24, 0x1A	; 26
    2b5a:	70 f4       	brcc	.+28     	; 0x2b78 <scroll_display+0xc0>
			/* Upper case character */
			next_col_ptr = (const uint8_t*)pgm_read_word(&letters[next_char - 'A']);
    2b5c:	f0 e0       	ldi	r31, 0x00	; 0
    2b5e:	ee 0f       	add	r30, r30
    2b60:	ff 1f       	adc	r31, r31
    2b62:	e4 5b       	subi	r30, 0xB4	; 180
    2b64:	fe 4f       	sbci	r31, 0xFE	; 254
    2b66:	85 91       	lpm	r24, Z+
    2b68:	94 91       	lpm	r25, Z
    2b6a:	90 93 de 02 	sts	0x02DE, r25	; 0x8002de <next_col_ptr+0x1>
    2b6e:	80 93 dd 02 	sts	0x02DD, r24	; 0x8002dd <next_col_ptr>
uint8_t scroll_display(void) {
	static uint8_t shift_countdown = 0;
	uint8_t i;
	uint8_t col_data;
	char next_char;
	uint8_t finished = 0;
    2b72:	00 e0       	ldi	r16, 0x00	; 0
	/* Data to be displayed in the next column - by 
	 * default we show a blank column. Bit 7 of this
	 * column data corresponds to row 7 of the display
	 * etc.
	 */
	col_data = 0;
    2b74:	10 e0       	ldi	r17, 0x00	; 0
    2b76:	26 c0       	rjmp	.+76     	; 0x2bc4 <scroll_display+0x10c>
			 */
			next_col_ptr = (const uint8_t*)pgm_read_word(&letters[next_char - 'a']);
		} else if (next_char >= 'A' && next_char <= 'Z') {
			/* Upper case character */
			next_col_ptr = (const uint8_t*)pgm_read_word(&letters[next_char - 'A']);
		} else if (next_char >= '0' && next_char <= '9') {
    2b78:	80 ed       	ldi	r24, 0xD0	; 208
    2b7a:	8e 0f       	add	r24, r30
    2b7c:	8a 30       	cpi	r24, 0x0A	; 10
    2b7e:	00 f5       	brcc	.+64     	; 0x2bc0 <scroll_display+0x108>
			/* Digit */
			next_col_ptr = (const uint8_t*)pgm_read_word(&numbers[next_char - '0']);
    2b80:	f0 e0       	ldi	r31, 0x00	; 0
    2b82:	ee 0f       	add	r30, r30
    2b84:	ff 1f       	adc	r31, r31
    2b86:	e6 5a       	subi	r30, 0xA6	; 166
    2b88:	fe 4f       	sbci	r31, 0xFE	; 254
    2b8a:	85 91       	lpm	r24, Z+
    2b8c:	94 91       	lpm	r25, Z
    2b8e:	90 93 de 02 	sts	0x02DE, r25	; 0x8002de <next_col_ptr+0x1>
    2b92:	80 93 dd 02 	sts	0x02DD, r24	; 0x8002dd <next_col_ptr>
uint8_t scroll_display(void) {
	static uint8_t shift_countdown = 0;
	uint8_t i;
	uint8_t col_data;
	char next_char;
	uint8_t finished = 0;
    2b96:	00 e0       	ldi	r16, 0x00	; 0
	/* Data to be displayed in the next column - by 
	 * default we show a blank column. Bit 7 of this
	 * column data corresponds to row 7 of the display
	 * etc.
	 */
	col_data = 0;
    2b98:	10 e0       	ldi	r17, 0x00	; 0
    2b9a:	14 c0       	rjmp	.+40     	; 0x2bc4 <scroll_display+0x10c>
	} else {
		/* We're not outputting a column of dots and there is 
		 * no next character. Move on to the string that we
		 * have stored (if any).
		 */
		if(!display_string) {
    2b9c:	80 91 db 02 	lds	r24, 0x02DB	; 0x8002db <display_string>
    2ba0:	90 91 dc 02 	lds	r25, 0x02DC	; 0x8002dc <display_string+0x1>
uint8_t scroll_display(void) {
	static uint8_t shift_countdown = 0;
	uint8_t i;
	uint8_t col_data;
	char next_char;
	uint8_t finished = 0;
    2ba4:	01 e0       	ldi	r16, 0x01	; 1
    2ba6:	00 97       	sbiw	r24, 0x00	; 0
    2ba8:	09 f0       	breq	.+2      	; 0x2bac <scroll_display+0xf4>
    2baa:	00 e0       	ldi	r16, 0x00	; 0
			/* May be finished - flag this and adjust below if we're still
			 * showing pixels
			 */
			finished = 1;
		}
		next_char_to_display = display_string;
    2bac:	90 93 da 02 	sts	0x02DA, r25	; 0x8002da <next_char_to_display+0x1>
    2bb0:	80 93 d9 02 	sts	0x02D9, r24	; 0x8002d9 <next_char_to_display>
		display_string = 0;
    2bb4:	10 92 dc 02 	sts	0x02DC, r1	; 0x8002dc <display_string+0x1>
    2bb8:	10 92 db 02 	sts	0x02DB, r1	; 0x8002db <display_string>
	/* Data to be displayed in the next column - by 
	 * default we show a blank column. Bit 7 of this
	 * column data corresponds to row 7 of the display
	 * etc.
	 */
	col_data = 0;
    2bbc:	10 e0       	ldi	r17, 0x00	; 0
    2bbe:	02 c0       	rjmp	.+4      	; 0x2bc4 <scroll_display+0x10c>
uint8_t scroll_display(void) {
	static uint8_t shift_countdown = 0;
	uint8_t i;
	uint8_t col_data;
	char next_char;
	uint8_t finished = 0;
    2bc0:	00 e0       	ldi	r16, 0x00	; 0
	/* Data to be displayed in the next column - by 
	 * default we show a blank column. Bit 7 of this
	 * column data corresponds to row 7 of the display
	 * etc.
	 */
	col_data = 0;
    2bc2:	10 e0       	ldi	r17, 0x00	; 0
	/* Shift the current display one pixel to the left and insert the 
	 * new column data at column 15.
	 * Adjust our "finished" variable if we've finished scrolling the
	 * message off the display
	 */
	ledmatrix_shift_display_left();
    2bc4:	0e 94 8a 10 	call	0x2114	; 0x2114 <ledmatrix_shift_display_left>
	MatrixColumn column_colour_data;
	for(i=7; i>=1; i--) {
		// If the relevant font bit is set, we make this a red pixel, otherwise blank
		if(col_data & 0x80) {
			column_colour_data[i] = colour;
    2bc8:	20 91 7b 01 	lds	r18, 0x017B	; 0x80017b <colour>
    2bcc:	fe 01       	movw	r30, r28
    2bce:	38 96       	adiw	r30, 0x08	; 8
    2bd0:	ce 01       	movw	r24, r28
    2bd2:	01 96       	adiw	r24, 0x01	; 1
	 */
	ledmatrix_shift_display_left();
	MatrixColumn column_colour_data;
	for(i=7; i>=1; i--) {
		// If the relevant font bit is set, we make this a red pixel, otherwise blank
		if(col_data & 0x80) {
    2bd4:	11 23       	and	r17, r17
    2bd6:	14 f4       	brge	.+4      	; 0x2bdc <scroll_display+0x124>
			column_colour_data[i] = colour;
    2bd8:	20 83       	st	Z, r18
    2bda:	01 c0       	rjmp	.+2      	; 0x2bde <scroll_display+0x126>
		} else {
			column_colour_data[i] = 0;
    2bdc:	10 82       	st	Z, r1
		}
		col_data <<= 1;
    2bde:	11 0f       	add	r17, r17
    2be0:	31 97       	sbiw	r30, 0x01	; 1
	 * Adjust our "finished" variable if we've finished scrolling the
	 * message off the display
	 */
	ledmatrix_shift_display_left();
	MatrixColumn column_colour_data;
	for(i=7; i>=1; i--) {
    2be2:	e8 17       	cp	r30, r24
    2be4:	f9 07       	cpc	r31, r25
    2be6:	b1 f7       	brne	.-20     	; 0x2bd4 <scroll_display+0x11c>
		} else {
			column_colour_data[i] = 0;
		}
		col_data <<= 1;
	}
	column_colour_data[0] = 0;
    2be8:	19 82       	std	Y+1, r1	; 0x01
	ledmatrix_update_column(15, column_colour_data);
    2bea:	be 01       	movw	r22, r28
    2bec:	6f 5f       	subi	r22, 0xFF	; 255
    2bee:	7f 4f       	sbci	r23, 0xFF	; 255
    2bf0:	8f e0       	ldi	r24, 0x0F	; 15
    2bf2:	0e 94 6d 10 	call	0x20da	; 0x20da <ledmatrix_update_column>
	if(shift_countdown > 0) {
    2bf6:	80 91 d8 02 	lds	r24, 0x02D8	; 0x8002d8 <shift_countdown.1854>
    2bfa:	88 23       	and	r24, r24
    2bfc:	89 f0       	breq	.+34     	; 0x2c20 <scroll_display+0x168>
		shift_countdown--;
    2bfe:	81 50       	subi	r24, 0x01	; 1
    2c00:	80 93 d8 02 	sts	0x02D8, r24	; 0x8002d8 <shift_countdown.1854>
	}
	finished = finished && (shift_countdown == 0);
    2c04:	00 23       	and	r16, r16
    2c06:	11 f0       	breq	.+4      	; 0x2c0c <scroll_display+0x154>
    2c08:	88 23       	and	r24, r24
    2c0a:	11 f0       	breq	.+4      	; 0x2c10 <scroll_display+0x158>
    2c0c:	90 e0       	ldi	r25, 0x00	; 0
    2c0e:	03 c0       	rjmp	.+6      	; 0x2c16 <scroll_display+0x15e>
    2c10:	91 e0       	ldi	r25, 0x01	; 1
    2c12:	01 c0       	rjmp	.+2      	; 0x2c16 <scroll_display+0x15e>
    2c14:	91 e0       	ldi	r25, 0x01	; 1
	return !finished;
    2c16:	81 e0       	ldi	r24, 0x01	; 1
    2c18:	99 23       	and	r25, r25
    2c1a:	29 f0       	breq	.+10     	; 0x2c26 <scroll_display+0x16e>
    2c1c:	80 e0       	ldi	r24, 0x00	; 0
    2c1e:	03 c0       	rjmp	.+6      	; 0x2c26 <scroll_display+0x16e>
	column_colour_data[0] = 0;
	ledmatrix_update_column(15, column_colour_data);
	if(shift_countdown > 0) {
		shift_countdown--;
	}
	finished = finished && (shift_countdown == 0);
    2c20:	00 23       	and	r16, r16
    2c22:	a1 f3       	breq	.-24     	; 0x2c0c <scroll_display+0x154>
    2c24:	f7 cf       	rjmp	.-18     	; 0x2c14 <scroll_display+0x15c>
	return !finished;
}
    2c26:	28 96       	adiw	r28, 0x08	; 8
    2c28:	0f b6       	in	r0, 0x3f	; 63
    2c2a:	f8 94       	cli
    2c2c:	de bf       	out	0x3e, r29	; 62
    2c2e:	0f be       	out	0x3f, r0	; 63
    2c30:	cd bf       	out	0x3d, r28	; 61
    2c32:	df 91       	pop	r29
    2c34:	cf 91       	pop	r28
    2c36:	1f 91       	pop	r17
    2c38:	0f 91       	pop	r16
    2c3a:	08 95       	ret

00002c3c <uart_put_char>:
	/* Just adjust our buffer data so it looks empty */
	input_insert_pos = 0;
	bytes_in_input_buffer = 0;
}

static int uart_put_char(char c, FILE* stream) {
    2c3c:	cf 93       	push	r28
    2c3e:	c8 2f       	mov	r28, r24
	/* Add the character to the buffer for transmission (if there 
	 * is space to do so). If not we wait until the buffer has space.
	 * If the character is \n, we output \r (carriage return)
	 * also.
	*/
	if(c == '\n') {
    2c40:	8a 30       	cpi	r24, 0x0A	; 10
    2c42:	19 f4       	brne	.+6      	; 0x2c4a <uart_put_char+0xe>
		uart_put_char('\r', stream);
    2c44:	8d e0       	ldi	r24, 0x0D	; 13
    2c46:	0e 94 1e 16 	call	0x2c3c	; 0x2c3c <uart_put_char>
	 * never be emptied if interrupts are disabled. If the buffer is full
	 * and interrupts are enabled then we loop until the buffer has 
	 * enough space. The bytes_in_buffer variable will get modified by the
	 * ISR which extracts bytes from the buffer.
	*/
	interrupts_enabled = bit_is_set(SREG, SREG_I);
    2c4a:	9f b7       	in	r25, 0x3f	; 63
    2c4c:	90 78       	andi	r25, 0x80	; 128
	while(bytes_in_out_buffer >= OUTPUT_BUFFER_SIZE) {
    2c4e:	02 c0       	rjmp	.+4      	; 0x2c54 <uart_put_char+0x18>
		if(!interrupts_enabled) {
    2c50:	99 23       	and	r25, r25
    2c52:	29 f1       	breq	.+74     	; 0x2c9e <uart_put_char+0x62>
	 * and interrupts are enabled then we loop until the buffer has 
	 * enough space. The bytes_in_buffer variable will get modified by the
	 * ISR which extracts bytes from the buffer.
	*/
	interrupts_enabled = bit_is_set(SREG, SREG_I);
	while(bytes_in_out_buffer >= OUTPUT_BUFFER_SIZE) {
    2c54:	80 91 eb 02 	lds	r24, 0x02EB	; 0x8002eb <bytes_in_out_buffer>
    2c58:	8f 3f       	cpi	r24, 0xFF	; 255
    2c5a:	d1 f3       	breq	.-12     	; 0x2c50 <uart_put_char+0x14>
	 * NOTE: we disable interrupts before modifying the buffer. This
	 * prevents the ISR from modifying the buffer at the same time.
	 * We reenable them if they were enabled when we entered the
	 * function.
	*/	
	cli();
    2c5c:	f8 94       	cli
	out_buffer[out_insert_pos++] = c;
    2c5e:	e0 91 ea 02 	lds	r30, 0x02EA	; 0x8002ea <out_insert_pos>
    2c62:	81 e0       	ldi	r24, 0x01	; 1
    2c64:	8e 0f       	add	r24, r30
    2c66:	80 93 ea 02 	sts	0x02EA, r24	; 0x8002ea <out_insert_pos>
    2c6a:	f0 e0       	ldi	r31, 0x00	; 0
    2c6c:	e4 51       	subi	r30, 0x14	; 20
    2c6e:	fd 4f       	sbci	r31, 0xFD	; 253
    2c70:	c0 83       	st	Z, r28
	bytes_in_out_buffer++;
    2c72:	80 91 eb 02 	lds	r24, 0x02EB	; 0x8002eb <bytes_in_out_buffer>
    2c76:	8f 5f       	subi	r24, 0xFF	; 255
    2c78:	80 93 eb 02 	sts	0x02EB, r24	; 0x8002eb <bytes_in_out_buffer>
	if(out_insert_pos == OUTPUT_BUFFER_SIZE) {
    2c7c:	80 91 ea 02 	lds	r24, 0x02EA	; 0x8002ea <out_insert_pos>
    2c80:	8f 3f       	cpi	r24, 0xFF	; 255
    2c82:	11 f4       	brne	.+4      	; 0x2c88 <uart_put_char+0x4c>
		/* Wrap around buffer pointer if necessary */
		out_insert_pos = 0;
    2c84:	10 92 ea 02 	sts	0x02EA, r1	; 0x8002ea <out_insert_pos>
	}
	/* Reenable interrupts (UDR Empty interrupt may have been
	 * disabled) - we ensure it is now enabled so that it will
	 * fire and deal with the next character in the buffer. */
	UCSR0B |= (1 << UDRIE0);
    2c88:	e1 ec       	ldi	r30, 0xC1	; 193
    2c8a:	f0 e0       	ldi	r31, 0x00	; 0
    2c8c:	80 81       	ld	r24, Z
    2c8e:	80 62       	ori	r24, 0x20	; 32
    2c90:	80 83       	st	Z, r24
	if(interrupts_enabled) {
    2c92:	99 23       	and	r25, r25
    2c94:	39 f0       	breq	.+14     	; 0x2ca4 <uart_put_char+0x68>
		sei();
    2c96:	78 94       	sei
	}
	return 0;
    2c98:	80 e0       	ldi	r24, 0x00	; 0
    2c9a:	90 e0       	ldi	r25, 0x00	; 0
    2c9c:	05 c0       	rjmp	.+10     	; 0x2ca8 <uart_put_char+0x6c>
	 * ISR which extracts bytes from the buffer.
	*/
	interrupts_enabled = bit_is_set(SREG, SREG_I);
	while(bytes_in_out_buffer >= OUTPUT_BUFFER_SIZE) {
		if(!interrupts_enabled) {
			return 1;
    2c9e:	81 e0       	ldi	r24, 0x01	; 1
    2ca0:	90 e0       	ldi	r25, 0x00	; 0
    2ca2:	02 c0       	rjmp	.+4      	; 0x2ca8 <uart_put_char+0x6c>
	 * fire and deal with the next character in the buffer. */
	UCSR0B |= (1 << UDRIE0);
	if(interrupts_enabled) {
		sei();
	}
	return 0;
    2ca4:	80 e0       	ldi	r24, 0x00	; 0
    2ca6:	90 e0       	ldi	r25, 0x00	; 0
}
    2ca8:	cf 91       	pop	r28
    2caa:	08 95       	ret

00002cac <uart_get_char>:

int uart_get_char(FILE* stream) {
	/* Wait until we've received a character */
	while(bytes_in_input_buffer == 0) {
    2cac:	80 91 fd 03 	lds	r24, 0x03FD	; 0x8003fd <bytes_in_input_buffer>
    2cb0:	88 23       	and	r24, r24
    2cb2:	e1 f3       	breq	.-8      	; 0x2cac <uart_get_char>
	 * buffer. We reenable interrupts if they were on.
	 * The pending character is the one which is byte_in_input_buffer
	 * characters before the insert position (taking into account
	 * that we may need to wrap around).
	 */
	uint8_t interrupts_enabled = bit_is_set(SREG, SREG_I);
    2cb4:	2f b7       	in	r18, 0x3f	; 63
    2cb6:	20 78       	andi	r18, 0x80	; 128
	cli();
    2cb8:	f8 94       	cli
	char c;
	if(input_insert_pos - bytes_in_input_buffer < 0) {
    2cba:	80 91 eb 03 	lds	r24, 0x03EB	; 0x8003eb <input_insert_pos>
    2cbe:	30 91 fd 03 	lds	r19, 0x03FD	; 0x8003fd <bytes_in_input_buffer>
    2cc2:	90 e0       	ldi	r25, 0x00	; 0
    2cc4:	83 1b       	sub	r24, r19
    2cc6:	91 09       	sbc	r25, r1
    2cc8:	5a f4       	brpl	.+22     	; 0x2ce0 <uart_get_char+0x34>
		/* Need to wrap around */
		c = input_buffer[input_insert_pos - bytes_in_input_buffer
    2cca:	e0 91 eb 03 	lds	r30, 0x03EB	; 0x8003eb <input_insert_pos>
    2cce:	80 91 fd 03 	lds	r24, 0x03FD	; 0x8003fd <bytes_in_input_buffer>
				+ INPUT_BUFFER_SIZE];
    2cd2:	f0 e0       	ldi	r31, 0x00	; 0
    2cd4:	e8 1b       	sub	r30, r24
    2cd6:	f1 09       	sbc	r31, r1
	uint8_t interrupts_enabled = bit_is_set(SREG, SREG_I);
	cli();
	char c;
	if(input_insert_pos - bytes_in_input_buffer < 0) {
		/* Need to wrap around */
		c = input_buffer[input_insert_pos - bytes_in_input_buffer
    2cd8:	e4 50       	subi	r30, 0x04	; 4
    2cda:	fc 4f       	sbci	r31, 0xFC	; 252
    2cdc:	80 81       	ld	r24, Z
    2cde:	0a c0       	rjmp	.+20     	; 0x2cf4 <uart_get_char+0x48>
				+ INPUT_BUFFER_SIZE];
	} else {
		c = input_buffer[input_insert_pos - bytes_in_input_buffer];
    2ce0:	e0 91 eb 03 	lds	r30, 0x03EB	; 0x8003eb <input_insert_pos>
    2ce4:	80 91 fd 03 	lds	r24, 0x03FD	; 0x8003fd <bytes_in_input_buffer>
    2ce8:	f0 e0       	ldi	r31, 0x00	; 0
    2cea:	e8 1b       	sub	r30, r24
    2cec:	f1 09       	sbc	r31, r1
    2cee:	e4 51       	subi	r30, 0x14	; 20
    2cf0:	fc 4f       	sbci	r31, 0xFC	; 252
    2cf2:	80 81       	ld	r24, Z
	}
	
	/* Decrement our count of bytes in the input buffer */
	bytes_in_input_buffer--;
    2cf4:	90 91 fd 03 	lds	r25, 0x03FD	; 0x8003fd <bytes_in_input_buffer>
    2cf8:	91 50       	subi	r25, 0x01	; 1
    2cfa:	90 93 fd 03 	sts	0x03FD, r25	; 0x8003fd <bytes_in_input_buffer>
	if(interrupts_enabled) {
    2cfe:	22 23       	and	r18, r18
    2d00:	09 f0       	breq	.+2      	; 0x2d04 <uart_get_char+0x58>
		sei();
    2d02:	78 94       	sei
	}	
	return c;
}
    2d04:	90 e0       	ldi	r25, 0x00	; 0
    2d06:	08 95       	ret

00002d08 <init_serial_stdio>:
void init_serial_stdio(long baudrate, int8_t echo) {
	uint16_t ubrr;
	/*
	 * Initialise our buffers
	*/
	out_insert_pos = 0;
    2d08:	10 92 ea 02 	sts	0x02EA, r1	; 0x8002ea <out_insert_pos>
	bytes_in_out_buffer = 0;
    2d0c:	10 92 eb 02 	sts	0x02EB, r1	; 0x8002eb <bytes_in_out_buffer>
	input_insert_pos = 0;
    2d10:	10 92 eb 03 	sts	0x03EB, r1	; 0x8003eb <input_insert_pos>
	bytes_in_input_buffer = 0;
    2d14:	10 92 fd 03 	sts	0x03FD, r1	; 0x8003fd <bytes_in_input_buffer>
	input_overrun = 0;
    2d18:	10 92 fc 03 	sts	0x03FC, r1	; 0x8003fc <input_overrun>
	
	/*
	 * Record whether we're going to echo characters or not
	*/
	do_echo = echo;
    2d1c:	40 93 df 02 	sts	0x02DF, r20	; 0x8002df <do_echo>
	/* Configure the serial port baud rate */
	/* (This differs from the datasheet formula so that we get 
	 * rounding to the nearest integer while using integer division
	 * (which truncates)).
	*/
	ubrr = ((SYSCLK / (8 * baudrate)) + 1)/2 - 1;
    2d20:	dc 01       	movw	r26, r24
    2d22:	cb 01       	movw	r24, r22
    2d24:	88 0f       	add	r24, r24
    2d26:	99 1f       	adc	r25, r25
    2d28:	aa 1f       	adc	r26, r26
    2d2a:	bb 1f       	adc	r27, r27
    2d2c:	88 0f       	add	r24, r24
    2d2e:	99 1f       	adc	r25, r25
    2d30:	aa 1f       	adc	r26, r26
    2d32:	bb 1f       	adc	r27, r27
    2d34:	9c 01       	movw	r18, r24
    2d36:	ad 01       	movw	r20, r26
    2d38:	22 0f       	add	r18, r18
    2d3a:	33 1f       	adc	r19, r19
    2d3c:	44 1f       	adc	r20, r20
    2d3e:	55 1f       	adc	r21, r21
    2d40:	60 e0       	ldi	r22, 0x00	; 0
    2d42:	72 e1       	ldi	r23, 0x12	; 18
    2d44:	8a e7       	ldi	r24, 0x7A	; 122
    2d46:	90 e0       	ldi	r25, 0x00	; 0
    2d48:	0e 94 7c 1a 	call	0x34f8	; 0x34f8 <__divmodsi4>
    2d4c:	ba 01       	movw	r22, r20
    2d4e:	a9 01       	movw	r20, r18
    2d50:	4f 5f       	subi	r20, 0xFF	; 255
    2d52:	5f 4f       	sbci	r21, 0xFF	; 255
    2d54:	6f 4f       	sbci	r22, 0xFF	; 255
    2d56:	7f 4f       	sbci	r23, 0xFF	; 255
    2d58:	db 01       	movw	r26, r22
    2d5a:	ca 01       	movw	r24, r20
    2d5c:	1a f4       	brpl	.+6      	; 0x2d64 <init_serial_stdio+0x5c>
    2d5e:	01 96       	adiw	r24, 0x01	; 1
    2d60:	a1 1d       	adc	r26, r1
    2d62:	b1 1d       	adc	r27, r1
    2d64:	b5 95       	asr	r27
    2d66:	a7 95       	ror	r26
    2d68:	97 95       	ror	r25
    2d6a:	87 95       	ror	r24
    2d6c:	01 97       	sbiw	r24, 0x01	; 1
	UBRR0 = ubrr;
    2d6e:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
    2d72:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
	 * the UDR empty interrupt here (we wait until we've got a
	 * character to transmit).
	 * NOTE: Interrupts must be enabled globally for this
	 * library to work, but we do not do this here.
	*/
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);
    2d76:	e1 ec       	ldi	r30, 0xC1	; 193
    2d78:	f0 e0       	ldi	r31, 0x00	; 0
    2d7a:	88 e1       	ldi	r24, 0x18	; 24
    2d7c:	80 83       	st	Z, r24
	
	/*
	 * Enable receive complete interrupt 
	*/
	UCSR0B  |= (1 <<RXCIE0);
    2d7e:	80 81       	ld	r24, Z
    2d80:	80 68       	ori	r24, 0x80	; 128
    2d82:	80 83       	st	Z, r24

	/* Set up our stream so the put and get functions below are used 
	 * to write/read characters via the serial port when we use
	 * stdio functions
	*/
	stdout = &myStream;
    2d84:	ef ef       	ldi	r30, 0xFF	; 255
    2d86:	f3 e0       	ldi	r31, 0x03	; 3
    2d88:	8c e7       	ldi	r24, 0x7C	; 124
    2d8a:	91 e0       	ldi	r25, 0x01	; 1
    2d8c:	93 83       	std	Z+3, r25	; 0x03
    2d8e:	82 83       	std	Z+2, r24	; 0x02
	stdin = &myStream;
    2d90:	91 83       	std	Z+1, r25	; 0x01
    2d92:	80 83       	st	Z, r24
    2d94:	08 95       	ret

00002d96 <serial_input_available>:
}

int8_t serial_input_available(void) {
	return (bytes_in_input_buffer != 0);
    2d96:	90 91 fd 03 	lds	r25, 0x03FD	; 0x8003fd <bytes_in_input_buffer>
    2d9a:	81 e0       	ldi	r24, 0x01	; 1
    2d9c:	91 11       	cpse	r25, r1
    2d9e:	01 c0       	rjmp	.+2      	; 0x2da2 <serial_input_available+0xc>
    2da0:	80 e0       	ldi	r24, 0x00	; 0
}
    2da2:	08 95       	ret

00002da4 <clear_serial_input_buffer>:

void clear_serial_input_buffer(void) {
	/* Just adjust our buffer data so it looks empty */
	input_insert_pos = 0;
    2da4:	10 92 eb 03 	sts	0x03EB, r1	; 0x8003eb <input_insert_pos>
	bytes_in_input_buffer = 0;
    2da8:	10 92 fd 03 	sts	0x03FD, r1	; 0x8003fd <bytes_in_input_buffer>
    2dac:	08 95       	ret

00002dae <__vector_21>:
/*
 * Define the interrupt handler for UART Data Register Empty (i.e. 
 * another character can be taken from our buffer and written out)
 */
ISR(USART0_UDRE_vect) 
{
    2dae:	1f 92       	push	r1
    2db0:	0f 92       	push	r0
    2db2:	0f b6       	in	r0, 0x3f	; 63
    2db4:	0f 92       	push	r0
    2db6:	11 24       	eor	r1, r1
    2db8:	2f 93       	push	r18
    2dba:	8f 93       	push	r24
    2dbc:	9f 93       	push	r25
    2dbe:	ef 93       	push	r30
    2dc0:	ff 93       	push	r31
	/* Check if we have data in our buffer */
	if(bytes_in_out_buffer > 0) {
    2dc2:	80 91 eb 02 	lds	r24, 0x02EB	; 0x8002eb <bytes_in_out_buffer>
    2dc6:	88 23       	and	r24, r24
    2dc8:	29 f1       	breq	.+74     	; 0x2e14 <__vector_21+0x66>
		 * one which is "bytes_in_buffer" characters before the 
		 * insert_pos (taking into account that we may 
		 * need to wrap around to the end of the buffer).
		 */
		char c;
		if(out_insert_pos - bytes_in_out_buffer < 0) {
    2dca:	80 91 ea 02 	lds	r24, 0x02EA	; 0x8002ea <out_insert_pos>
    2dce:	20 91 eb 02 	lds	r18, 0x02EB	; 0x8002eb <bytes_in_out_buffer>
    2dd2:	90 e0       	ldi	r25, 0x00	; 0
    2dd4:	82 1b       	sub	r24, r18
    2dd6:	91 09       	sbc	r25, r1
    2dd8:	5a f4       	brpl	.+22     	; 0x2df0 <__vector_21+0x42>
			/* Need to wrap around */
			c = out_buffer[out_insert_pos - bytes_in_out_buffer
    2dda:	e0 91 ea 02 	lds	r30, 0x02EA	; 0x8002ea <out_insert_pos>
    2dde:	80 91 eb 02 	lds	r24, 0x02EB	; 0x8002eb <bytes_in_out_buffer>
				+ OUTPUT_BUFFER_SIZE];
    2de2:	f0 e0       	ldi	r31, 0x00	; 0
    2de4:	e8 1b       	sub	r30, r24
    2de6:	f1 09       	sbc	r31, r1
		 * need to wrap around to the end of the buffer).
		 */
		char c;
		if(out_insert_pos - bytes_in_out_buffer < 0) {
			/* Need to wrap around */
			c = out_buffer[out_insert_pos - bytes_in_out_buffer
    2de8:	e5 51       	subi	r30, 0x15	; 21
    2dea:	fc 4f       	sbci	r31, 0xFC	; 252
    2dec:	90 81       	ld	r25, Z
    2dee:	0a c0       	rjmp	.+20     	; 0x2e04 <__vector_21+0x56>
				+ OUTPUT_BUFFER_SIZE];
		} else {
			c = out_buffer[out_insert_pos - bytes_in_out_buffer];
    2df0:	e0 91 ea 02 	lds	r30, 0x02EA	; 0x8002ea <out_insert_pos>
    2df4:	80 91 eb 02 	lds	r24, 0x02EB	; 0x8002eb <bytes_in_out_buffer>
    2df8:	f0 e0       	ldi	r31, 0x00	; 0
    2dfa:	e8 1b       	sub	r30, r24
    2dfc:	f1 09       	sbc	r31, r1
    2dfe:	e4 51       	subi	r30, 0x14	; 20
    2e00:	fd 4f       	sbci	r31, 0xFD	; 253
    2e02:	90 81       	ld	r25, Z
		}
		/* Decrement our count of the number of bytes in the 
		 * buffer 
		 */
		bytes_in_out_buffer--;
    2e04:	80 91 eb 02 	lds	r24, 0x02EB	; 0x8002eb <bytes_in_out_buffer>
    2e08:	81 50       	subi	r24, 0x01	; 1
    2e0a:	80 93 eb 02 	sts	0x02EB, r24	; 0x8002eb <bytes_in_out_buffer>
		
		/* Output the character via the UART */
		UDR0 = c;
    2e0e:	90 93 c6 00 	sts	0x00C6, r25	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
    2e12:	05 c0       	rjmp	.+10     	; 0x2e1e <__vector_21+0x70>
		 * Register Empty interrupt because otherwise it 
		 * will trigger again immediately this ISR exits. 
		 * The interrupt is reenabled when a character is
		 * placed in the buffer.
		 */
		UCSR0B &= ~(1<<UDRIE0);
    2e14:	e1 ec       	ldi	r30, 0xC1	; 193
    2e16:	f0 e0       	ldi	r31, 0x00	; 0
    2e18:	80 81       	ld	r24, Z
    2e1a:	8f 7d       	andi	r24, 0xDF	; 223
    2e1c:	80 83       	st	Z, r24
	}
}
    2e1e:	ff 91       	pop	r31
    2e20:	ef 91       	pop	r30
    2e22:	9f 91       	pop	r25
    2e24:	8f 91       	pop	r24
    2e26:	2f 91       	pop	r18
    2e28:	0f 90       	pop	r0
    2e2a:	0f be       	out	0x3f, r0	; 63
    2e2c:	0f 90       	pop	r0
    2e2e:	1f 90       	pop	r1
    2e30:	18 95       	reti

00002e32 <__vector_20>:
 * we can read a character. The character is read and placed in
 * the input buffer.
 */

ISR(USART0_RX_vect) 
{
    2e32:	1f 92       	push	r1
    2e34:	0f 92       	push	r0
    2e36:	0f b6       	in	r0, 0x3f	; 63
    2e38:	0f 92       	push	r0
    2e3a:	11 24       	eor	r1, r1
    2e3c:	2f 93       	push	r18
    2e3e:	3f 93       	push	r19
    2e40:	4f 93       	push	r20
    2e42:	5f 93       	push	r21
    2e44:	6f 93       	push	r22
    2e46:	7f 93       	push	r23
    2e48:	8f 93       	push	r24
    2e4a:	9f 93       	push	r25
    2e4c:	af 93       	push	r26
    2e4e:	bf 93       	push	r27
    2e50:	cf 93       	push	r28
    2e52:	ef 93       	push	r30
    2e54:	ff 93       	push	r31
	/* Read the character - we ignore the possibility of overrun. */
	char c;
	c = UDR0;
    2e56:	c0 91 c6 00 	lds	r28, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
		
	if(do_echo && bytes_in_out_buffer < OUTPUT_BUFFER_SIZE) {
    2e5a:	80 91 df 02 	lds	r24, 0x02DF	; 0x8002df <do_echo>
    2e5e:	88 23       	and	r24, r24
    2e60:	49 f0       	breq	.+18     	; 0x2e74 <__vector_20+0x42>
    2e62:	80 91 eb 02 	lds	r24, 0x02EB	; 0x8002eb <bytes_in_out_buffer>
    2e66:	8f 3f       	cpi	r24, 0xFF	; 255
    2e68:	29 f0       	breq	.+10     	; 0x2e74 <__vector_20+0x42>
		/* If echoing is enabled and there is output buffer
		 * space, echo the received character back to the UART.
		 * (If there is no output buffer space, characters
		 * will be lost.)
		 */
		uart_put_char(c, 0);
    2e6a:	60 e0       	ldi	r22, 0x00	; 0
    2e6c:	70 e0       	ldi	r23, 0x00	; 0
    2e6e:	8c 2f       	mov	r24, r28
    2e70:	0e 94 1e 16 	call	0x2c3c	; 0x2c3c <uart_put_char>
	 * Check if we have space in our buffer. If not, set the overrun
	 * flag and throw away the character. (We never clear the 
	 * overrun flag - it's up to the programmer to check/clear
	 * this flag if desired.)
	 */
	if(bytes_in_input_buffer >= INPUT_BUFFER_SIZE) {
    2e74:	80 91 fd 03 	lds	r24, 0x03FD	; 0x8003fd <bytes_in_input_buffer>
    2e78:	80 31       	cpi	r24, 0x10	; 16
    2e7a:	20 f0       	brcs	.+8      	; 0x2e84 <__vector_20+0x52>
		input_overrun = 1;
    2e7c:	81 e0       	ldi	r24, 0x01	; 1
    2e7e:	80 93 fc 03 	sts	0x03FC, r24	; 0x8003fc <input_overrun>
    2e82:	18 c0       	rjmp	.+48     	; 0x2eb4 <__vector_20+0x82>
	} else {
		/* If the character is a carriage return, turn it into a
		 * linefeed 
		*/
		if (c == '\r') {
    2e84:	cd 30       	cpi	r28, 0x0D	; 13
    2e86:	09 f4       	brne	.+2      	; 0x2e8a <__vector_20+0x58>
			c = '\n';
    2e88:	ca e0       	ldi	r28, 0x0A	; 10
		}
		
		/* 
		 * There is room in the input buffer 
		 */
		input_buffer[input_insert_pos++] = c;
    2e8a:	e0 91 eb 03 	lds	r30, 0x03EB	; 0x8003eb <input_insert_pos>
    2e8e:	81 e0       	ldi	r24, 0x01	; 1
    2e90:	8e 0f       	add	r24, r30
    2e92:	80 93 eb 03 	sts	0x03EB, r24	; 0x8003eb <input_insert_pos>
    2e96:	f0 e0       	ldi	r31, 0x00	; 0
    2e98:	e4 51       	subi	r30, 0x14	; 20
    2e9a:	fc 4f       	sbci	r31, 0xFC	; 252
    2e9c:	c0 83       	st	Z, r28
		bytes_in_input_buffer++;
    2e9e:	80 91 fd 03 	lds	r24, 0x03FD	; 0x8003fd <bytes_in_input_buffer>
    2ea2:	8f 5f       	subi	r24, 0xFF	; 255
    2ea4:	80 93 fd 03 	sts	0x03FD, r24	; 0x8003fd <bytes_in_input_buffer>
		if(input_insert_pos == INPUT_BUFFER_SIZE) {
    2ea8:	80 91 eb 03 	lds	r24, 0x03EB	; 0x8003eb <input_insert_pos>
    2eac:	80 31       	cpi	r24, 0x10	; 16
    2eae:	11 f4       	brne	.+4      	; 0x2eb4 <__vector_20+0x82>
			/* Wrap around buffer pointer if necessary */
			input_insert_pos = 0;
    2eb0:	10 92 eb 03 	sts	0x03EB, r1	; 0x8003eb <input_insert_pos>
		}
	}
}
    2eb4:	ff 91       	pop	r31
    2eb6:	ef 91       	pop	r30
    2eb8:	cf 91       	pop	r28
    2eba:	bf 91       	pop	r27
    2ebc:	af 91       	pop	r26
    2ebe:	9f 91       	pop	r25
    2ec0:	8f 91       	pop	r24
    2ec2:	7f 91       	pop	r23
    2ec4:	6f 91       	pop	r22
    2ec6:	5f 91       	pop	r21
    2ec8:	4f 91       	pop	r20
    2eca:	3f 91       	pop	r19
    2ecc:	2f 91       	pop	r18
    2ece:	0f 90       	pop	r0
    2ed0:	0f be       	out	0x3f, r0	; 63
    2ed2:	0f 90       	pop	r0
    2ed4:	1f 90       	pop	r1
    2ed6:	18 95       	reti

00002ed8 <spi_setup_master>:
void spi_setup_master(uint8_t clockdivider) {
	// Set up SPI communication as a master
	// Make the SS, MOSI and SCK pins outputs. These are pins
	// 4, 5 and 7 of port B on the ATmega324A
	
	DDRB |= (1<<4)|(1<<5)|(1<<7);
    2ed8:	94 b1       	in	r25, 0x04	; 4
    2eda:	90 6b       	ori	r25, 0xB0	; 176
    2edc:	94 b9       	out	0x04, r25	; 4
	
	// Set the slave select (SS) line high
	PORTB |= (1<<4);
    2ede:	2c 9a       	sbi	0x05, 4	; 5
	
	// Set up the SPI control registers SPCR and SPSR:
	// - SPE bit = 1 (SPI is enabled)
	// - MSTR bit = 1 (Master Mode)
	SPCR0 = (1<<SPE0)|(1<<MSTR0);
    2ee0:	90 e5       	ldi	r25, 0x50	; 80
    2ee2:	9c bd       	out	0x2c, r25	; 44
	
	// Set SPR0 and SPR1 bits in SPCR and SPI2X bit in SPSR
	// based on the given clock divider
	// Invalid values default to the slowest speed
	// We consider each bit in turn
	switch(clockdivider) {
    2ee4:	88 30       	cpi	r24, 0x08	; 8
    2ee6:	21 f0       	breq	.+8      	; 0x2ef0 <spi_setup_master+0x18>
    2ee8:	80 32       	cpi	r24, 0x20	; 32
    2eea:	11 f0       	breq	.+4      	; 0x2ef0 <spi_setup_master+0x18>
    2eec:	82 30       	cpi	r24, 0x02	; 2
    2eee:	19 f4       	brne	.+6      	; 0x2ef6 <spi_setup_master+0x1e>
		case 2:
		case 8:
		case 32:
			SPSR0 = (1<<SPI2X0);
    2ef0:	91 e0       	ldi	r25, 0x01	; 1
    2ef2:	9d bd       	out	0x2d, r25	; 45
			break;
    2ef4:	01 c0       	rjmp	.+2      	; 0x2ef8 <spi_setup_master+0x20>
		default:
			SPSR0 = 0;
    2ef6:	1d bc       	out	0x2d, r1	; 45
			break;
	}
	switch(clockdivider) {
    2ef8:	80 32       	cpi	r24, 0x20	; 32
    2efa:	69 f0       	breq	.+26     	; 0x2f16 <spi_setup_master+0x3e>
    2efc:	28 f4       	brcc	.+10     	; 0x2f08 <spi_setup_master+0x30>
    2efe:	88 30       	cpi	r24, 0x08	; 8
    2f00:	71 f0       	breq	.+28     	; 0x2f1e <spi_setup_master+0x46>
    2f02:	80 31       	cpi	r24, 0x10	; 16
    2f04:	61 f0       	breq	.+24     	; 0x2f1e <spi_setup_master+0x46>
    2f06:	0e c0       	rjmp	.+28     	; 0x2f24 <spi_setup_master+0x4c>
    2f08:	80 34       	cpi	r24, 0x40	; 64
    2f0a:	29 f0       	breq	.+10     	; 0x2f16 <spi_setup_master+0x3e>
    2f0c:	80 38       	cpi	r24, 0x80	; 128
    2f0e:	51 f4       	brne	.+20     	; 0x2f24 <spi_setup_master+0x4c>
		case 128:
			SPCR0 |= (1<<SPR00);
    2f10:	8c b5       	in	r24, 0x2c	; 44
    2f12:	81 60       	ori	r24, 0x01	; 1
    2f14:	8c bd       	out	0x2c, r24	; 44
			// Note this flows through to the next code block
		case 32:
		case 64:
			SPCR0 |= (1<<SPR10);
    2f16:	8c b5       	in	r24, 0x2c	; 44
    2f18:	82 60       	ori	r24, 0x02	; 2
    2f1a:	8c bd       	out	0x2c, r24	; 44
			break;
    2f1c:	03 c0       	rjmp	.+6      	; 0x2f24 <spi_setup_master+0x4c>
		case 8:
		case 16:
			SPCR0 |= (1<<SPR00);
    2f1e:	8c b5       	in	r24, 0x2c	; 44
    2f20:	81 60       	ori	r24, 0x01	; 1
    2f22:	8c bd       	out	0x2c, r24	; 44
			break;
	}
	
	// Take SS (slave select) line low
	PORTB &= ~(1<<4);
    2f24:	2c 98       	cbi	0x05, 4	; 5
    2f26:	08 95       	ret

00002f28 <spi_send_byte>:
	// the transfer. We then wait until the most significant byte of
	// SPSR0 (SPIF0 bit) is set - this indicates that the transfer is
	// complete. (The final read of SPSR0 followed by a read of SPDR0
	// will cause the SPIF bit to be reset to 0. See page 224 of the 
	// ATmega324A datasheet.)
	SPDR0 = byte;
    2f28:	8e bd       	out	0x2e, r24	; 46
	while((SPSR0 & (1<<SPIF0)) == 0) {
    2f2a:	0d b4       	in	r0, 0x2d	; 45
    2f2c:	07 fe       	sbrs	r0, 7
    2f2e:	fd cf       	rjmp	.-6      	; 0x2f2a <spi_send_byte+0x2>
		; // wait
	}
	return SPDR0;
    2f30:	8e b5       	in	r24, 0x2e	; 46
    2f32:	08 95       	ret

00002f34 <move_cursor>:
	printf_P(PSTR("\x1bM"));	// ESC-M
}

void scroll_up(void) {
	printf_P(PSTR("\x1b\x44"));	// ESC-D
}
    2f34:	9f 93       	push	r25
    2f36:	8f 93       	push	r24
    2f38:	7f 93       	push	r23
    2f3a:	6f 93       	push	r22
    2f3c:	86 ec       	ldi	r24, 0xC6	; 198
    2f3e:	92 e0       	ldi	r25, 0x02	; 2
    2f40:	9f 93       	push	r25
    2f42:	8f 93       	push	r24
    2f44:	0e 94 18 1b 	call	0x3630	; 0x3630 <printf_P>
    2f48:	0f 90       	pop	r0
    2f4a:	0f 90       	pop	r0
    2f4c:	0f 90       	pop	r0
    2f4e:	0f 90       	pop	r0
    2f50:	0f 90       	pop	r0
    2f52:	0f 90       	pop	r0
    2f54:	08 95       	ret

00002f56 <normal_display_mode>:
    2f56:	81 ec       	ldi	r24, 0xC1	; 193
    2f58:	92 e0       	ldi	r25, 0x02	; 2
    2f5a:	9f 93       	push	r25
    2f5c:	8f 93       	push	r24
    2f5e:	0e 94 18 1b 	call	0x3630	; 0x3630 <printf_P>
    2f62:	0f 90       	pop	r0
    2f64:	0f 90       	pop	r0
    2f66:	08 95       	ret

00002f68 <reverse_video>:
    2f68:	8c eb       	ldi	r24, 0xBC	; 188
    2f6a:	92 e0       	ldi	r25, 0x02	; 2
    2f6c:	9f 93       	push	r25
    2f6e:	8f 93       	push	r24
    2f70:	0e 94 18 1b 	call	0x3630	; 0x3630 <printf_P>
    2f74:	0f 90       	pop	r0
    2f76:	0f 90       	pop	r0
    2f78:	08 95       	ret

00002f7a <clear_terminal>:
    2f7a:	87 eb       	ldi	r24, 0xB7	; 183
    2f7c:	92 e0       	ldi	r25, 0x02	; 2
    2f7e:	9f 93       	push	r25
    2f80:	8f 93       	push	r24
    2f82:	0e 94 18 1b 	call	0x3630	; 0x3630 <printf_P>
    2f86:	0f 90       	pop	r0
    2f88:	0f 90       	pop	r0
    2f8a:	08 95       	ret

00002f8c <clear_to_end_of_line>:
    2f8c:	83 eb       	ldi	r24, 0xB3	; 179
    2f8e:	92 e0       	ldi	r25, 0x02	; 2
    2f90:	9f 93       	push	r25
    2f92:	8f 93       	push	r24
    2f94:	0e 94 18 1b 	call	0x3630	; 0x3630 <printf_P>
    2f98:	0f 90       	pop	r0
    2f9a:	0f 90       	pop	r0
    2f9c:	08 95       	ret

00002f9e <set_display_attribute>:
    2f9e:	1f 92       	push	r1
    2fa0:	8f 93       	push	r24
    2fa2:	8d ea       	ldi	r24, 0xAD	; 173
    2fa4:	92 e0       	ldi	r25, 0x02	; 2
    2fa6:	9f 93       	push	r25
    2fa8:	8f 93       	push	r24
    2faa:	0e 94 18 1b 	call	0x3630	; 0x3630 <printf_P>
    2fae:	0f 90       	pop	r0
    2fb0:	0f 90       	pop	r0
    2fb2:	0f 90       	pop	r0
    2fb4:	0f 90       	pop	r0
    2fb6:	08 95       	ret

00002fb8 <hide_cursor>:
    2fb8:	86 ea       	ldi	r24, 0xA6	; 166
    2fba:	92 e0       	ldi	r25, 0x02	; 2
    2fbc:	9f 93       	push	r25
    2fbe:	8f 93       	push	r24
    2fc0:	0e 94 18 1b 	call	0x3630	; 0x3630 <printf_P>
    2fc4:	0f 90       	pop	r0
    2fc6:	0f 90       	pop	r0
    2fc8:	08 95       	ret

00002fca <show_cursor>:
    2fca:	8f e9       	ldi	r24, 0x9F	; 159
    2fcc:	92 e0       	ldi	r25, 0x02	; 2
    2fce:	9f 93       	push	r25
    2fd0:	8f 93       	push	r24
    2fd2:	0e 94 18 1b 	call	0x3630	; 0x3630 <printf_P>
    2fd6:	0f 90       	pop	r0
    2fd8:	0f 90       	pop	r0
    2fda:	08 95       	ret

00002fdc <draw_horizontal_line>:

void draw_horizontal_line(int8_t y, int8_t start_x, int8_t end_x) {
    2fdc:	cf 93       	push	r28
    2fde:	df 93       	push	r29
    2fe0:	c6 2f       	mov	r28, r22
    2fe2:	d4 2f       	mov	r29, r20
	int8_t i;
	move_cursor(start_x, y);
    2fe4:	68 2f       	mov	r22, r24
    2fe6:	88 0f       	add	r24, r24
    2fe8:	77 0b       	sbc	r23, r23
    2fea:	8c 2f       	mov	r24, r28
    2fec:	0c 2e       	mov	r0, r28
    2fee:	00 0c       	add	r0, r0
    2ff0:	99 0b       	sbc	r25, r25
    2ff2:	0e 94 9a 17 	call	0x2f34	; 0x2f34 <move_cursor>
	reverse_video();
    2ff6:	0e 94 b4 17 	call	0x2f68	; 0x2f68 <reverse_video>
	for(i=start_x; i <= end_x; i++) {
    2ffa:	dc 17       	cp	r29, r28
    2ffc:	3c f0       	brlt	.+14     	; 0x300c <draw_horizontal_line+0x30>
		printf(" ");	/* No need to use printf_P - printing 
    2ffe:	80 e2       	ldi	r24, 0x20	; 32
    3000:	90 e0       	ldi	r25, 0x00	; 0
    3002:	0e 94 3e 1b 	call	0x367c	; 0x367c <putchar>
    3006:	cf 5f       	subi	r28, 0xFF	; 255

void draw_horizontal_line(int8_t y, int8_t start_x, int8_t end_x) {
	int8_t i;
	move_cursor(start_x, y);
	reverse_video();
	for(i=start_x; i <= end_x; i++) {
    3008:	dc 17       	cp	r29, r28
    300a:	cc f7       	brge	.-14     	; 0x2ffe <draw_horizontal_line+0x22>
		printf(" ");	/* No need to use printf_P - printing 
						 * a single character gets optimised
						 * to a putchar call 
						 */
	}
	normal_display_mode();
    300c:	0e 94 ab 17 	call	0x2f56	; 0x2f56 <normal_display_mode>
}
    3010:	df 91       	pop	r29
    3012:	cf 91       	pop	r28
    3014:	08 95       	ret

00003016 <draw_vertical_line>:

void draw_vertical_line(int8_t x, int8_t start_y, int8_t end_y) {
    3016:	0f 93       	push	r16
    3018:	1f 93       	push	r17
    301a:	cf 93       	push	r28
    301c:	df 93       	push	r29
    301e:	c6 2f       	mov	r28, r22
    3020:	d4 2f       	mov	r29, r20
	int8_t i;
	move_cursor(x, start_y);
    3022:	06 2e       	mov	r0, r22
    3024:	00 0c       	add	r0, r0
    3026:	77 0b       	sbc	r23, r23
    3028:	08 2e       	mov	r0, r24
    302a:	00 0c       	add	r0, r0
    302c:	99 0b       	sbc	r25, r25
    302e:	0e 94 9a 17 	call	0x2f34	; 0x2f34 <move_cursor>
	reverse_video();
    3032:	0e 94 b4 17 	call	0x2f68	; 0x2f68 <reverse_video>
	for(i=start_y; i < end_y; i++) {
    3036:	cd 17       	cp	r28, r29
    3038:	7c f4       	brge	.+30     	; 0x3058 <draw_vertical_line+0x42>
		printf(" ");
		/* Move down one and back to the left one */
		printf_P(PSTR("\x1b[B\x1b[D"));
    303a:	08 e9       	ldi	r16, 0x98	; 152
    303c:	12 e0       	ldi	r17, 0x02	; 2
void draw_vertical_line(int8_t x, int8_t start_y, int8_t end_y) {
	int8_t i;
	move_cursor(x, start_y);
	reverse_video();
	for(i=start_y; i < end_y; i++) {
		printf(" ");
    303e:	80 e2       	ldi	r24, 0x20	; 32
    3040:	90 e0       	ldi	r25, 0x00	; 0
    3042:	0e 94 3e 1b 	call	0x367c	; 0x367c <putchar>
		/* Move down one and back to the left one */
		printf_P(PSTR("\x1b[B\x1b[D"));
    3046:	1f 93       	push	r17
    3048:	0f 93       	push	r16
    304a:	0e 94 18 1b 	call	0x3630	; 0x3630 <printf_P>
    304e:	cf 5f       	subi	r28, 0xFF	; 255

void draw_vertical_line(int8_t x, int8_t start_y, int8_t end_y) {
	int8_t i;
	move_cursor(x, start_y);
	reverse_video();
	for(i=start_y; i < end_y; i++) {
    3050:	0f 90       	pop	r0
    3052:	0f 90       	pop	r0
    3054:	cd 17       	cp	r28, r29
    3056:	9c f3       	brlt	.-26     	; 0x303e <draw_vertical_line+0x28>
		printf(" ");
		/* Move down one and back to the left one */
		printf_P(PSTR("\x1b[B\x1b[D"));
	}
	printf(" ");
    3058:	80 e2       	ldi	r24, 0x20	; 32
    305a:	90 e0       	ldi	r25, 0x00	; 0
    305c:	0e 94 3e 1b 	call	0x367c	; 0x367c <putchar>
	normal_display_mode();
    3060:	0e 94 ab 17 	call	0x2f56	; 0x2f56 <normal_display_mode>
}
    3064:	df 91       	pop	r29
    3066:	cf 91       	pop	r28
    3068:	1f 91       	pop	r17
    306a:	0f 91       	pop	r16
    306c:	08 95       	ret

0000306e <init_timer0>:
 */
void init_timer0(void) {
	/* Reset clock tick count. L indicates a long (32 bit)
	 * constant.
	 */
	clockTicks = 0L;
    306e:	10 92 e0 02 	sts	0x02E0, r1	; 0x8002e0 <clockTicks>
    3072:	10 92 e1 02 	sts	0x02E1, r1	; 0x8002e1 <clockTicks+0x1>
    3076:	10 92 e2 02 	sts	0x02E2, r1	; 0x8002e2 <clockTicks+0x2>
    307a:	10 92 e3 02 	sts	0x02E3, r1	; 0x8002e3 <clockTicks+0x3>

	pause = 0;
    307e:	10 92 fe 03 	sts	0x03FE, r1	; 0x8003fe <pause>

	/* Clear the timer */
	TCNT0 = 0;
    3082:	16 bc       	out	0x26, r1	; 38

	/* Set the output compare value to be 124 */
	OCR0A = 124;
    3084:	8c e7       	ldi	r24, 0x7C	; 124
    3086:	87 bd       	out	0x27, r24	; 39

	/* Set the timer to clear on compare match (CTC mode)
	 * and to divide the clock by 64. This starts the timer
	 * running.
	 */
	TCCR0A = (1<<WGM01);
    3088:	82 e0       	ldi	r24, 0x02	; 2
    308a:	84 bd       	out	0x24, r24	; 36
	TCCR0B = (1<<CS01)|(1<<CS00);
    308c:	83 e0       	ldi	r24, 0x03	; 3
    308e:	85 bd       	out	0x25, r24	; 37

	/* Enable an interrupt on output compare match.
	 * Note that interrupts have to be enabled globally
	 * before the interrupts will fire.
	 */
	TIMSK0 |= (1<<OCIE0A);
    3090:	ee e6       	ldi	r30, 0x6E	; 110
    3092:	f0 e0       	ldi	r31, 0x00	; 0
    3094:	80 81       	ld	r24, Z
    3096:	82 60       	ori	r24, 0x02	; 2
    3098:	80 83       	st	Z, r24

	/* Make sure the interrupt flag is cleared by writing a
	 * 1 to it.
	 */
	TIFR0 &= (1<<OCF0A);
    309a:	85 b3       	in	r24, 0x15	; 21
    309c:	82 70       	andi	r24, 0x02	; 2
    309e:	85 bb       	out	0x15, r24	; 21
    30a0:	08 95       	ret

000030a2 <get_current_time>:
	/* Disable interrupts so we can be sure that the interrupt
	 * doesn't fire when we've copied just a couple of bytes
	 * of the value. Interrupts are re-enabled if they were
	 * enabled at the start.
	 */
	uint8_t interruptsOn = bit_is_set(SREG, SREG_I);
    30a2:	2f b7       	in	r18, 0x3f	; 63
	cli();
    30a4:	f8 94       	cli
	returnValue = clockTicks;
    30a6:	60 91 e0 02 	lds	r22, 0x02E0	; 0x8002e0 <clockTicks>
    30aa:	70 91 e1 02 	lds	r23, 0x02E1	; 0x8002e1 <clockTicks+0x1>
    30ae:	80 91 e2 02 	lds	r24, 0x02E2	; 0x8002e2 <clockTicks+0x2>
    30b2:	90 91 e3 02 	lds	r25, 0x02E3	; 0x8002e3 <clockTicks+0x3>
	if(interruptsOn) {
    30b6:	22 23       	and	r18, r18
    30b8:	0c f4       	brge	.+2      	; 0x30bc <get_current_time+0x1a>
		sei();
    30ba:	78 94       	sei
	}
	return returnValue;
}
    30bc:	08 95       	ret

000030be <pause_timer>:

void pause_timer(uint8_t set) {
	pause = set;
    30be:	80 93 fe 03 	sts	0x03FE, r24	; 0x8003fe <pause>
	if(!pause) {
    30c2:	81 11       	cpse	r24, r1
    30c4:	03 c0       	rjmp	.+6      	; 0x30cc <pause_timer+0xe>
		TIFR0 &= (1<<OCF0A);
    30c6:	85 b3       	in	r24, 0x15	; 21
    30c8:	82 70       	andi	r24, 0x02	; 2
    30ca:	85 bb       	out	0x15, r24	; 21
    30cc:	08 95       	ret

000030ce <__vector_16>:
	}
}

ISR(TIMER0_COMPA_vect) {
    30ce:	1f 92       	push	r1
    30d0:	0f 92       	push	r0
    30d2:	0f b6       	in	r0, 0x3f	; 63
    30d4:	0f 92       	push	r0
    30d6:	11 24       	eor	r1, r1
    30d8:	8f 93       	push	r24
    30da:	9f 93       	push	r25
    30dc:	af 93       	push	r26
    30de:	bf 93       	push	r27
	/* Increment our clock tick count */
	if(!pause) {
    30e0:	80 91 fe 03 	lds	r24, 0x03FE	; 0x8003fe <pause>
    30e4:	81 11       	cpse	r24, r1
    30e6:	13 c0       	rjmp	.+38     	; 0x310e <__vector_16+0x40>
		clockTicks++;
    30e8:	80 91 e0 02 	lds	r24, 0x02E0	; 0x8002e0 <clockTicks>
    30ec:	90 91 e1 02 	lds	r25, 0x02E1	; 0x8002e1 <clockTicks+0x1>
    30f0:	a0 91 e2 02 	lds	r26, 0x02E2	; 0x8002e2 <clockTicks+0x2>
    30f4:	b0 91 e3 02 	lds	r27, 0x02E3	; 0x8002e3 <clockTicks+0x3>
    30f8:	01 96       	adiw	r24, 0x01	; 1
    30fa:	a1 1d       	adc	r26, r1
    30fc:	b1 1d       	adc	r27, r1
    30fe:	80 93 e0 02 	sts	0x02E0, r24	; 0x8002e0 <clockTicks>
    3102:	90 93 e1 02 	sts	0x02E1, r25	; 0x8002e1 <clockTicks+0x1>
    3106:	a0 93 e2 02 	sts	0x02E2, r26	; 0x8002e2 <clockTicks+0x2>
    310a:	b0 93 e3 02 	sts	0x02E3, r27	; 0x8002e3 <clockTicks+0x3>
	}
}
    310e:	bf 91       	pop	r27
    3110:	af 91       	pop	r26
    3112:	9f 91       	pop	r25
    3114:	8f 91       	pop	r24
    3116:	0f 90       	pop	r0
    3118:	0f be       	out	0x3f, r0	; 63
    311a:	0f 90       	pop	r0
    311c:	1f 90       	pop	r1
    311e:	18 95       	reti

00003120 <__cmpsf2>:
    3120:	0e 94 73 19 	call	0x32e6	; 0x32e6 <__fp_cmp>
    3124:	08 f4       	brcc	.+2      	; 0x3128 <__cmpsf2+0x8>
    3126:	81 e0       	ldi	r24, 0x01	; 1
    3128:	08 95       	ret

0000312a <__divsf3>:
    312a:	0e 94 a9 18 	call	0x3152	; 0x3152 <__divsf3x>
    312e:	0c 94 ae 19 	jmp	0x335c	; 0x335c <__fp_round>
    3132:	0e 94 a7 19 	call	0x334e	; 0x334e <__fp_pscB>
    3136:	58 f0       	brcs	.+22     	; 0x314e <__divsf3+0x24>
    3138:	0e 94 a0 19 	call	0x3340	; 0x3340 <__fp_pscA>
    313c:	40 f0       	brcs	.+16     	; 0x314e <__divsf3+0x24>
    313e:	29 f4       	brne	.+10     	; 0x314a <__divsf3+0x20>
    3140:	5f 3f       	cpi	r21, 0xFF	; 255
    3142:	29 f0       	breq	.+10     	; 0x314e <__divsf3+0x24>
    3144:	0c 94 97 19 	jmp	0x332e	; 0x332e <__fp_inf>
    3148:	51 11       	cpse	r21, r1
    314a:	0c 94 e2 19 	jmp	0x33c4	; 0x33c4 <__fp_szero>
    314e:	0c 94 9d 19 	jmp	0x333a	; 0x333a <__fp_nan>

00003152 <__divsf3x>:
    3152:	0e 94 bf 19 	call	0x337e	; 0x337e <__fp_split3>
    3156:	68 f3       	brcs	.-38     	; 0x3132 <__divsf3+0x8>

00003158 <__divsf3_pse>:
    3158:	99 23       	and	r25, r25
    315a:	b1 f3       	breq	.-20     	; 0x3148 <__divsf3+0x1e>
    315c:	55 23       	and	r21, r21
    315e:	91 f3       	breq	.-28     	; 0x3144 <__divsf3+0x1a>
    3160:	95 1b       	sub	r25, r21
    3162:	55 0b       	sbc	r21, r21
    3164:	bb 27       	eor	r27, r27
    3166:	aa 27       	eor	r26, r26
    3168:	62 17       	cp	r22, r18
    316a:	73 07       	cpc	r23, r19
    316c:	84 07       	cpc	r24, r20
    316e:	38 f0       	brcs	.+14     	; 0x317e <__divsf3_pse+0x26>
    3170:	9f 5f       	subi	r25, 0xFF	; 255
    3172:	5f 4f       	sbci	r21, 0xFF	; 255
    3174:	22 0f       	add	r18, r18
    3176:	33 1f       	adc	r19, r19
    3178:	44 1f       	adc	r20, r20
    317a:	aa 1f       	adc	r26, r26
    317c:	a9 f3       	breq	.-22     	; 0x3168 <__divsf3_pse+0x10>
    317e:	35 d0       	rcall	.+106    	; 0x31ea <__divsf3_pse+0x92>
    3180:	0e 2e       	mov	r0, r30
    3182:	3a f0       	brmi	.+14     	; 0x3192 <__divsf3_pse+0x3a>
    3184:	e0 e8       	ldi	r30, 0x80	; 128
    3186:	32 d0       	rcall	.+100    	; 0x31ec <__divsf3_pse+0x94>
    3188:	91 50       	subi	r25, 0x01	; 1
    318a:	50 40       	sbci	r21, 0x00	; 0
    318c:	e6 95       	lsr	r30
    318e:	00 1c       	adc	r0, r0
    3190:	ca f7       	brpl	.-14     	; 0x3184 <__divsf3_pse+0x2c>
    3192:	2b d0       	rcall	.+86     	; 0x31ea <__divsf3_pse+0x92>
    3194:	fe 2f       	mov	r31, r30
    3196:	29 d0       	rcall	.+82     	; 0x31ea <__divsf3_pse+0x92>
    3198:	66 0f       	add	r22, r22
    319a:	77 1f       	adc	r23, r23
    319c:	88 1f       	adc	r24, r24
    319e:	bb 1f       	adc	r27, r27
    31a0:	26 17       	cp	r18, r22
    31a2:	37 07       	cpc	r19, r23
    31a4:	48 07       	cpc	r20, r24
    31a6:	ab 07       	cpc	r26, r27
    31a8:	b0 e8       	ldi	r27, 0x80	; 128
    31aa:	09 f0       	breq	.+2      	; 0x31ae <__divsf3_pse+0x56>
    31ac:	bb 0b       	sbc	r27, r27
    31ae:	80 2d       	mov	r24, r0
    31b0:	bf 01       	movw	r22, r30
    31b2:	ff 27       	eor	r31, r31
    31b4:	93 58       	subi	r25, 0x83	; 131
    31b6:	5f 4f       	sbci	r21, 0xFF	; 255
    31b8:	3a f0       	brmi	.+14     	; 0x31c8 <__divsf3_pse+0x70>
    31ba:	9e 3f       	cpi	r25, 0xFE	; 254
    31bc:	51 05       	cpc	r21, r1
    31be:	78 f0       	brcs	.+30     	; 0x31de <__divsf3_pse+0x86>
    31c0:	0c 94 97 19 	jmp	0x332e	; 0x332e <__fp_inf>
    31c4:	0c 94 e2 19 	jmp	0x33c4	; 0x33c4 <__fp_szero>
    31c8:	5f 3f       	cpi	r21, 0xFF	; 255
    31ca:	e4 f3       	brlt	.-8      	; 0x31c4 <__divsf3_pse+0x6c>
    31cc:	98 3e       	cpi	r25, 0xE8	; 232
    31ce:	d4 f3       	brlt	.-12     	; 0x31c4 <__divsf3_pse+0x6c>
    31d0:	86 95       	lsr	r24
    31d2:	77 95       	ror	r23
    31d4:	67 95       	ror	r22
    31d6:	b7 95       	ror	r27
    31d8:	f7 95       	ror	r31
    31da:	9f 5f       	subi	r25, 0xFF	; 255
    31dc:	c9 f7       	brne	.-14     	; 0x31d0 <__divsf3_pse+0x78>
    31de:	88 0f       	add	r24, r24
    31e0:	91 1d       	adc	r25, r1
    31e2:	96 95       	lsr	r25
    31e4:	87 95       	ror	r24
    31e6:	97 f9       	bld	r25, 7
    31e8:	08 95       	ret
    31ea:	e1 e0       	ldi	r30, 0x01	; 1
    31ec:	66 0f       	add	r22, r22
    31ee:	77 1f       	adc	r23, r23
    31f0:	88 1f       	adc	r24, r24
    31f2:	bb 1f       	adc	r27, r27
    31f4:	62 17       	cp	r22, r18
    31f6:	73 07       	cpc	r23, r19
    31f8:	84 07       	cpc	r24, r20
    31fa:	ba 07       	cpc	r27, r26
    31fc:	20 f0       	brcs	.+8      	; 0x3206 <__divsf3_pse+0xae>
    31fe:	62 1b       	sub	r22, r18
    3200:	73 0b       	sbc	r23, r19
    3202:	84 0b       	sbc	r24, r20
    3204:	ba 0b       	sbc	r27, r26
    3206:	ee 1f       	adc	r30, r30
    3208:	88 f7       	brcc	.-30     	; 0x31ec <__divsf3_pse+0x94>
    320a:	e0 95       	com	r30
    320c:	08 95       	ret

0000320e <__fixunssfsi>:
    320e:	0e 94 c7 19 	call	0x338e	; 0x338e <__fp_splitA>
    3212:	88 f0       	brcs	.+34     	; 0x3236 <__fixunssfsi+0x28>
    3214:	9f 57       	subi	r25, 0x7F	; 127
    3216:	98 f0       	brcs	.+38     	; 0x323e <__fixunssfsi+0x30>
    3218:	b9 2f       	mov	r27, r25
    321a:	99 27       	eor	r25, r25
    321c:	b7 51       	subi	r27, 0x17	; 23
    321e:	b0 f0       	brcs	.+44     	; 0x324c <__fixunssfsi+0x3e>
    3220:	e1 f0       	breq	.+56     	; 0x325a <__fixunssfsi+0x4c>
    3222:	66 0f       	add	r22, r22
    3224:	77 1f       	adc	r23, r23
    3226:	88 1f       	adc	r24, r24
    3228:	99 1f       	adc	r25, r25
    322a:	1a f0       	brmi	.+6      	; 0x3232 <__fixunssfsi+0x24>
    322c:	ba 95       	dec	r27
    322e:	c9 f7       	brne	.-14     	; 0x3222 <__fixunssfsi+0x14>
    3230:	14 c0       	rjmp	.+40     	; 0x325a <__fixunssfsi+0x4c>
    3232:	b1 30       	cpi	r27, 0x01	; 1
    3234:	91 f0       	breq	.+36     	; 0x325a <__fixunssfsi+0x4c>
    3236:	0e 94 e1 19 	call	0x33c2	; 0x33c2 <__fp_zero>
    323a:	b1 e0       	ldi	r27, 0x01	; 1
    323c:	08 95       	ret
    323e:	0c 94 e1 19 	jmp	0x33c2	; 0x33c2 <__fp_zero>
    3242:	67 2f       	mov	r22, r23
    3244:	78 2f       	mov	r23, r24
    3246:	88 27       	eor	r24, r24
    3248:	b8 5f       	subi	r27, 0xF8	; 248
    324a:	39 f0       	breq	.+14     	; 0x325a <__fixunssfsi+0x4c>
    324c:	b9 3f       	cpi	r27, 0xF9	; 249
    324e:	cc f3       	brlt	.-14     	; 0x3242 <__fixunssfsi+0x34>
    3250:	86 95       	lsr	r24
    3252:	77 95       	ror	r23
    3254:	67 95       	ror	r22
    3256:	b3 95       	inc	r27
    3258:	d9 f7       	brne	.-10     	; 0x3250 <__fixunssfsi+0x42>
    325a:	3e f4       	brtc	.+14     	; 0x326a <__fixunssfsi+0x5c>
    325c:	90 95       	com	r25
    325e:	80 95       	com	r24
    3260:	70 95       	com	r23
    3262:	61 95       	neg	r22
    3264:	7f 4f       	sbci	r23, 0xFF	; 255
    3266:	8f 4f       	sbci	r24, 0xFF	; 255
    3268:	9f 4f       	sbci	r25, 0xFF	; 255
    326a:	08 95       	ret

0000326c <__floatunsisf>:
    326c:	e8 94       	clt
    326e:	09 c0       	rjmp	.+18     	; 0x3282 <__floatsisf+0x12>

00003270 <__floatsisf>:
    3270:	97 fb       	bst	r25, 7
    3272:	3e f4       	brtc	.+14     	; 0x3282 <__floatsisf+0x12>
    3274:	90 95       	com	r25
    3276:	80 95       	com	r24
    3278:	70 95       	com	r23
    327a:	61 95       	neg	r22
    327c:	7f 4f       	sbci	r23, 0xFF	; 255
    327e:	8f 4f       	sbci	r24, 0xFF	; 255
    3280:	9f 4f       	sbci	r25, 0xFF	; 255
    3282:	99 23       	and	r25, r25
    3284:	a9 f0       	breq	.+42     	; 0x32b0 <__floatsisf+0x40>
    3286:	f9 2f       	mov	r31, r25
    3288:	96 e9       	ldi	r25, 0x96	; 150
    328a:	bb 27       	eor	r27, r27
    328c:	93 95       	inc	r25
    328e:	f6 95       	lsr	r31
    3290:	87 95       	ror	r24
    3292:	77 95       	ror	r23
    3294:	67 95       	ror	r22
    3296:	b7 95       	ror	r27
    3298:	f1 11       	cpse	r31, r1
    329a:	f8 cf       	rjmp	.-16     	; 0x328c <__floatsisf+0x1c>
    329c:	fa f4       	brpl	.+62     	; 0x32dc <__floatsisf+0x6c>
    329e:	bb 0f       	add	r27, r27
    32a0:	11 f4       	brne	.+4      	; 0x32a6 <__floatsisf+0x36>
    32a2:	60 ff       	sbrs	r22, 0
    32a4:	1b c0       	rjmp	.+54     	; 0x32dc <__floatsisf+0x6c>
    32a6:	6f 5f       	subi	r22, 0xFF	; 255
    32a8:	7f 4f       	sbci	r23, 0xFF	; 255
    32aa:	8f 4f       	sbci	r24, 0xFF	; 255
    32ac:	9f 4f       	sbci	r25, 0xFF	; 255
    32ae:	16 c0       	rjmp	.+44     	; 0x32dc <__floatsisf+0x6c>
    32b0:	88 23       	and	r24, r24
    32b2:	11 f0       	breq	.+4      	; 0x32b8 <__floatsisf+0x48>
    32b4:	96 e9       	ldi	r25, 0x96	; 150
    32b6:	11 c0       	rjmp	.+34     	; 0x32da <__floatsisf+0x6a>
    32b8:	77 23       	and	r23, r23
    32ba:	21 f0       	breq	.+8      	; 0x32c4 <__floatsisf+0x54>
    32bc:	9e e8       	ldi	r25, 0x8E	; 142
    32be:	87 2f       	mov	r24, r23
    32c0:	76 2f       	mov	r23, r22
    32c2:	05 c0       	rjmp	.+10     	; 0x32ce <__floatsisf+0x5e>
    32c4:	66 23       	and	r22, r22
    32c6:	71 f0       	breq	.+28     	; 0x32e4 <__floatsisf+0x74>
    32c8:	96 e8       	ldi	r25, 0x86	; 134
    32ca:	86 2f       	mov	r24, r22
    32cc:	70 e0       	ldi	r23, 0x00	; 0
    32ce:	60 e0       	ldi	r22, 0x00	; 0
    32d0:	2a f0       	brmi	.+10     	; 0x32dc <__floatsisf+0x6c>
    32d2:	9a 95       	dec	r25
    32d4:	66 0f       	add	r22, r22
    32d6:	77 1f       	adc	r23, r23
    32d8:	88 1f       	adc	r24, r24
    32da:	da f7       	brpl	.-10     	; 0x32d2 <__floatsisf+0x62>
    32dc:	88 0f       	add	r24, r24
    32de:	96 95       	lsr	r25
    32e0:	87 95       	ror	r24
    32e2:	97 f9       	bld	r25, 7
    32e4:	08 95       	ret

000032e6 <__fp_cmp>:
    32e6:	99 0f       	add	r25, r25
    32e8:	00 08       	sbc	r0, r0
    32ea:	55 0f       	add	r21, r21
    32ec:	aa 0b       	sbc	r26, r26
    32ee:	e0 e8       	ldi	r30, 0x80	; 128
    32f0:	fe ef       	ldi	r31, 0xFE	; 254
    32f2:	16 16       	cp	r1, r22
    32f4:	17 06       	cpc	r1, r23
    32f6:	e8 07       	cpc	r30, r24
    32f8:	f9 07       	cpc	r31, r25
    32fa:	c0 f0       	brcs	.+48     	; 0x332c <__fp_cmp+0x46>
    32fc:	12 16       	cp	r1, r18
    32fe:	13 06       	cpc	r1, r19
    3300:	e4 07       	cpc	r30, r20
    3302:	f5 07       	cpc	r31, r21
    3304:	98 f0       	brcs	.+38     	; 0x332c <__fp_cmp+0x46>
    3306:	62 1b       	sub	r22, r18
    3308:	73 0b       	sbc	r23, r19
    330a:	84 0b       	sbc	r24, r20
    330c:	95 0b       	sbc	r25, r21
    330e:	39 f4       	brne	.+14     	; 0x331e <__fp_cmp+0x38>
    3310:	0a 26       	eor	r0, r26
    3312:	61 f0       	breq	.+24     	; 0x332c <__fp_cmp+0x46>
    3314:	23 2b       	or	r18, r19
    3316:	24 2b       	or	r18, r20
    3318:	25 2b       	or	r18, r21
    331a:	21 f4       	brne	.+8      	; 0x3324 <__fp_cmp+0x3e>
    331c:	08 95       	ret
    331e:	0a 26       	eor	r0, r26
    3320:	09 f4       	brne	.+2      	; 0x3324 <__fp_cmp+0x3e>
    3322:	a1 40       	sbci	r26, 0x01	; 1
    3324:	a6 95       	lsr	r26
    3326:	8f ef       	ldi	r24, 0xFF	; 255
    3328:	81 1d       	adc	r24, r1
    332a:	81 1d       	adc	r24, r1
    332c:	08 95       	ret

0000332e <__fp_inf>:
    332e:	97 f9       	bld	r25, 7
    3330:	9f 67       	ori	r25, 0x7F	; 127
    3332:	80 e8       	ldi	r24, 0x80	; 128
    3334:	70 e0       	ldi	r23, 0x00	; 0
    3336:	60 e0       	ldi	r22, 0x00	; 0
    3338:	08 95       	ret

0000333a <__fp_nan>:
    333a:	9f ef       	ldi	r25, 0xFF	; 255
    333c:	80 ec       	ldi	r24, 0xC0	; 192
    333e:	08 95       	ret

00003340 <__fp_pscA>:
    3340:	00 24       	eor	r0, r0
    3342:	0a 94       	dec	r0
    3344:	16 16       	cp	r1, r22
    3346:	17 06       	cpc	r1, r23
    3348:	18 06       	cpc	r1, r24
    334a:	09 06       	cpc	r0, r25
    334c:	08 95       	ret

0000334e <__fp_pscB>:
    334e:	00 24       	eor	r0, r0
    3350:	0a 94       	dec	r0
    3352:	12 16       	cp	r1, r18
    3354:	13 06       	cpc	r1, r19
    3356:	14 06       	cpc	r1, r20
    3358:	05 06       	cpc	r0, r21
    335a:	08 95       	ret

0000335c <__fp_round>:
    335c:	09 2e       	mov	r0, r25
    335e:	03 94       	inc	r0
    3360:	00 0c       	add	r0, r0
    3362:	11 f4       	brne	.+4      	; 0x3368 <__fp_round+0xc>
    3364:	88 23       	and	r24, r24
    3366:	52 f0       	brmi	.+20     	; 0x337c <__fp_round+0x20>
    3368:	bb 0f       	add	r27, r27
    336a:	40 f4       	brcc	.+16     	; 0x337c <__fp_round+0x20>
    336c:	bf 2b       	or	r27, r31
    336e:	11 f4       	brne	.+4      	; 0x3374 <__fp_round+0x18>
    3370:	60 ff       	sbrs	r22, 0
    3372:	04 c0       	rjmp	.+8      	; 0x337c <__fp_round+0x20>
    3374:	6f 5f       	subi	r22, 0xFF	; 255
    3376:	7f 4f       	sbci	r23, 0xFF	; 255
    3378:	8f 4f       	sbci	r24, 0xFF	; 255
    337a:	9f 4f       	sbci	r25, 0xFF	; 255
    337c:	08 95       	ret

0000337e <__fp_split3>:
    337e:	57 fd       	sbrc	r21, 7
    3380:	90 58       	subi	r25, 0x80	; 128
    3382:	44 0f       	add	r20, r20
    3384:	55 1f       	adc	r21, r21
    3386:	59 f0       	breq	.+22     	; 0x339e <__fp_splitA+0x10>
    3388:	5f 3f       	cpi	r21, 0xFF	; 255
    338a:	71 f0       	breq	.+28     	; 0x33a8 <__fp_splitA+0x1a>
    338c:	47 95       	ror	r20

0000338e <__fp_splitA>:
    338e:	88 0f       	add	r24, r24
    3390:	97 fb       	bst	r25, 7
    3392:	99 1f       	adc	r25, r25
    3394:	61 f0       	breq	.+24     	; 0x33ae <__fp_splitA+0x20>
    3396:	9f 3f       	cpi	r25, 0xFF	; 255
    3398:	79 f0       	breq	.+30     	; 0x33b8 <__fp_splitA+0x2a>
    339a:	87 95       	ror	r24
    339c:	08 95       	ret
    339e:	12 16       	cp	r1, r18
    33a0:	13 06       	cpc	r1, r19
    33a2:	14 06       	cpc	r1, r20
    33a4:	55 1f       	adc	r21, r21
    33a6:	f2 cf       	rjmp	.-28     	; 0x338c <__fp_split3+0xe>
    33a8:	46 95       	lsr	r20
    33aa:	f1 df       	rcall	.-30     	; 0x338e <__fp_splitA>
    33ac:	08 c0       	rjmp	.+16     	; 0x33be <__fp_splitA+0x30>
    33ae:	16 16       	cp	r1, r22
    33b0:	17 06       	cpc	r1, r23
    33b2:	18 06       	cpc	r1, r24
    33b4:	99 1f       	adc	r25, r25
    33b6:	f1 cf       	rjmp	.-30     	; 0x339a <__fp_splitA+0xc>
    33b8:	86 95       	lsr	r24
    33ba:	71 05       	cpc	r23, r1
    33bc:	61 05       	cpc	r22, r1
    33be:	08 94       	sec
    33c0:	08 95       	ret

000033c2 <__fp_zero>:
    33c2:	e8 94       	clt

000033c4 <__fp_szero>:
    33c4:	bb 27       	eor	r27, r27
    33c6:	66 27       	eor	r22, r22
    33c8:	77 27       	eor	r23, r23
    33ca:	cb 01       	movw	r24, r22
    33cc:	97 f9       	bld	r25, 7
    33ce:	08 95       	ret

000033d0 <__gesf2>:
    33d0:	0e 94 73 19 	call	0x32e6	; 0x32e6 <__fp_cmp>
    33d4:	08 f4       	brcc	.+2      	; 0x33d8 <__gesf2+0x8>
    33d6:	8f ef       	ldi	r24, 0xFF	; 255
    33d8:	08 95       	ret

000033da <__mulsf3>:
    33da:	0e 94 00 1a 	call	0x3400	; 0x3400 <__mulsf3x>
    33de:	0c 94 ae 19 	jmp	0x335c	; 0x335c <__fp_round>
    33e2:	0e 94 a0 19 	call	0x3340	; 0x3340 <__fp_pscA>
    33e6:	38 f0       	brcs	.+14     	; 0x33f6 <__mulsf3+0x1c>
    33e8:	0e 94 a7 19 	call	0x334e	; 0x334e <__fp_pscB>
    33ec:	20 f0       	brcs	.+8      	; 0x33f6 <__mulsf3+0x1c>
    33ee:	95 23       	and	r25, r21
    33f0:	11 f0       	breq	.+4      	; 0x33f6 <__mulsf3+0x1c>
    33f2:	0c 94 97 19 	jmp	0x332e	; 0x332e <__fp_inf>
    33f6:	0c 94 9d 19 	jmp	0x333a	; 0x333a <__fp_nan>
    33fa:	11 24       	eor	r1, r1
    33fc:	0c 94 e2 19 	jmp	0x33c4	; 0x33c4 <__fp_szero>

00003400 <__mulsf3x>:
    3400:	0e 94 bf 19 	call	0x337e	; 0x337e <__fp_split3>
    3404:	70 f3       	brcs	.-36     	; 0x33e2 <__mulsf3+0x8>

00003406 <__mulsf3_pse>:
    3406:	95 9f       	mul	r25, r21
    3408:	c1 f3       	breq	.-16     	; 0x33fa <__mulsf3+0x20>
    340a:	95 0f       	add	r25, r21
    340c:	50 e0       	ldi	r21, 0x00	; 0
    340e:	55 1f       	adc	r21, r21
    3410:	62 9f       	mul	r22, r18
    3412:	f0 01       	movw	r30, r0
    3414:	72 9f       	mul	r23, r18
    3416:	bb 27       	eor	r27, r27
    3418:	f0 0d       	add	r31, r0
    341a:	b1 1d       	adc	r27, r1
    341c:	63 9f       	mul	r22, r19
    341e:	aa 27       	eor	r26, r26
    3420:	f0 0d       	add	r31, r0
    3422:	b1 1d       	adc	r27, r1
    3424:	aa 1f       	adc	r26, r26
    3426:	64 9f       	mul	r22, r20
    3428:	66 27       	eor	r22, r22
    342a:	b0 0d       	add	r27, r0
    342c:	a1 1d       	adc	r26, r1
    342e:	66 1f       	adc	r22, r22
    3430:	82 9f       	mul	r24, r18
    3432:	22 27       	eor	r18, r18
    3434:	b0 0d       	add	r27, r0
    3436:	a1 1d       	adc	r26, r1
    3438:	62 1f       	adc	r22, r18
    343a:	73 9f       	mul	r23, r19
    343c:	b0 0d       	add	r27, r0
    343e:	a1 1d       	adc	r26, r1
    3440:	62 1f       	adc	r22, r18
    3442:	83 9f       	mul	r24, r19
    3444:	a0 0d       	add	r26, r0
    3446:	61 1d       	adc	r22, r1
    3448:	22 1f       	adc	r18, r18
    344a:	74 9f       	mul	r23, r20
    344c:	33 27       	eor	r19, r19
    344e:	a0 0d       	add	r26, r0
    3450:	61 1d       	adc	r22, r1
    3452:	23 1f       	adc	r18, r19
    3454:	84 9f       	mul	r24, r20
    3456:	60 0d       	add	r22, r0
    3458:	21 1d       	adc	r18, r1
    345a:	82 2f       	mov	r24, r18
    345c:	76 2f       	mov	r23, r22
    345e:	6a 2f       	mov	r22, r26
    3460:	11 24       	eor	r1, r1
    3462:	9f 57       	subi	r25, 0x7F	; 127
    3464:	50 40       	sbci	r21, 0x00	; 0
    3466:	9a f0       	brmi	.+38     	; 0x348e <__mulsf3_pse+0x88>
    3468:	f1 f0       	breq	.+60     	; 0x34a6 <__mulsf3_pse+0xa0>
    346a:	88 23       	and	r24, r24
    346c:	4a f0       	brmi	.+18     	; 0x3480 <__mulsf3_pse+0x7a>
    346e:	ee 0f       	add	r30, r30
    3470:	ff 1f       	adc	r31, r31
    3472:	bb 1f       	adc	r27, r27
    3474:	66 1f       	adc	r22, r22
    3476:	77 1f       	adc	r23, r23
    3478:	88 1f       	adc	r24, r24
    347a:	91 50       	subi	r25, 0x01	; 1
    347c:	50 40       	sbci	r21, 0x00	; 0
    347e:	a9 f7       	brne	.-22     	; 0x346a <__mulsf3_pse+0x64>
    3480:	9e 3f       	cpi	r25, 0xFE	; 254
    3482:	51 05       	cpc	r21, r1
    3484:	80 f0       	brcs	.+32     	; 0x34a6 <__mulsf3_pse+0xa0>
    3486:	0c 94 97 19 	jmp	0x332e	; 0x332e <__fp_inf>
    348a:	0c 94 e2 19 	jmp	0x33c4	; 0x33c4 <__fp_szero>
    348e:	5f 3f       	cpi	r21, 0xFF	; 255
    3490:	e4 f3       	brlt	.-8      	; 0x348a <__mulsf3_pse+0x84>
    3492:	98 3e       	cpi	r25, 0xE8	; 232
    3494:	d4 f3       	brlt	.-12     	; 0x348a <__mulsf3_pse+0x84>
    3496:	86 95       	lsr	r24
    3498:	77 95       	ror	r23
    349a:	67 95       	ror	r22
    349c:	b7 95       	ror	r27
    349e:	f7 95       	ror	r31
    34a0:	e7 95       	ror	r30
    34a2:	9f 5f       	subi	r25, 0xFF	; 255
    34a4:	c1 f7       	brne	.-16     	; 0x3496 <__mulsf3_pse+0x90>
    34a6:	fe 2b       	or	r31, r30
    34a8:	88 0f       	add	r24, r24
    34aa:	91 1d       	adc	r25, r1
    34ac:	96 95       	lsr	r25
    34ae:	87 95       	ror	r24
    34b0:	97 f9       	bld	r25, 7
    34b2:	08 95       	ret

000034b4 <__udivmodsi4>:
    34b4:	a1 e2       	ldi	r26, 0x21	; 33
    34b6:	1a 2e       	mov	r1, r26
    34b8:	aa 1b       	sub	r26, r26
    34ba:	bb 1b       	sub	r27, r27
    34bc:	fd 01       	movw	r30, r26
    34be:	0d c0       	rjmp	.+26     	; 0x34da <__udivmodsi4_ep>

000034c0 <__udivmodsi4_loop>:
    34c0:	aa 1f       	adc	r26, r26
    34c2:	bb 1f       	adc	r27, r27
    34c4:	ee 1f       	adc	r30, r30
    34c6:	ff 1f       	adc	r31, r31
    34c8:	a2 17       	cp	r26, r18
    34ca:	b3 07       	cpc	r27, r19
    34cc:	e4 07       	cpc	r30, r20
    34ce:	f5 07       	cpc	r31, r21
    34d0:	20 f0       	brcs	.+8      	; 0x34da <__udivmodsi4_ep>
    34d2:	a2 1b       	sub	r26, r18
    34d4:	b3 0b       	sbc	r27, r19
    34d6:	e4 0b       	sbc	r30, r20
    34d8:	f5 0b       	sbc	r31, r21

000034da <__udivmodsi4_ep>:
    34da:	66 1f       	adc	r22, r22
    34dc:	77 1f       	adc	r23, r23
    34de:	88 1f       	adc	r24, r24
    34e0:	99 1f       	adc	r25, r25
    34e2:	1a 94       	dec	r1
    34e4:	69 f7       	brne	.-38     	; 0x34c0 <__udivmodsi4_loop>
    34e6:	60 95       	com	r22
    34e8:	70 95       	com	r23
    34ea:	80 95       	com	r24
    34ec:	90 95       	com	r25
    34ee:	9b 01       	movw	r18, r22
    34f0:	ac 01       	movw	r20, r24
    34f2:	bd 01       	movw	r22, r26
    34f4:	cf 01       	movw	r24, r30
    34f6:	08 95       	ret

000034f8 <__divmodsi4>:
    34f8:	05 2e       	mov	r0, r21
    34fa:	97 fb       	bst	r25, 7
    34fc:	1e f4       	brtc	.+6      	; 0x3504 <__divmodsi4+0xc>
    34fe:	00 94       	com	r0
    3500:	0e 94 93 1a 	call	0x3526	; 0x3526 <__negsi2>
    3504:	57 fd       	sbrc	r21, 7
    3506:	07 d0       	rcall	.+14     	; 0x3516 <__divmodsi4_neg2>
    3508:	0e 94 5a 1a 	call	0x34b4	; 0x34b4 <__udivmodsi4>
    350c:	07 fc       	sbrc	r0, 7
    350e:	03 d0       	rcall	.+6      	; 0x3516 <__divmodsi4_neg2>
    3510:	4e f4       	brtc	.+18     	; 0x3524 <__divmodsi4_exit>
    3512:	0c 94 93 1a 	jmp	0x3526	; 0x3526 <__negsi2>

00003516 <__divmodsi4_neg2>:
    3516:	50 95       	com	r21
    3518:	40 95       	com	r20
    351a:	30 95       	com	r19
    351c:	21 95       	neg	r18
    351e:	3f 4f       	sbci	r19, 0xFF	; 255
    3520:	4f 4f       	sbci	r20, 0xFF	; 255
    3522:	5f 4f       	sbci	r21, 0xFF	; 255

00003524 <__divmodsi4_exit>:
    3524:	08 95       	ret

00003526 <__negsi2>:
    3526:	90 95       	com	r25
    3528:	80 95       	com	r24
    352a:	70 95       	com	r23
    352c:	61 95       	neg	r22
    352e:	7f 4f       	sbci	r23, 0xFF	; 255
    3530:	8f 4f       	sbci	r24, 0xFF	; 255
    3532:	9f 4f       	sbci	r25, 0xFF	; 255
    3534:	08 95       	ret

00003536 <__tablejump2__>:
    3536:	ee 0f       	add	r30, r30
    3538:	ff 1f       	adc	r31, r31
    353a:	05 90       	lpm	r0, Z+
    353c:	f4 91       	lpm	r31, Z
    353e:	e0 2d       	mov	r30, r0
    3540:	09 94       	ijmp

00003542 <__umulhisi3>:
    3542:	a2 9f       	mul	r26, r18
    3544:	b0 01       	movw	r22, r0
    3546:	b3 9f       	mul	r27, r19
    3548:	c0 01       	movw	r24, r0
    354a:	a3 9f       	mul	r26, r19
    354c:	70 0d       	add	r23, r0
    354e:	81 1d       	adc	r24, r1
    3550:	11 24       	eor	r1, r1
    3552:	91 1d       	adc	r25, r1
    3554:	b2 9f       	mul	r27, r18
    3556:	70 0d       	add	r23, r0
    3558:	81 1d       	adc	r24, r1
    355a:	11 24       	eor	r1, r1
    355c:	91 1d       	adc	r25, r1
    355e:	08 95       	ret

00003560 <__ashrdi3>:
    3560:	97 fb       	bst	r25, 7
    3562:	10 f8       	bld	r1, 0

00003564 <__lshrdi3>:
    3564:	16 94       	lsr	r1
    3566:	00 08       	sbc	r0, r0
    3568:	0f 93       	push	r16
    356a:	08 30       	cpi	r16, 0x08	; 8
    356c:	98 f0       	brcs	.+38     	; 0x3594 <__lshrdi3+0x30>
    356e:	08 50       	subi	r16, 0x08	; 8
    3570:	23 2f       	mov	r18, r19
    3572:	34 2f       	mov	r19, r20
    3574:	45 2f       	mov	r20, r21
    3576:	56 2f       	mov	r21, r22
    3578:	67 2f       	mov	r22, r23
    357a:	78 2f       	mov	r23, r24
    357c:	89 2f       	mov	r24, r25
    357e:	90 2d       	mov	r25, r0
    3580:	f4 cf       	rjmp	.-24     	; 0x356a <__lshrdi3+0x6>
    3582:	05 94       	asr	r0
    3584:	97 95       	ror	r25
    3586:	87 95       	ror	r24
    3588:	77 95       	ror	r23
    358a:	67 95       	ror	r22
    358c:	57 95       	ror	r21
    358e:	47 95       	ror	r20
    3590:	37 95       	ror	r19
    3592:	27 95       	ror	r18
    3594:	0a 95       	dec	r16
    3596:	aa f7       	brpl	.-22     	; 0x3582 <__lshrdi3+0x1e>
    3598:	0f 91       	pop	r16
    359a:	08 95       	ret

0000359c <__cmpdi2_s8>:
    359c:	00 24       	eor	r0, r0
    359e:	a7 fd       	sbrc	r26, 7
    35a0:	00 94       	com	r0
    35a2:	2a 17       	cp	r18, r26
    35a4:	30 05       	cpc	r19, r0
    35a6:	40 05       	cpc	r20, r0
    35a8:	50 05       	cpc	r21, r0
    35aa:	60 05       	cpc	r22, r0
    35ac:	70 05       	cpc	r23, r0
    35ae:	80 05       	cpc	r24, r0
    35b0:	90 05       	cpc	r25, r0
    35b2:	08 95       	ret

000035b4 <fgetc>:
    35b4:	cf 93       	push	r28
    35b6:	df 93       	push	r29
    35b8:	ec 01       	movw	r28, r24
    35ba:	2b 81       	ldd	r18, Y+3	; 0x03
    35bc:	20 ff       	sbrs	r18, 0
    35be:	33 c0       	rjmp	.+102    	; 0x3626 <fgetc+0x72>
    35c0:	26 ff       	sbrs	r18, 6
    35c2:	0a c0       	rjmp	.+20     	; 0x35d8 <fgetc+0x24>
    35c4:	2f 7b       	andi	r18, 0xBF	; 191
    35c6:	2b 83       	std	Y+3, r18	; 0x03
    35c8:	8e 81       	ldd	r24, Y+6	; 0x06
    35ca:	9f 81       	ldd	r25, Y+7	; 0x07
    35cc:	01 96       	adiw	r24, 0x01	; 1
    35ce:	9f 83       	std	Y+7, r25	; 0x07
    35d0:	8e 83       	std	Y+6, r24	; 0x06
    35d2:	8a 81       	ldd	r24, Y+2	; 0x02
    35d4:	90 e0       	ldi	r25, 0x00	; 0
    35d6:	29 c0       	rjmp	.+82     	; 0x362a <fgetc+0x76>
    35d8:	22 ff       	sbrs	r18, 2
    35da:	0f c0       	rjmp	.+30     	; 0x35fa <fgetc+0x46>
    35dc:	e8 81       	ld	r30, Y
    35de:	f9 81       	ldd	r31, Y+1	; 0x01
    35e0:	80 81       	ld	r24, Z
    35e2:	08 2e       	mov	r0, r24
    35e4:	00 0c       	add	r0, r0
    35e6:	99 0b       	sbc	r25, r25
    35e8:	00 97       	sbiw	r24, 0x00	; 0
    35ea:	19 f4       	brne	.+6      	; 0x35f2 <fgetc+0x3e>
    35ec:	20 62       	ori	r18, 0x20	; 32
    35ee:	2b 83       	std	Y+3, r18	; 0x03
    35f0:	1a c0       	rjmp	.+52     	; 0x3626 <fgetc+0x72>
    35f2:	31 96       	adiw	r30, 0x01	; 1
    35f4:	f9 83       	std	Y+1, r31	; 0x01
    35f6:	e8 83       	st	Y, r30
    35f8:	0e c0       	rjmp	.+28     	; 0x3616 <fgetc+0x62>
    35fa:	ea 85       	ldd	r30, Y+10	; 0x0a
    35fc:	fb 85       	ldd	r31, Y+11	; 0x0b
    35fe:	09 95       	icall
    3600:	97 ff       	sbrs	r25, 7
    3602:	09 c0       	rjmp	.+18     	; 0x3616 <fgetc+0x62>
    3604:	2b 81       	ldd	r18, Y+3	; 0x03
    3606:	01 96       	adiw	r24, 0x01	; 1
    3608:	11 f0       	breq	.+4      	; 0x360e <fgetc+0x5a>
    360a:	80 e2       	ldi	r24, 0x20	; 32
    360c:	01 c0       	rjmp	.+2      	; 0x3610 <fgetc+0x5c>
    360e:	80 e1       	ldi	r24, 0x10	; 16
    3610:	82 2b       	or	r24, r18
    3612:	8b 83       	std	Y+3, r24	; 0x03
    3614:	08 c0       	rjmp	.+16     	; 0x3626 <fgetc+0x72>
    3616:	2e 81       	ldd	r18, Y+6	; 0x06
    3618:	3f 81       	ldd	r19, Y+7	; 0x07
    361a:	2f 5f       	subi	r18, 0xFF	; 255
    361c:	3f 4f       	sbci	r19, 0xFF	; 255
    361e:	3f 83       	std	Y+7, r19	; 0x07
    3620:	2e 83       	std	Y+6, r18	; 0x06
    3622:	99 27       	eor	r25, r25
    3624:	02 c0       	rjmp	.+4      	; 0x362a <fgetc+0x76>
    3626:	8f ef       	ldi	r24, 0xFF	; 255
    3628:	9f ef       	ldi	r25, 0xFF	; 255
    362a:	df 91       	pop	r29
    362c:	cf 91       	pop	r28
    362e:	08 95       	ret

00003630 <printf_P>:
    3630:	a0 e0       	ldi	r26, 0x00	; 0
    3632:	b0 e0       	ldi	r27, 0x00	; 0
    3634:	ee e1       	ldi	r30, 0x1E	; 30
    3636:	fb e1       	ldi	r31, 0x1B	; 27
    3638:	0c 94 28 1e 	jmp	0x3c50	; 0x3c50 <__prologue_saves__+0x1c>
    363c:	ae 01       	movw	r20, r28
    363e:	49 5f       	subi	r20, 0xF9	; 249
    3640:	5f 4f       	sbci	r21, 0xFF	; 255
    3642:	da 01       	movw	r26, r20
    3644:	6d 91       	ld	r22, X+
    3646:	7d 91       	ld	r23, X+
    3648:	ad 01       	movw	r20, r26
    364a:	0f ef       	ldi	r16, 0xFF	; 255
    364c:	13 e0       	ldi	r17, 0x03	; 3
    364e:	f8 01       	movw	r30, r16
    3650:	82 81       	ldd	r24, Z+2	; 0x02
    3652:	93 81       	ldd	r25, Z+3	; 0x03
    3654:	dc 01       	movw	r26, r24
    3656:	13 96       	adiw	r26, 0x03	; 3
    3658:	2c 91       	ld	r18, X
    365a:	13 97       	sbiw	r26, 0x03	; 3
    365c:	28 60       	ori	r18, 0x08	; 8
    365e:	13 96       	adiw	r26, 0x03	; 3
    3660:	2c 93       	st	X, r18
    3662:	0e 94 45 1b 	call	0x368a	; 0x368a <vfprintf>
    3666:	d8 01       	movw	r26, r16
    3668:	12 96       	adiw	r26, 0x02	; 2
    366a:	ed 91       	ld	r30, X+
    366c:	fc 91       	ld	r31, X
    366e:	13 97       	sbiw	r26, 0x03	; 3
    3670:	23 81       	ldd	r18, Z+3	; 0x03
    3672:	27 7f       	andi	r18, 0xF7	; 247
    3674:	23 83       	std	Z+3, r18	; 0x03
    3676:	e4 e0       	ldi	r30, 0x04	; 4
    3678:	0c 94 44 1e 	jmp	0x3c88	; 0x3c88 <__epilogue_restores__+0x1c>

0000367c <putchar>:
    367c:	60 91 01 04 	lds	r22, 0x0401	; 0x800401 <__iob+0x2>
    3680:	70 91 02 04 	lds	r23, 0x0402	; 0x800402 <__iob+0x3>
    3684:	0e 94 3c 1d 	call	0x3a78	; 0x3a78 <fputc>
    3688:	08 95       	ret

0000368a <vfprintf>:
    368a:	ab e0       	ldi	r26, 0x0B	; 11
    368c:	b0 e0       	ldi	r27, 0x00	; 0
    368e:	eb e4       	ldi	r30, 0x4B	; 75
    3690:	fb e1       	ldi	r31, 0x1B	; 27
    3692:	0c 94 1a 1e 	jmp	0x3c34	; 0x3c34 <__prologue_saves__>
    3696:	6c 01       	movw	r12, r24
    3698:	7b 01       	movw	r14, r22
    369a:	8a 01       	movw	r16, r20
    369c:	fc 01       	movw	r30, r24
    369e:	17 82       	std	Z+7, r1	; 0x07
    36a0:	16 82       	std	Z+6, r1	; 0x06
    36a2:	83 81       	ldd	r24, Z+3	; 0x03
    36a4:	81 ff       	sbrs	r24, 1
    36a6:	cc c1       	rjmp	.+920    	; 0x3a40 <vfprintf+0x3b6>
    36a8:	ce 01       	movw	r24, r28
    36aa:	01 96       	adiw	r24, 0x01	; 1
    36ac:	3c 01       	movw	r6, r24
    36ae:	f6 01       	movw	r30, r12
    36b0:	93 81       	ldd	r25, Z+3	; 0x03
    36b2:	f7 01       	movw	r30, r14
    36b4:	93 fd       	sbrc	r25, 3
    36b6:	85 91       	lpm	r24, Z+
    36b8:	93 ff       	sbrs	r25, 3
    36ba:	81 91       	ld	r24, Z+
    36bc:	7f 01       	movw	r14, r30
    36be:	88 23       	and	r24, r24
    36c0:	09 f4       	brne	.+2      	; 0x36c4 <vfprintf+0x3a>
    36c2:	ba c1       	rjmp	.+884    	; 0x3a38 <vfprintf+0x3ae>
    36c4:	85 32       	cpi	r24, 0x25	; 37
    36c6:	39 f4       	brne	.+14     	; 0x36d6 <vfprintf+0x4c>
    36c8:	93 fd       	sbrc	r25, 3
    36ca:	85 91       	lpm	r24, Z+
    36cc:	93 ff       	sbrs	r25, 3
    36ce:	81 91       	ld	r24, Z+
    36d0:	7f 01       	movw	r14, r30
    36d2:	85 32       	cpi	r24, 0x25	; 37
    36d4:	29 f4       	brne	.+10     	; 0x36e0 <vfprintf+0x56>
    36d6:	b6 01       	movw	r22, r12
    36d8:	90 e0       	ldi	r25, 0x00	; 0
    36da:	0e 94 3c 1d 	call	0x3a78	; 0x3a78 <fputc>
    36de:	e7 cf       	rjmp	.-50     	; 0x36ae <vfprintf+0x24>
    36e0:	91 2c       	mov	r9, r1
    36e2:	21 2c       	mov	r2, r1
    36e4:	31 2c       	mov	r3, r1
    36e6:	ff e1       	ldi	r31, 0x1F	; 31
    36e8:	f3 15       	cp	r31, r3
    36ea:	d8 f0       	brcs	.+54     	; 0x3722 <vfprintf+0x98>
    36ec:	8b 32       	cpi	r24, 0x2B	; 43
    36ee:	79 f0       	breq	.+30     	; 0x370e <vfprintf+0x84>
    36f0:	38 f4       	brcc	.+14     	; 0x3700 <vfprintf+0x76>
    36f2:	80 32       	cpi	r24, 0x20	; 32
    36f4:	79 f0       	breq	.+30     	; 0x3714 <vfprintf+0x8a>
    36f6:	83 32       	cpi	r24, 0x23	; 35
    36f8:	a1 f4       	brne	.+40     	; 0x3722 <vfprintf+0x98>
    36fa:	23 2d       	mov	r18, r3
    36fc:	20 61       	ori	r18, 0x10	; 16
    36fe:	1d c0       	rjmp	.+58     	; 0x373a <vfprintf+0xb0>
    3700:	8d 32       	cpi	r24, 0x2D	; 45
    3702:	61 f0       	breq	.+24     	; 0x371c <vfprintf+0x92>
    3704:	80 33       	cpi	r24, 0x30	; 48
    3706:	69 f4       	brne	.+26     	; 0x3722 <vfprintf+0x98>
    3708:	23 2d       	mov	r18, r3
    370a:	21 60       	ori	r18, 0x01	; 1
    370c:	16 c0       	rjmp	.+44     	; 0x373a <vfprintf+0xb0>
    370e:	83 2d       	mov	r24, r3
    3710:	82 60       	ori	r24, 0x02	; 2
    3712:	38 2e       	mov	r3, r24
    3714:	e3 2d       	mov	r30, r3
    3716:	e4 60       	ori	r30, 0x04	; 4
    3718:	3e 2e       	mov	r3, r30
    371a:	2a c0       	rjmp	.+84     	; 0x3770 <vfprintf+0xe6>
    371c:	f3 2d       	mov	r31, r3
    371e:	f8 60       	ori	r31, 0x08	; 8
    3720:	1d c0       	rjmp	.+58     	; 0x375c <vfprintf+0xd2>
    3722:	37 fc       	sbrc	r3, 7
    3724:	2d c0       	rjmp	.+90     	; 0x3780 <vfprintf+0xf6>
    3726:	20 ed       	ldi	r18, 0xD0	; 208
    3728:	28 0f       	add	r18, r24
    372a:	2a 30       	cpi	r18, 0x0A	; 10
    372c:	40 f0       	brcs	.+16     	; 0x373e <vfprintf+0xb4>
    372e:	8e 32       	cpi	r24, 0x2E	; 46
    3730:	b9 f4       	brne	.+46     	; 0x3760 <vfprintf+0xd6>
    3732:	36 fc       	sbrc	r3, 6
    3734:	81 c1       	rjmp	.+770    	; 0x3a38 <vfprintf+0x3ae>
    3736:	23 2d       	mov	r18, r3
    3738:	20 64       	ori	r18, 0x40	; 64
    373a:	32 2e       	mov	r3, r18
    373c:	19 c0       	rjmp	.+50     	; 0x3770 <vfprintf+0xe6>
    373e:	36 fe       	sbrs	r3, 6
    3740:	06 c0       	rjmp	.+12     	; 0x374e <vfprintf+0xc4>
    3742:	8a e0       	ldi	r24, 0x0A	; 10
    3744:	98 9e       	mul	r9, r24
    3746:	20 0d       	add	r18, r0
    3748:	11 24       	eor	r1, r1
    374a:	92 2e       	mov	r9, r18
    374c:	11 c0       	rjmp	.+34     	; 0x3770 <vfprintf+0xe6>
    374e:	ea e0       	ldi	r30, 0x0A	; 10
    3750:	2e 9e       	mul	r2, r30
    3752:	20 0d       	add	r18, r0
    3754:	11 24       	eor	r1, r1
    3756:	22 2e       	mov	r2, r18
    3758:	f3 2d       	mov	r31, r3
    375a:	f0 62       	ori	r31, 0x20	; 32
    375c:	3f 2e       	mov	r3, r31
    375e:	08 c0       	rjmp	.+16     	; 0x3770 <vfprintf+0xe6>
    3760:	8c 36       	cpi	r24, 0x6C	; 108
    3762:	21 f4       	brne	.+8      	; 0x376c <vfprintf+0xe2>
    3764:	83 2d       	mov	r24, r3
    3766:	80 68       	ori	r24, 0x80	; 128
    3768:	38 2e       	mov	r3, r24
    376a:	02 c0       	rjmp	.+4      	; 0x3770 <vfprintf+0xe6>
    376c:	88 36       	cpi	r24, 0x68	; 104
    376e:	41 f4       	brne	.+16     	; 0x3780 <vfprintf+0xf6>
    3770:	f7 01       	movw	r30, r14
    3772:	93 fd       	sbrc	r25, 3
    3774:	85 91       	lpm	r24, Z+
    3776:	93 ff       	sbrs	r25, 3
    3778:	81 91       	ld	r24, Z+
    377a:	7f 01       	movw	r14, r30
    377c:	81 11       	cpse	r24, r1
    377e:	b3 cf       	rjmp	.-154    	; 0x36e6 <vfprintf+0x5c>
    3780:	98 2f       	mov	r25, r24
    3782:	9f 7d       	andi	r25, 0xDF	; 223
    3784:	95 54       	subi	r25, 0x45	; 69
    3786:	93 30       	cpi	r25, 0x03	; 3
    3788:	28 f4       	brcc	.+10     	; 0x3794 <vfprintf+0x10a>
    378a:	0c 5f       	subi	r16, 0xFC	; 252
    378c:	1f 4f       	sbci	r17, 0xFF	; 255
    378e:	9f e3       	ldi	r25, 0x3F	; 63
    3790:	99 83       	std	Y+1, r25	; 0x01
    3792:	0d c0       	rjmp	.+26     	; 0x37ae <vfprintf+0x124>
    3794:	83 36       	cpi	r24, 0x63	; 99
    3796:	31 f0       	breq	.+12     	; 0x37a4 <vfprintf+0x11a>
    3798:	83 37       	cpi	r24, 0x73	; 115
    379a:	71 f0       	breq	.+28     	; 0x37b8 <vfprintf+0x12e>
    379c:	83 35       	cpi	r24, 0x53	; 83
    379e:	09 f0       	breq	.+2      	; 0x37a2 <vfprintf+0x118>
    37a0:	59 c0       	rjmp	.+178    	; 0x3854 <vfprintf+0x1ca>
    37a2:	21 c0       	rjmp	.+66     	; 0x37e6 <vfprintf+0x15c>
    37a4:	f8 01       	movw	r30, r16
    37a6:	80 81       	ld	r24, Z
    37a8:	89 83       	std	Y+1, r24	; 0x01
    37aa:	0e 5f       	subi	r16, 0xFE	; 254
    37ac:	1f 4f       	sbci	r17, 0xFF	; 255
    37ae:	88 24       	eor	r8, r8
    37b0:	83 94       	inc	r8
    37b2:	91 2c       	mov	r9, r1
    37b4:	53 01       	movw	r10, r6
    37b6:	13 c0       	rjmp	.+38     	; 0x37de <vfprintf+0x154>
    37b8:	28 01       	movw	r4, r16
    37ba:	f2 e0       	ldi	r31, 0x02	; 2
    37bc:	4f 0e       	add	r4, r31
    37be:	51 1c       	adc	r5, r1
    37c0:	f8 01       	movw	r30, r16
    37c2:	a0 80       	ld	r10, Z
    37c4:	b1 80       	ldd	r11, Z+1	; 0x01
    37c6:	36 fe       	sbrs	r3, 6
    37c8:	03 c0       	rjmp	.+6      	; 0x37d0 <vfprintf+0x146>
    37ca:	69 2d       	mov	r22, r9
    37cc:	70 e0       	ldi	r23, 0x00	; 0
    37ce:	02 c0       	rjmp	.+4      	; 0x37d4 <vfprintf+0x14a>
    37d0:	6f ef       	ldi	r22, 0xFF	; 255
    37d2:	7f ef       	ldi	r23, 0xFF	; 255
    37d4:	c5 01       	movw	r24, r10
    37d6:	0e 94 31 1d 	call	0x3a62	; 0x3a62 <strnlen>
    37da:	4c 01       	movw	r8, r24
    37dc:	82 01       	movw	r16, r4
    37de:	f3 2d       	mov	r31, r3
    37e0:	ff 77       	andi	r31, 0x7F	; 127
    37e2:	3f 2e       	mov	r3, r31
    37e4:	16 c0       	rjmp	.+44     	; 0x3812 <vfprintf+0x188>
    37e6:	28 01       	movw	r4, r16
    37e8:	22 e0       	ldi	r18, 0x02	; 2
    37ea:	42 0e       	add	r4, r18
    37ec:	51 1c       	adc	r5, r1
    37ee:	f8 01       	movw	r30, r16
    37f0:	a0 80       	ld	r10, Z
    37f2:	b1 80       	ldd	r11, Z+1	; 0x01
    37f4:	36 fe       	sbrs	r3, 6
    37f6:	03 c0       	rjmp	.+6      	; 0x37fe <vfprintf+0x174>
    37f8:	69 2d       	mov	r22, r9
    37fa:	70 e0       	ldi	r23, 0x00	; 0
    37fc:	02 c0       	rjmp	.+4      	; 0x3802 <vfprintf+0x178>
    37fe:	6f ef       	ldi	r22, 0xFF	; 255
    3800:	7f ef       	ldi	r23, 0xFF	; 255
    3802:	c5 01       	movw	r24, r10
    3804:	0e 94 26 1d 	call	0x3a4c	; 0x3a4c <strnlen_P>
    3808:	4c 01       	movw	r8, r24
    380a:	f3 2d       	mov	r31, r3
    380c:	f0 68       	ori	r31, 0x80	; 128
    380e:	3f 2e       	mov	r3, r31
    3810:	82 01       	movw	r16, r4
    3812:	33 fc       	sbrc	r3, 3
    3814:	1b c0       	rjmp	.+54     	; 0x384c <vfprintf+0x1c2>
    3816:	82 2d       	mov	r24, r2
    3818:	90 e0       	ldi	r25, 0x00	; 0
    381a:	88 16       	cp	r8, r24
    381c:	99 06       	cpc	r9, r25
    381e:	b0 f4       	brcc	.+44     	; 0x384c <vfprintf+0x1c2>
    3820:	b6 01       	movw	r22, r12
    3822:	80 e2       	ldi	r24, 0x20	; 32
    3824:	90 e0       	ldi	r25, 0x00	; 0
    3826:	0e 94 3c 1d 	call	0x3a78	; 0x3a78 <fputc>
    382a:	2a 94       	dec	r2
    382c:	f4 cf       	rjmp	.-24     	; 0x3816 <vfprintf+0x18c>
    382e:	f5 01       	movw	r30, r10
    3830:	37 fc       	sbrc	r3, 7
    3832:	85 91       	lpm	r24, Z+
    3834:	37 fe       	sbrs	r3, 7
    3836:	81 91       	ld	r24, Z+
    3838:	5f 01       	movw	r10, r30
    383a:	b6 01       	movw	r22, r12
    383c:	90 e0       	ldi	r25, 0x00	; 0
    383e:	0e 94 3c 1d 	call	0x3a78	; 0x3a78 <fputc>
    3842:	21 10       	cpse	r2, r1
    3844:	2a 94       	dec	r2
    3846:	21 e0       	ldi	r18, 0x01	; 1
    3848:	82 1a       	sub	r8, r18
    384a:	91 08       	sbc	r9, r1
    384c:	81 14       	cp	r8, r1
    384e:	91 04       	cpc	r9, r1
    3850:	71 f7       	brne	.-36     	; 0x382e <vfprintf+0x1a4>
    3852:	e8 c0       	rjmp	.+464    	; 0x3a24 <vfprintf+0x39a>
    3854:	84 36       	cpi	r24, 0x64	; 100
    3856:	11 f0       	breq	.+4      	; 0x385c <vfprintf+0x1d2>
    3858:	89 36       	cpi	r24, 0x69	; 105
    385a:	41 f5       	brne	.+80     	; 0x38ac <vfprintf+0x222>
    385c:	f8 01       	movw	r30, r16
    385e:	37 fe       	sbrs	r3, 7
    3860:	07 c0       	rjmp	.+14     	; 0x3870 <vfprintf+0x1e6>
    3862:	60 81       	ld	r22, Z
    3864:	71 81       	ldd	r23, Z+1	; 0x01
    3866:	82 81       	ldd	r24, Z+2	; 0x02
    3868:	93 81       	ldd	r25, Z+3	; 0x03
    386a:	0c 5f       	subi	r16, 0xFC	; 252
    386c:	1f 4f       	sbci	r17, 0xFF	; 255
    386e:	08 c0       	rjmp	.+16     	; 0x3880 <vfprintf+0x1f6>
    3870:	60 81       	ld	r22, Z
    3872:	71 81       	ldd	r23, Z+1	; 0x01
    3874:	07 2e       	mov	r0, r23
    3876:	00 0c       	add	r0, r0
    3878:	88 0b       	sbc	r24, r24
    387a:	99 0b       	sbc	r25, r25
    387c:	0e 5f       	subi	r16, 0xFE	; 254
    387e:	1f 4f       	sbci	r17, 0xFF	; 255
    3880:	f3 2d       	mov	r31, r3
    3882:	ff 76       	andi	r31, 0x6F	; 111
    3884:	3f 2e       	mov	r3, r31
    3886:	97 ff       	sbrs	r25, 7
    3888:	09 c0       	rjmp	.+18     	; 0x389c <vfprintf+0x212>
    388a:	90 95       	com	r25
    388c:	80 95       	com	r24
    388e:	70 95       	com	r23
    3890:	61 95       	neg	r22
    3892:	7f 4f       	sbci	r23, 0xFF	; 255
    3894:	8f 4f       	sbci	r24, 0xFF	; 255
    3896:	9f 4f       	sbci	r25, 0xFF	; 255
    3898:	f0 68       	ori	r31, 0x80	; 128
    389a:	3f 2e       	mov	r3, r31
    389c:	2a e0       	ldi	r18, 0x0A	; 10
    389e:	30 e0       	ldi	r19, 0x00	; 0
    38a0:	a3 01       	movw	r20, r6
    38a2:	0e 94 78 1d 	call	0x3af0	; 0x3af0 <__ultoa_invert>
    38a6:	88 2e       	mov	r8, r24
    38a8:	86 18       	sub	r8, r6
    38aa:	45 c0       	rjmp	.+138    	; 0x3936 <vfprintf+0x2ac>
    38ac:	85 37       	cpi	r24, 0x75	; 117
    38ae:	31 f4       	brne	.+12     	; 0x38bc <vfprintf+0x232>
    38b0:	23 2d       	mov	r18, r3
    38b2:	2f 7e       	andi	r18, 0xEF	; 239
    38b4:	b2 2e       	mov	r11, r18
    38b6:	2a e0       	ldi	r18, 0x0A	; 10
    38b8:	30 e0       	ldi	r19, 0x00	; 0
    38ba:	25 c0       	rjmp	.+74     	; 0x3906 <vfprintf+0x27c>
    38bc:	93 2d       	mov	r25, r3
    38be:	99 7f       	andi	r25, 0xF9	; 249
    38c0:	b9 2e       	mov	r11, r25
    38c2:	8f 36       	cpi	r24, 0x6F	; 111
    38c4:	c1 f0       	breq	.+48     	; 0x38f6 <vfprintf+0x26c>
    38c6:	18 f4       	brcc	.+6      	; 0x38ce <vfprintf+0x244>
    38c8:	88 35       	cpi	r24, 0x58	; 88
    38ca:	79 f0       	breq	.+30     	; 0x38ea <vfprintf+0x260>
    38cc:	b5 c0       	rjmp	.+362    	; 0x3a38 <vfprintf+0x3ae>
    38ce:	80 37       	cpi	r24, 0x70	; 112
    38d0:	19 f0       	breq	.+6      	; 0x38d8 <vfprintf+0x24e>
    38d2:	88 37       	cpi	r24, 0x78	; 120
    38d4:	21 f0       	breq	.+8      	; 0x38de <vfprintf+0x254>
    38d6:	b0 c0       	rjmp	.+352    	; 0x3a38 <vfprintf+0x3ae>
    38d8:	e9 2f       	mov	r30, r25
    38da:	e0 61       	ori	r30, 0x10	; 16
    38dc:	be 2e       	mov	r11, r30
    38de:	b4 fe       	sbrs	r11, 4
    38e0:	0d c0       	rjmp	.+26     	; 0x38fc <vfprintf+0x272>
    38e2:	fb 2d       	mov	r31, r11
    38e4:	f4 60       	ori	r31, 0x04	; 4
    38e6:	bf 2e       	mov	r11, r31
    38e8:	09 c0       	rjmp	.+18     	; 0x38fc <vfprintf+0x272>
    38ea:	34 fe       	sbrs	r3, 4
    38ec:	0a c0       	rjmp	.+20     	; 0x3902 <vfprintf+0x278>
    38ee:	29 2f       	mov	r18, r25
    38f0:	26 60       	ori	r18, 0x06	; 6
    38f2:	b2 2e       	mov	r11, r18
    38f4:	06 c0       	rjmp	.+12     	; 0x3902 <vfprintf+0x278>
    38f6:	28 e0       	ldi	r18, 0x08	; 8
    38f8:	30 e0       	ldi	r19, 0x00	; 0
    38fa:	05 c0       	rjmp	.+10     	; 0x3906 <vfprintf+0x27c>
    38fc:	20 e1       	ldi	r18, 0x10	; 16
    38fe:	30 e0       	ldi	r19, 0x00	; 0
    3900:	02 c0       	rjmp	.+4      	; 0x3906 <vfprintf+0x27c>
    3902:	20 e1       	ldi	r18, 0x10	; 16
    3904:	32 e0       	ldi	r19, 0x02	; 2
    3906:	f8 01       	movw	r30, r16
    3908:	b7 fe       	sbrs	r11, 7
    390a:	07 c0       	rjmp	.+14     	; 0x391a <vfprintf+0x290>
    390c:	60 81       	ld	r22, Z
    390e:	71 81       	ldd	r23, Z+1	; 0x01
    3910:	82 81       	ldd	r24, Z+2	; 0x02
    3912:	93 81       	ldd	r25, Z+3	; 0x03
    3914:	0c 5f       	subi	r16, 0xFC	; 252
    3916:	1f 4f       	sbci	r17, 0xFF	; 255
    3918:	06 c0       	rjmp	.+12     	; 0x3926 <vfprintf+0x29c>
    391a:	60 81       	ld	r22, Z
    391c:	71 81       	ldd	r23, Z+1	; 0x01
    391e:	80 e0       	ldi	r24, 0x00	; 0
    3920:	90 e0       	ldi	r25, 0x00	; 0
    3922:	0e 5f       	subi	r16, 0xFE	; 254
    3924:	1f 4f       	sbci	r17, 0xFF	; 255
    3926:	a3 01       	movw	r20, r6
    3928:	0e 94 78 1d 	call	0x3af0	; 0x3af0 <__ultoa_invert>
    392c:	88 2e       	mov	r8, r24
    392e:	86 18       	sub	r8, r6
    3930:	fb 2d       	mov	r31, r11
    3932:	ff 77       	andi	r31, 0x7F	; 127
    3934:	3f 2e       	mov	r3, r31
    3936:	36 fe       	sbrs	r3, 6
    3938:	0d c0       	rjmp	.+26     	; 0x3954 <vfprintf+0x2ca>
    393a:	23 2d       	mov	r18, r3
    393c:	2e 7f       	andi	r18, 0xFE	; 254
    393e:	a2 2e       	mov	r10, r18
    3940:	89 14       	cp	r8, r9
    3942:	58 f4       	brcc	.+22     	; 0x395a <vfprintf+0x2d0>
    3944:	34 fe       	sbrs	r3, 4
    3946:	0b c0       	rjmp	.+22     	; 0x395e <vfprintf+0x2d4>
    3948:	32 fc       	sbrc	r3, 2
    394a:	09 c0       	rjmp	.+18     	; 0x395e <vfprintf+0x2d4>
    394c:	83 2d       	mov	r24, r3
    394e:	8e 7e       	andi	r24, 0xEE	; 238
    3950:	a8 2e       	mov	r10, r24
    3952:	05 c0       	rjmp	.+10     	; 0x395e <vfprintf+0x2d4>
    3954:	b8 2c       	mov	r11, r8
    3956:	a3 2c       	mov	r10, r3
    3958:	03 c0       	rjmp	.+6      	; 0x3960 <vfprintf+0x2d6>
    395a:	b8 2c       	mov	r11, r8
    395c:	01 c0       	rjmp	.+2      	; 0x3960 <vfprintf+0x2d6>
    395e:	b9 2c       	mov	r11, r9
    3960:	a4 fe       	sbrs	r10, 4
    3962:	0f c0       	rjmp	.+30     	; 0x3982 <vfprintf+0x2f8>
    3964:	fe 01       	movw	r30, r28
    3966:	e8 0d       	add	r30, r8
    3968:	f1 1d       	adc	r31, r1
    396a:	80 81       	ld	r24, Z
    396c:	80 33       	cpi	r24, 0x30	; 48
    396e:	21 f4       	brne	.+8      	; 0x3978 <vfprintf+0x2ee>
    3970:	9a 2d       	mov	r25, r10
    3972:	99 7e       	andi	r25, 0xE9	; 233
    3974:	a9 2e       	mov	r10, r25
    3976:	09 c0       	rjmp	.+18     	; 0x398a <vfprintf+0x300>
    3978:	a2 fe       	sbrs	r10, 2
    397a:	06 c0       	rjmp	.+12     	; 0x3988 <vfprintf+0x2fe>
    397c:	b3 94       	inc	r11
    397e:	b3 94       	inc	r11
    3980:	04 c0       	rjmp	.+8      	; 0x398a <vfprintf+0x300>
    3982:	8a 2d       	mov	r24, r10
    3984:	86 78       	andi	r24, 0x86	; 134
    3986:	09 f0       	breq	.+2      	; 0x398a <vfprintf+0x300>
    3988:	b3 94       	inc	r11
    398a:	a3 fc       	sbrc	r10, 3
    398c:	11 c0       	rjmp	.+34     	; 0x39b0 <vfprintf+0x326>
    398e:	a0 fe       	sbrs	r10, 0
    3990:	06 c0       	rjmp	.+12     	; 0x399e <vfprintf+0x314>
    3992:	b2 14       	cp	r11, r2
    3994:	88 f4       	brcc	.+34     	; 0x39b8 <vfprintf+0x32e>
    3996:	28 0c       	add	r2, r8
    3998:	92 2c       	mov	r9, r2
    399a:	9b 18       	sub	r9, r11
    399c:	0e c0       	rjmp	.+28     	; 0x39ba <vfprintf+0x330>
    399e:	b2 14       	cp	r11, r2
    39a0:	60 f4       	brcc	.+24     	; 0x39ba <vfprintf+0x330>
    39a2:	b6 01       	movw	r22, r12
    39a4:	80 e2       	ldi	r24, 0x20	; 32
    39a6:	90 e0       	ldi	r25, 0x00	; 0
    39a8:	0e 94 3c 1d 	call	0x3a78	; 0x3a78 <fputc>
    39ac:	b3 94       	inc	r11
    39ae:	f7 cf       	rjmp	.-18     	; 0x399e <vfprintf+0x314>
    39b0:	b2 14       	cp	r11, r2
    39b2:	18 f4       	brcc	.+6      	; 0x39ba <vfprintf+0x330>
    39b4:	2b 18       	sub	r2, r11
    39b6:	02 c0       	rjmp	.+4      	; 0x39bc <vfprintf+0x332>
    39b8:	98 2c       	mov	r9, r8
    39ba:	21 2c       	mov	r2, r1
    39bc:	a4 fe       	sbrs	r10, 4
    39be:	10 c0       	rjmp	.+32     	; 0x39e0 <vfprintf+0x356>
    39c0:	b6 01       	movw	r22, r12
    39c2:	80 e3       	ldi	r24, 0x30	; 48
    39c4:	90 e0       	ldi	r25, 0x00	; 0
    39c6:	0e 94 3c 1d 	call	0x3a78	; 0x3a78 <fputc>
    39ca:	a2 fe       	sbrs	r10, 2
    39cc:	17 c0       	rjmp	.+46     	; 0x39fc <vfprintf+0x372>
    39ce:	a1 fc       	sbrc	r10, 1
    39d0:	03 c0       	rjmp	.+6      	; 0x39d8 <vfprintf+0x34e>
    39d2:	88 e7       	ldi	r24, 0x78	; 120
    39d4:	90 e0       	ldi	r25, 0x00	; 0
    39d6:	02 c0       	rjmp	.+4      	; 0x39dc <vfprintf+0x352>
    39d8:	88 e5       	ldi	r24, 0x58	; 88
    39da:	90 e0       	ldi	r25, 0x00	; 0
    39dc:	b6 01       	movw	r22, r12
    39de:	0c c0       	rjmp	.+24     	; 0x39f8 <vfprintf+0x36e>
    39e0:	8a 2d       	mov	r24, r10
    39e2:	86 78       	andi	r24, 0x86	; 134
    39e4:	59 f0       	breq	.+22     	; 0x39fc <vfprintf+0x372>
    39e6:	a1 fe       	sbrs	r10, 1
    39e8:	02 c0       	rjmp	.+4      	; 0x39ee <vfprintf+0x364>
    39ea:	8b e2       	ldi	r24, 0x2B	; 43
    39ec:	01 c0       	rjmp	.+2      	; 0x39f0 <vfprintf+0x366>
    39ee:	80 e2       	ldi	r24, 0x20	; 32
    39f0:	a7 fc       	sbrc	r10, 7
    39f2:	8d e2       	ldi	r24, 0x2D	; 45
    39f4:	b6 01       	movw	r22, r12
    39f6:	90 e0       	ldi	r25, 0x00	; 0
    39f8:	0e 94 3c 1d 	call	0x3a78	; 0x3a78 <fputc>
    39fc:	89 14       	cp	r8, r9
    39fe:	38 f4       	brcc	.+14     	; 0x3a0e <vfprintf+0x384>
    3a00:	b6 01       	movw	r22, r12
    3a02:	80 e3       	ldi	r24, 0x30	; 48
    3a04:	90 e0       	ldi	r25, 0x00	; 0
    3a06:	0e 94 3c 1d 	call	0x3a78	; 0x3a78 <fputc>
    3a0a:	9a 94       	dec	r9
    3a0c:	f7 cf       	rjmp	.-18     	; 0x39fc <vfprintf+0x372>
    3a0e:	8a 94       	dec	r8
    3a10:	f3 01       	movw	r30, r6
    3a12:	e8 0d       	add	r30, r8
    3a14:	f1 1d       	adc	r31, r1
    3a16:	80 81       	ld	r24, Z
    3a18:	b6 01       	movw	r22, r12
    3a1a:	90 e0       	ldi	r25, 0x00	; 0
    3a1c:	0e 94 3c 1d 	call	0x3a78	; 0x3a78 <fputc>
    3a20:	81 10       	cpse	r8, r1
    3a22:	f5 cf       	rjmp	.-22     	; 0x3a0e <vfprintf+0x384>
    3a24:	22 20       	and	r2, r2
    3a26:	09 f4       	brne	.+2      	; 0x3a2a <vfprintf+0x3a0>
    3a28:	42 ce       	rjmp	.-892    	; 0x36ae <vfprintf+0x24>
    3a2a:	b6 01       	movw	r22, r12
    3a2c:	80 e2       	ldi	r24, 0x20	; 32
    3a2e:	90 e0       	ldi	r25, 0x00	; 0
    3a30:	0e 94 3c 1d 	call	0x3a78	; 0x3a78 <fputc>
    3a34:	2a 94       	dec	r2
    3a36:	f6 cf       	rjmp	.-20     	; 0x3a24 <vfprintf+0x39a>
    3a38:	f6 01       	movw	r30, r12
    3a3a:	86 81       	ldd	r24, Z+6	; 0x06
    3a3c:	97 81       	ldd	r25, Z+7	; 0x07
    3a3e:	02 c0       	rjmp	.+4      	; 0x3a44 <vfprintf+0x3ba>
    3a40:	8f ef       	ldi	r24, 0xFF	; 255
    3a42:	9f ef       	ldi	r25, 0xFF	; 255
    3a44:	2b 96       	adiw	r28, 0x0b	; 11
    3a46:	e2 e1       	ldi	r30, 0x12	; 18
    3a48:	0c 94 36 1e 	jmp	0x3c6c	; 0x3c6c <__epilogue_restores__>

00003a4c <strnlen_P>:
    3a4c:	fc 01       	movw	r30, r24
    3a4e:	05 90       	lpm	r0, Z+
    3a50:	61 50       	subi	r22, 0x01	; 1
    3a52:	70 40       	sbci	r23, 0x00	; 0
    3a54:	01 10       	cpse	r0, r1
    3a56:	d8 f7       	brcc	.-10     	; 0x3a4e <strnlen_P+0x2>
    3a58:	80 95       	com	r24
    3a5a:	90 95       	com	r25
    3a5c:	8e 0f       	add	r24, r30
    3a5e:	9f 1f       	adc	r25, r31
    3a60:	08 95       	ret

00003a62 <strnlen>:
    3a62:	fc 01       	movw	r30, r24
    3a64:	61 50       	subi	r22, 0x01	; 1
    3a66:	70 40       	sbci	r23, 0x00	; 0
    3a68:	01 90       	ld	r0, Z+
    3a6a:	01 10       	cpse	r0, r1
    3a6c:	d8 f7       	brcc	.-10     	; 0x3a64 <strnlen+0x2>
    3a6e:	80 95       	com	r24
    3a70:	90 95       	com	r25
    3a72:	8e 0f       	add	r24, r30
    3a74:	9f 1f       	adc	r25, r31
    3a76:	08 95       	ret

00003a78 <fputc>:
    3a78:	0f 93       	push	r16
    3a7a:	1f 93       	push	r17
    3a7c:	cf 93       	push	r28
    3a7e:	df 93       	push	r29
    3a80:	fb 01       	movw	r30, r22
    3a82:	23 81       	ldd	r18, Z+3	; 0x03
    3a84:	21 fd       	sbrc	r18, 1
    3a86:	03 c0       	rjmp	.+6      	; 0x3a8e <fputc+0x16>
    3a88:	8f ef       	ldi	r24, 0xFF	; 255
    3a8a:	9f ef       	ldi	r25, 0xFF	; 255
    3a8c:	2c c0       	rjmp	.+88     	; 0x3ae6 <fputc+0x6e>
    3a8e:	22 ff       	sbrs	r18, 2
    3a90:	16 c0       	rjmp	.+44     	; 0x3abe <fputc+0x46>
    3a92:	46 81       	ldd	r20, Z+6	; 0x06
    3a94:	57 81       	ldd	r21, Z+7	; 0x07
    3a96:	24 81       	ldd	r18, Z+4	; 0x04
    3a98:	35 81       	ldd	r19, Z+5	; 0x05
    3a9a:	42 17       	cp	r20, r18
    3a9c:	53 07       	cpc	r21, r19
    3a9e:	44 f4       	brge	.+16     	; 0x3ab0 <fputc+0x38>
    3aa0:	a0 81       	ld	r26, Z
    3aa2:	b1 81       	ldd	r27, Z+1	; 0x01
    3aa4:	9d 01       	movw	r18, r26
    3aa6:	2f 5f       	subi	r18, 0xFF	; 255
    3aa8:	3f 4f       	sbci	r19, 0xFF	; 255
    3aaa:	31 83       	std	Z+1, r19	; 0x01
    3aac:	20 83       	st	Z, r18
    3aae:	8c 93       	st	X, r24
    3ab0:	26 81       	ldd	r18, Z+6	; 0x06
    3ab2:	37 81       	ldd	r19, Z+7	; 0x07
    3ab4:	2f 5f       	subi	r18, 0xFF	; 255
    3ab6:	3f 4f       	sbci	r19, 0xFF	; 255
    3ab8:	37 83       	std	Z+7, r19	; 0x07
    3aba:	26 83       	std	Z+6, r18	; 0x06
    3abc:	14 c0       	rjmp	.+40     	; 0x3ae6 <fputc+0x6e>
    3abe:	8b 01       	movw	r16, r22
    3ac0:	ec 01       	movw	r28, r24
    3ac2:	fb 01       	movw	r30, r22
    3ac4:	00 84       	ldd	r0, Z+8	; 0x08
    3ac6:	f1 85       	ldd	r31, Z+9	; 0x09
    3ac8:	e0 2d       	mov	r30, r0
    3aca:	09 95       	icall
    3acc:	89 2b       	or	r24, r25
    3ace:	e1 f6       	brne	.-72     	; 0x3a88 <fputc+0x10>
    3ad0:	d8 01       	movw	r26, r16
    3ad2:	16 96       	adiw	r26, 0x06	; 6
    3ad4:	8d 91       	ld	r24, X+
    3ad6:	9c 91       	ld	r25, X
    3ad8:	17 97       	sbiw	r26, 0x07	; 7
    3ada:	01 96       	adiw	r24, 0x01	; 1
    3adc:	17 96       	adiw	r26, 0x07	; 7
    3ade:	9c 93       	st	X, r25
    3ae0:	8e 93       	st	-X, r24
    3ae2:	16 97       	sbiw	r26, 0x06	; 6
    3ae4:	ce 01       	movw	r24, r28
    3ae6:	df 91       	pop	r29
    3ae8:	cf 91       	pop	r28
    3aea:	1f 91       	pop	r17
    3aec:	0f 91       	pop	r16
    3aee:	08 95       	ret

00003af0 <__ultoa_invert>:
    3af0:	fa 01       	movw	r30, r20
    3af2:	aa 27       	eor	r26, r26
    3af4:	28 30       	cpi	r18, 0x08	; 8
    3af6:	51 f1       	breq	.+84     	; 0x3b4c <__ultoa_invert+0x5c>
    3af8:	20 31       	cpi	r18, 0x10	; 16
    3afa:	81 f1       	breq	.+96     	; 0x3b5c <__ultoa_invert+0x6c>
    3afc:	e8 94       	clt
    3afe:	6f 93       	push	r22
    3b00:	6e 7f       	andi	r22, 0xFE	; 254
    3b02:	6e 5f       	subi	r22, 0xFE	; 254
    3b04:	7f 4f       	sbci	r23, 0xFF	; 255
    3b06:	8f 4f       	sbci	r24, 0xFF	; 255
    3b08:	9f 4f       	sbci	r25, 0xFF	; 255
    3b0a:	af 4f       	sbci	r26, 0xFF	; 255
    3b0c:	b1 e0       	ldi	r27, 0x01	; 1
    3b0e:	3e d0       	rcall	.+124    	; 0x3b8c <__ultoa_invert+0x9c>
    3b10:	b4 e0       	ldi	r27, 0x04	; 4
    3b12:	3c d0       	rcall	.+120    	; 0x3b8c <__ultoa_invert+0x9c>
    3b14:	67 0f       	add	r22, r23
    3b16:	78 1f       	adc	r23, r24
    3b18:	89 1f       	adc	r24, r25
    3b1a:	9a 1f       	adc	r25, r26
    3b1c:	a1 1d       	adc	r26, r1
    3b1e:	68 0f       	add	r22, r24
    3b20:	79 1f       	adc	r23, r25
    3b22:	8a 1f       	adc	r24, r26
    3b24:	91 1d       	adc	r25, r1
    3b26:	a1 1d       	adc	r26, r1
    3b28:	6a 0f       	add	r22, r26
    3b2a:	71 1d       	adc	r23, r1
    3b2c:	81 1d       	adc	r24, r1
    3b2e:	91 1d       	adc	r25, r1
    3b30:	a1 1d       	adc	r26, r1
    3b32:	20 d0       	rcall	.+64     	; 0x3b74 <__ultoa_invert+0x84>
    3b34:	09 f4       	brne	.+2      	; 0x3b38 <__ultoa_invert+0x48>
    3b36:	68 94       	set
    3b38:	3f 91       	pop	r19
    3b3a:	2a e0       	ldi	r18, 0x0A	; 10
    3b3c:	26 9f       	mul	r18, r22
    3b3e:	11 24       	eor	r1, r1
    3b40:	30 19       	sub	r19, r0
    3b42:	30 5d       	subi	r19, 0xD0	; 208
    3b44:	31 93       	st	Z+, r19
    3b46:	de f6       	brtc	.-74     	; 0x3afe <__ultoa_invert+0xe>
    3b48:	cf 01       	movw	r24, r30
    3b4a:	08 95       	ret
    3b4c:	46 2f       	mov	r20, r22
    3b4e:	47 70       	andi	r20, 0x07	; 7
    3b50:	40 5d       	subi	r20, 0xD0	; 208
    3b52:	41 93       	st	Z+, r20
    3b54:	b3 e0       	ldi	r27, 0x03	; 3
    3b56:	0f d0       	rcall	.+30     	; 0x3b76 <__ultoa_invert+0x86>
    3b58:	c9 f7       	brne	.-14     	; 0x3b4c <__ultoa_invert+0x5c>
    3b5a:	f6 cf       	rjmp	.-20     	; 0x3b48 <__ultoa_invert+0x58>
    3b5c:	46 2f       	mov	r20, r22
    3b5e:	4f 70       	andi	r20, 0x0F	; 15
    3b60:	40 5d       	subi	r20, 0xD0	; 208
    3b62:	4a 33       	cpi	r20, 0x3A	; 58
    3b64:	18 f0       	brcs	.+6      	; 0x3b6c <__ultoa_invert+0x7c>
    3b66:	49 5d       	subi	r20, 0xD9	; 217
    3b68:	31 fd       	sbrc	r19, 1
    3b6a:	40 52       	subi	r20, 0x20	; 32
    3b6c:	41 93       	st	Z+, r20
    3b6e:	02 d0       	rcall	.+4      	; 0x3b74 <__ultoa_invert+0x84>
    3b70:	a9 f7       	brne	.-22     	; 0x3b5c <__ultoa_invert+0x6c>
    3b72:	ea cf       	rjmp	.-44     	; 0x3b48 <__ultoa_invert+0x58>
    3b74:	b4 e0       	ldi	r27, 0x04	; 4
    3b76:	a6 95       	lsr	r26
    3b78:	97 95       	ror	r25
    3b7a:	87 95       	ror	r24
    3b7c:	77 95       	ror	r23
    3b7e:	67 95       	ror	r22
    3b80:	ba 95       	dec	r27
    3b82:	c9 f7       	brne	.-14     	; 0x3b76 <__ultoa_invert+0x86>
    3b84:	00 97       	sbiw	r24, 0x00	; 0
    3b86:	61 05       	cpc	r22, r1
    3b88:	71 05       	cpc	r23, r1
    3b8a:	08 95       	ret
    3b8c:	9b 01       	movw	r18, r22
    3b8e:	ac 01       	movw	r20, r24
    3b90:	0a 2e       	mov	r0, r26
    3b92:	06 94       	lsr	r0
    3b94:	57 95       	ror	r21
    3b96:	47 95       	ror	r20
    3b98:	37 95       	ror	r19
    3b9a:	27 95       	ror	r18
    3b9c:	ba 95       	dec	r27
    3b9e:	c9 f7       	brne	.-14     	; 0x3b92 <__ultoa_invert+0xa2>
    3ba0:	62 0f       	add	r22, r18
    3ba2:	73 1f       	adc	r23, r19
    3ba4:	84 1f       	adc	r24, r20
    3ba6:	95 1f       	adc	r25, r21
    3ba8:	a0 1d       	adc	r26, r0
    3baa:	08 95       	ret

00003bac <eeprom_read_block>:
    3bac:	dc 01       	movw	r26, r24
    3bae:	cb 01       	movw	r24, r22

00003bb0 <eeprom_read_blraw>:
    3bb0:	fc 01       	movw	r30, r24
    3bb2:	f9 99       	sbic	0x1f, 1	; 31
    3bb4:	fe cf       	rjmp	.-4      	; 0x3bb2 <eeprom_read_blraw+0x2>
    3bb6:	06 c0       	rjmp	.+12     	; 0x3bc4 <eeprom_read_blraw+0x14>
    3bb8:	f2 bd       	out	0x22, r31	; 34
    3bba:	e1 bd       	out	0x21, r30	; 33
    3bbc:	f8 9a       	sbi	0x1f, 0	; 31
    3bbe:	31 96       	adiw	r30, 0x01	; 1
    3bc0:	00 b4       	in	r0, 0x20	; 32
    3bc2:	0d 92       	st	X+, r0
    3bc4:	41 50       	subi	r20, 0x01	; 1
    3bc6:	50 40       	sbci	r21, 0x00	; 0
    3bc8:	b8 f7       	brcc	.-18     	; 0x3bb8 <eeprom_read_blraw+0x8>
    3bca:	08 95       	ret

00003bcc <eeprom_read_dword>:
    3bcc:	a6 e1       	ldi	r26, 0x16	; 22
    3bce:	b0 e0       	ldi	r27, 0x00	; 0
    3bd0:	44 e0       	ldi	r20, 0x04	; 4
    3bd2:	50 e0       	ldi	r21, 0x00	; 0
    3bd4:	0c 94 d8 1d 	jmp	0x3bb0	; 0x3bb0 <eeprom_read_blraw>

00003bd8 <eeprom_update_block>:
    3bd8:	dc 01       	movw	r26, r24
    3bda:	a4 0f       	add	r26, r20
    3bdc:	b5 1f       	adc	r27, r21
    3bde:	41 50       	subi	r20, 0x01	; 1
    3be0:	50 40       	sbci	r21, 0x00	; 0
    3be2:	48 f0       	brcs	.+18     	; 0x3bf6 <eeprom_update_block+0x1e>
    3be4:	cb 01       	movw	r24, r22
    3be6:	84 0f       	add	r24, r20
    3be8:	95 1f       	adc	r25, r21
    3bea:	2e 91       	ld	r18, -X
    3bec:	0e 94 fd 1d 	call	0x3bfa	; 0x3bfa <eeprom_update_r18>
    3bf0:	41 50       	subi	r20, 0x01	; 1
    3bf2:	50 40       	sbci	r21, 0x00	; 0
    3bf4:	d0 f7       	brcc	.-12     	; 0x3bea <eeprom_update_block+0x12>
    3bf6:	08 95       	ret

00003bf8 <eeprom_update_byte>:
    3bf8:	26 2f       	mov	r18, r22

00003bfa <eeprom_update_r18>:
    3bfa:	f9 99       	sbic	0x1f, 1	; 31
    3bfc:	fe cf       	rjmp	.-4      	; 0x3bfa <eeprom_update_r18>
    3bfe:	92 bd       	out	0x22, r25	; 34
    3c00:	81 bd       	out	0x21, r24	; 33
    3c02:	f8 9a       	sbi	0x1f, 0	; 31
    3c04:	01 97       	sbiw	r24, 0x01	; 1
    3c06:	00 b4       	in	r0, 0x20	; 32
    3c08:	02 16       	cp	r0, r18
    3c0a:	39 f0       	breq	.+14     	; 0x3c1a <eeprom_update_r18+0x20>
    3c0c:	1f ba       	out	0x1f, r1	; 31
    3c0e:	20 bd       	out	0x20, r18	; 32
    3c10:	0f b6       	in	r0, 0x3f	; 63
    3c12:	f8 94       	cli
    3c14:	fa 9a       	sbi	0x1f, 2	; 31
    3c16:	f9 9a       	sbi	0x1f, 1	; 31
    3c18:	0f be       	out	0x3f, r0	; 63
    3c1a:	08 95       	ret

00003c1c <eeprom_update_dword>:
    3c1c:	03 96       	adiw	r24, 0x03	; 3
    3c1e:	27 2f       	mov	r18, r23
    3c20:	0e 94 fd 1d 	call	0x3bfa	; 0x3bfa <eeprom_update_r18>
    3c24:	0e 94 fc 1d 	call	0x3bf8	; 0x3bf8 <eeprom_update_byte>
    3c28:	25 2f       	mov	r18, r21
    3c2a:	0e 94 fd 1d 	call	0x3bfa	; 0x3bfa <eeprom_update_r18>
    3c2e:	24 2f       	mov	r18, r20
    3c30:	0c 94 fd 1d 	jmp	0x3bfa	; 0x3bfa <eeprom_update_r18>

00003c34 <__prologue_saves__>:
    3c34:	2f 92       	push	r2
    3c36:	3f 92       	push	r3
    3c38:	4f 92       	push	r4
    3c3a:	5f 92       	push	r5
    3c3c:	6f 92       	push	r6
    3c3e:	7f 92       	push	r7
    3c40:	8f 92       	push	r8
    3c42:	9f 92       	push	r9
    3c44:	af 92       	push	r10
    3c46:	bf 92       	push	r11
    3c48:	cf 92       	push	r12
    3c4a:	df 92       	push	r13
    3c4c:	ef 92       	push	r14
    3c4e:	ff 92       	push	r15
    3c50:	0f 93       	push	r16
    3c52:	1f 93       	push	r17
    3c54:	cf 93       	push	r28
    3c56:	df 93       	push	r29
    3c58:	cd b7       	in	r28, 0x3d	; 61
    3c5a:	de b7       	in	r29, 0x3e	; 62
    3c5c:	ca 1b       	sub	r28, r26
    3c5e:	db 0b       	sbc	r29, r27
    3c60:	0f b6       	in	r0, 0x3f	; 63
    3c62:	f8 94       	cli
    3c64:	de bf       	out	0x3e, r29	; 62
    3c66:	0f be       	out	0x3f, r0	; 63
    3c68:	cd bf       	out	0x3d, r28	; 61
    3c6a:	09 94       	ijmp

00003c6c <__epilogue_restores__>:
    3c6c:	2a 88       	ldd	r2, Y+18	; 0x12
    3c6e:	39 88       	ldd	r3, Y+17	; 0x11
    3c70:	48 88       	ldd	r4, Y+16	; 0x10
    3c72:	5f 84       	ldd	r5, Y+15	; 0x0f
    3c74:	6e 84       	ldd	r6, Y+14	; 0x0e
    3c76:	7d 84       	ldd	r7, Y+13	; 0x0d
    3c78:	8c 84       	ldd	r8, Y+12	; 0x0c
    3c7a:	9b 84       	ldd	r9, Y+11	; 0x0b
    3c7c:	aa 84       	ldd	r10, Y+10	; 0x0a
    3c7e:	b9 84       	ldd	r11, Y+9	; 0x09
    3c80:	c8 84       	ldd	r12, Y+8	; 0x08
    3c82:	df 80       	ldd	r13, Y+7	; 0x07
    3c84:	ee 80       	ldd	r14, Y+6	; 0x06
    3c86:	fd 80       	ldd	r15, Y+5	; 0x05
    3c88:	0c 81       	ldd	r16, Y+4	; 0x04
    3c8a:	1b 81       	ldd	r17, Y+3	; 0x03
    3c8c:	aa 81       	ldd	r26, Y+2	; 0x02
    3c8e:	b9 81       	ldd	r27, Y+1	; 0x01
    3c90:	ce 0f       	add	r28, r30
    3c92:	d1 1d       	adc	r29, r1
    3c94:	0f b6       	in	r0, 0x3f	; 63
    3c96:	f8 94       	cli
    3c98:	de bf       	out	0x3e, r29	; 62
    3c9a:	0f be       	out	0x3f, r0	; 63
    3c9c:	cd bf       	out	0x3d, r28	; 61
    3c9e:	ed 01       	movw	r28, r26
    3ca0:	08 95       	ret

00003ca2 <_exit>:
    3ca2:	f8 94       	cli

00003ca4 <__stop_program>:
    3ca4:	ff cf       	rjmp	.-2      	; 0x3ca4 <__stop_program>
